{"version":3,"sources":["BrowserInfo.js","Lang.js","Tools.js","Tour.js","UI.js","controlPanal.js","controlPanelBig.js","devCursor.js","Gallery.js","Marker.js","mouseMenu.js","notification.js","popUp.js","popUpLg.js","Slider.js","SliderLg.js","Tools/copyDirectionMarker.js","Tools/copyInfoMarker.js","Tools/copyMarker.js","Tools/init.js","Tools/meshEditor.js","Tools/setPoint.js","Tour/addEventListeners.js","Tour/animate.js","Tour/backgroundImage.js","Tour/controls.js","Tour/createScene.js","Tour/defaultOption.js","Tour/detectFaceInCamera.js","Tour/dictionary.js","Tour/events.js","Tour/fullscreenEvents.js","Tour/getManifest.js","Tour/getPanorama.js","Tour/getRandomQuery.js","Tour/getRenderer.js","Tour/history.js","Tour/Image.js","Tour/ImageBitmapLoader.js","Tour/ImageLoader.js","Tour/init.js","Tour/keyEvents.js","Tour/lazyload.js","Tour/load.js","Tour/LoadingManager.js","Tour/Marker.js","Tour/mouseEvents.js","Tour/options.js","Tour/orientationControls.js","Tour/query.js","Tour/render.js","Tour/resize.js","Tour/sentry.js","Tour/setControlPanel.js","Tour/setGallery.js","Tour/setMarkers.js","Tour/setMesh.js","Tour/setMouseMenu.js","Tour/setPanorama.js","Tour/setPlane.js","Tour/setRenderer.js","Tour/setSliders.js","Tour/setTexture.js","Tour/setVideos.js","Tour/Transition.js","Tour/Video.js","Tour/view.js","three.js","CanvasRenderer.js","CSS3DRenderer.js","DeviceOrientationControls.js","Projector.js","weakmap-polyfill.js"],"names":["BrouserInfo","screenSize","screen","width","height","isSupportedCanvas","canvas","document","createElement","getContext","isSupportedTransformWebGL","window","WebGLRenderingContext","e","isSupportedTransformCSS","propertys","webkitTransformStyle","MozTransformStyle","msTransformStyle","transformStyle","element","body","insertBefore","k","undefined","style","transform","st","getComputedStyle","n","getPropertyValue","removeChild","detectOS","name","version","clientStrings","s","r","id","cs","test","navigator","userAgent","exec","appVersion","detectBrouser","nameOffset","verOffset","ix","nAgt","appName","parseFloat","indexOf","substring","lastIndexOf","toLowerCase","toUpperCase","detectApple","detectMobile","detectProtocol","location","protocol","webgl","css","os","brouser","mobile","apple","array","Float32Array","Lang","set","language","dictionary","this","documentElement","lang","userLanguage","split","translate","value","get","key","Tools","Tour","UI","controlPanel","init","visibility","progressValue","className","progressBar","appendChild","btnList","panel","domElement","setProgress","setVisible","classList","addBtn","callback","title","btn","add","addEventListener","Math","min","setOrientation","deg","orientation","setAttribute","controlPanelBig","devCursor","cursor","gallery","borderHoverSize","visible","ul","toggler","toggle","bind","items","display","onOpen","onClose","addItem","options","item","onclick","backgroundImage","image","titleElem","innerText","setActive","remove","getBoundingClientRect","itemRect","ulRect","top","y","scrollTop","Marker","action","icon","sound","markersContayner","getElementById","buttonDomElement","setTitlePosition","size","clientWidth","setIcon","setTitle","setSound","setPosition","prototype","content","span","innerHTML","titleDomElement","children","newWidth","marginLeft","x","innerWidth","innerHeight","offset","direction","marginTop","clientHeight","type","parentNode","mouseMenu","event","preventDefault","open","stopPropagation","close","left","margin","clientX","clientY","max","Item","titleElement","textContent","keyElement","disabled","onselect","setDisable","setText","Hr","notification","textDomElement","setTimeout","clearTimeout","text","show","duration","popUp","console","log","querySelector","target","closeElement","popstate","canAccessIFrame","Object","keys","parent","scrollY","scrollX","hash","scrollTo","scroll","length","popUpLg","Slider","frame","popupId","images","getElementsByTagName","tape","prevButton","SliderButton","nextButton","sliderBullets","bulletsElement","i","bullet","sliderAutoNextFrameInterval","autoNextInterval","setInterval","next","slice","move","stopImmediatePropagation","userEvent","clearInterval","onload","substr","slider","v","SliderLg","copyDirectionMarker","lat","info","view","code","JSON","stringify","toFixed","lon","point","controls","copyText","copyInfoMarker","marker","copyMarker","prompt","setPoint","keyCode","copyLon","meshEditor","fov","onMouseMove","mouse","THREE","Vector2","raycaster","Raycaster","setFromCamera","camera","intersects","intersectObjects","meshs","forEach","material","color","opacity","selectedMesh","object","durationCrop","alpha","altKey","ctrlKey","shiftKey","sm","position","z","rotation","PI","scale","map","repeat","selectedVideo","fix","mesh","_videoId","videos","texture","videoId","_imageId","imageId","directions","currentDirection","assign","right","bottom","addEventListeners","active","passive","renderer","fullscreen","mouseEvents","down","wheel","gesturestart","gesturechange","up","fullscreenEvents","change","keyEvents","resize","history","onpopstate","animate","requestAnimationFrame","auto","abs","autorotationSpeed","autorotationAlign","kineticResistance","emmit","phi","degToRad","theta","Vector3","sin","cos","isSecureContext","orientationControls","enabled","update","lookAt","updateProjectionMatrix","render","wrapper","Image","rendererType","url","backgroundColor","setClearColor","Color","decode","src","then","getUrl","quality","toBlob","blob","URL","createObjectURL","toDataURL","data","transitionStart","zoom","after","transition","transitionEnd","back","forward","go","previous","opennewtab","href","mute","bgmState","bgmplayer","bgmCurrent","pause","elem","getElementsByClassName","play","microsite","getManifest","control","gohome","fullscreenElement","msFullscreenElement","webkitCurrentFullScreenElement","mozFullScreenElemenz","exitFullscreen","msExitFullscreen","webkitCancelFullScreen","mozCancelFullScreen","unlock","requestFullscreen","msRequestFullscreen","webkitRequestFullScreen","mozRequestFullScreen","lock","visitSite","download","save","link","dispatchEvent","MouseEvent","autoRotate","timeout","autorotateTimeout","autorotationTimeout","reload","toggleMenu","toggleMenuItem","stopRotate","zoomIn","zoomOut","moveUp","moveDown","moveRight","moveLeft","toggleControls","ctrl","disconnect","connect","getCode","allow","join","report","done","metaKey","replace","execCommand","range","createRange","selectNode","getSelection","removeAllRanges","addRange","clipboardData","setData","editor","suport","help","page","badBrowser","closeWindow","createScene","setRenderer","imageType","scene","Scene","PerspectiveCamera","sides","increase","Object3D","ondragstart","CSS3DObject","fromArray","segments","geometry","BoxGeometry","materials","push","MeshBasicMaterial","Texture","Mesh","defaultOption","path","mainifest","tileset","initFov","mouseSensitivity","touchDrag","touchScroll","scaleControl","iFrameScaleControl","sentry","dsn","limit","detectFaceInCamera","faces","vector","face","materialIndex","distance","virtual-tour","en","ru","uk","de","zh","loading","mousemenu.back","mousemenu.forward","mousemenu.reload","mousemenu.zoomout","mousemenu.zoomin","mousemenu.autorotate","mousemenu.fullscreen","mousemenu.hidemenu","mousemenu.showmenu","mousemenu.getcode","mousemenu.saveimage","mousemenu.visitsite","mousemenu.newtab","key.left","key.right","key.spase","control.left","control.right","control.up","control.down","notification.successfully-copied","notification.embed-code","notification.error-load-pano","notification.error-load-img","notification.error-load-tour","notification.error-load-tour-protocol","gallery.show","gallery.hide","events","obj","call","on","mozFullScreen","webkitIsFullScreen","getPanorama","panorams","filter","pano","getRandomQuery","nocache","floor","random","pow","toString","getRenderer","query","state","loader","TextureLoader","load","transparent","depthWrite","ImageBitmapLoader","manager","LoadingManager","onprogress","onerror","request","XMLHttpRequest","_onprogress","_onload","onreadystatechange","readyState","status","responseType","send","abort","headers","getAllResponseHeaders","mimeType","match","imageOrientation","resizeQuality","that","parseInt","createImageBitmap","Blob","response","bitmap","complete","_onimageload","err","progress","loaded","total","oncomplete","ImageLoader","setSlidersLg","setMouseMenu","setControlPanel","setVideos","setImages","start","setGallery","galleryVisible","currentBGM","bgm","panoid","lazyImages","querySelectorAll","lazyImageObserver","IntersectionObserver","entries","entry","isIntersecting","lazyImage","dataset","unobserve","observe","getAttribute","removeAttribute","xhr","errorText","json","responseText","parse","message","lines","line","bites","loaders","sum","_this","completeAll","every","setLatLon","create","constructor","draw","pos","clone","project","oc","radToDeg","_setCinetic","touches","previousEvent","timeStamp","cineticLon","cineticLat","_touches2mouse","pageX","devicePixelRatio","pageY","defaultPrevented","isIframe","composed","deltaY","deltaMode","zoomTimeout","which","drag","tan","startFov","rad","a","atan","defineProperty","enumerable","DeviceOrientationControls","detectDevice","removeEventListener","list","search","querie","values","compare","b","previousCamera","needsUpdate","f","Date","now","renderers","markers","Vector4","copy","scrollWidth","scrollHeight","aspect","setSize","setPixelRatio","script","crossorigin","head","Sentry","configureScope","scope","setTag","listNumber","setMarkers","bgmid","volume","loop","sfx","popupid","click","Array","isArray","index","planes","planeId","imgeURL","setPlane","m","setMesh","video","videoElement","plane","PlaneGeometry","itemList","backBtn","forwardBtn","setPanorama","zoomin","heading","setTexture","panorama","autorotation","img","CanvasTexture","WebGLRenderer","antialias","preserveDrawingBuffer","CSS3DRenderer","CanvasRenderer","sortObjects","setSliders","sliders","loadingManager","ctx","drawImage","tile","getImageData","tempcanvas","tempctx","putImageData","Video","Transition","speed","setOptions","moveTo","noanim","follow","Infinity","preload","mobileVideoScale","muted","autoplay","sync","currentTime","syncTimeout","syncInterval","ceil","replaceHistory","step","global","factory","exports","module","define","amd","self","EventDispatcher","Matrix3","elements","arguments","error","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","textureId","uuid","MathUtils","generateUUID","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","ClampToEdgeWrapping","LinearFilter","LinearMipmapLinearFilter","RGBAFormat","internalFormat","UnsignedByteType","center","matrixAutoUpdate","matrix","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","LinearEncoding","onUpdate","w","WebGLRenderTarget","scissor","scissorTest","viewport","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","Quaternion","_x","_y","_z","_w","Matrix4","Euler","order","_order","DefaultOrder","Layers","mask","onRotationChange","quaternion","setFromEuler","onQuaternionChange","setFromQuaternion","_object3DId","DefaultUp","_onChange","defineProperties","configurable","modelViewMatrix","normalMatrix","matrixWorld","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","layers","castShadow","receiveShadow","frustumCulled","renderOrder","userData","background","environment","fog","overrideMaterial","autoUpdate","__THREE_DEVTOOLS__","CustomEvent","detail","Box3","satForAxes","axes","v0","v1","v2","extents","j","_testAxis","p0","dot","p1","p2","Sphere","radius","Ray","origin","Plane","normal","constant","Triangle","c","g","setRGB","hue2rgb","p","q","t","SRGBToLinear","LinearToSRGB","Face3","isVector3","vertexNormals","isColor","vertexColors","Material","materialId","blending","NormalBlending","side","FrontSide","flatShading","blendSrc","SrcAlphaFactor","blendDst","OneMinusSrcAlphaFactor","blendEquation","AddEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","LessEqualDepth","depthTest","stencilWriteMask","stencilFunc","AlwaysStencilFunc","stencilRef","stencilFuncMask","stencilFail","KeepStencilOp","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","parameters","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","MultiplyOperation","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","BufferAttribute","itemSize","normalized","TypeError","count","usage","StaticDrawUsage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float64BufferAttribute","Float64Array","DirectGeometry","vertices","normals","colors","uvs","uvs2","groups","skinWeights","skinIndices","boundingBox","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","arrayMax","l","BufferGeometry","_bufferGeometryId","attributes","morphAttributes","morphTargetsRelative","drawRange","updateMorphTargets","checkIntersection","ray","pA","pB","pC","intersect","BackSide","intersectTriangle","DoubleSide","_intersectionPointWorld","applyMatrix4","distanceTo","near","far","checkBufferGeometryIntersection","morphPosition","uv","uv2","_vA","fromBufferAttribute","_vB","_vC","morphInfluences","morphTargetInfluences","_morphA","_morphB","_morphC","il","influence","morphAttribute","_tempA","_tempB","_tempC","addScaledVector","sub","intersection","_intersectionPoint","_uvA","_uvB","_uvC","getUV","getNormal","Geometry","_geometryId","faceVertexUvs","morphNormals","lineDistances","elementsNeedUpdate","lineDistancesNeedUpdate","cloneUniforms","dst","u","property","isMatrix3","isMatrix4","isVector2","isVector4","isTexture","mergeUniforms","uniforms","merged","tmp","ShaderMaterial","defines","vertexShader","default_vertex","fragmentShader","default_fragment","linewidth","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Camera","matrixWorldInverse","projectionMatrix","projectionMatrixInverse","focus","filmGauge","filmOffset","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","RGBFormat","renderTarget","WebGLCubeRenderTarget","updateMatrixWorld","currentRenderTarget","getRenderTarget","setRenderTarget","clear","depth","stencil","dummy","Number","isInteger","warn","DataTexture","NearestFilter","Frustum","p3","p4","p5","WebGLAnimation","onAnimationFrame","time","isAnimating","animationLoop","context","stop","setAnimationLoop","setContext","WebGLAttributes","gl","capabilities","createBuffer","attribute","bufferType","buffer","bindBuffer","bufferData","onUploadCallback","bytesPerElement","BYTES_PER_ELEMENT","updateBuffer","bufferSubData","isWebGL2","subarray","isInterleavedBufferAttribute","buffers","deleteBuffer","WeakMap","widthSegments","heightSegments","fromBufferGeometry","PlaneBufferGeometry","mergeVertices","iy","width_half","height_half","gridX","gridY","gridX1","gridY1","segment_width","segment_height","indices","d","setIndex","WebGLBackground","objects","renderList","forceClear","xr","session","getSession","environmentBlendMode","setClear","clearColor","clearAlpha","autoClear","autoClearColor","autoClearDepth","autoClearStencil","isCubeTexture","isWebGLCubeRenderTarget","CubeUVReflectionMapping","boxMesh","BoxBufferGeometry","ShaderLib","cube","deleteAttribute","onBeforeRender","copyPosition","flipEnvMap","currentBackground","currentBackgroundVersion","currentTonemapping","toneMapping","unshift","planeMesh","t2D","updateMatrix","uvTransform","getClearColor","getClearAlpha","setClearAlpha","WebGLBufferRenderer","setMode","mode","drawArrays","renderInstances","primcount","extension","methodName","WebGLCapabilities","getMaxAnisotropy","maxAnisotropy","getParameter","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getMaxPrecision","getShaderPrecisionFormat","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","maxVertexTextures","maxTextureSize","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","floatVertexTextures","maxSamples","WebGLClipping","resetGlobalState","uniform","globalState","numGlobalPlanes","numPlanes","numIntersection","projectPlanes","dstOffset","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","viewNormalMatrix","getNormalMatrix","i4","toArray","localClippingEnabled","renderingShadows","enableLocalClipping","beginShadows","endShadows","setState","cache","fromCache","nGlobal","lGlobal","clippingState","WebGLExtensions","getExtension","WebGLGeometries","onGeometryDispose","buffergeometry","geometries","wireframeAttributes","memory","isBufferGeometry","isGeometry","_bufferGeometry","setFromObject","geometryAttributes","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","instanceCount","calls","triangles","points","reset","textures","programs","autoReset","absNumericalSort","WebGLMorphtargets","program","objectInfluences","influences","influencesList","sort","morphInfluencesSum","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateMap","updateFromObject","isInstancedMesh","instanceMatrix","dispose","CubeTexture","CubeReflectionMapping","DataTexture2DArray","wrapR","DataTexture3D","flatten","nBlocks","blockSize","firstElem","arrayCacheF32","arraysEqual","copyArray","allocTexUnits","arrayCacheI32","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","mat2array","setValueM3","uniformMatrix3fv","mat3array","setValueM4","uniformMatrix4fv","mat4array","setValueT1","unit","uniform1i","safeSetTexture2D","emptyTexture","setValueT2DArray1","setTexture2DArray","emptyTexture2dArray","setValueT3D1","setTexture3D","emptyTexture3d","setValueT6","safeSetTextureCube","emptyCubeTexture","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","getSingularSetter","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","units","setValueT6Array","getPureArraySetter","SingleUniform","activeInfo","PureArrayUniform","StructuredUniform","seq","addUniform","container","uniformObject","parseUniform","pathLength","RePathPart","lastIndex","matchEnd","idIsIndex","subscript","WebGLUniforms","getProgramParameter","getActiveUniform","getUniformLocation","WebGLShader","string","shader","createShader","shaderSource","compileShader","addLineNumbers","getEncodingComponents","sRGBEncoding","RGBEEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","GammaEncoding","LogLuvEncoding","Error","getShaderErrors","getShaderParameter","getShaderInfoLog","trim","source","getShaderSource","getTexelDecodingFunction","functionName","components","getTexelEncodingFunction","getToneMappingFunction","toneMappingName","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","ACESFilmicToneMapping","generateExtensions","chunks","extensionDerivatives","envMapCubeUV","bumpMap","tangentSpaceNormalMap","clearcoatNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filterEmptyLine","generateDefines","fetchAttributeLocations","getActiveAttrib","getAttribLocation","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","resolveIncludes","includePattern","includeReplacer","include","ShaderChunk","unrollLoops","unrollLoopPattern","loopReplacer","deprecatedUnrollLoopPattern","deprecatedLoopReplacer","end","snippet","generatePrecision","precisionstring","generateShadowMapTypeDefine","shadowMapTypeDefine","shadowMapType","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","generateEnvMapTypeDefine","envMapTypeDefine","envMapMode","CubeRefractionMapping","CubeUVRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","generateEnvMapModeDefine","envMapModeDefine","generateEnvMapBlendingDefine","envMapBlendingDefine","MixOperation","AddOperation","WebGLProgram","cacheKey","prefixVertex","prefixFragment","gammaFactorDefine","gammaFactor","customExtensions","customDefines","createProgram","isRawShaderMaterial","shaderName","instancing","supportsVertexTextures","maxBones","useFog","fogExp2","emissiveMap","normalMap","objectSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","displacementMap","roughnessMap","metalnessMap","vertexTangents","vertexUvs","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","sizeAttenuation","matcap","sheen","gradientMap","physicallyCorrectLights","NoToneMapping","outputEncoding","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","isShaderMaterial","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","prefix","detachShader","deleteShader","cachedUniforms","cachedAttributes","getAttributes","destroy","deleteProgram","programIdCount","usedTimes","WebGLPrograms","getShaderObject","shaderobject","UniformsUtils","allocateBones","skeleton","bones","nVertexUniforms","nVertexMatrices","getTextureEncodingFromMap","isWebGLRenderTarget","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getParameters","shadows","nClipPlanes","nClipIntersection","isMeshStandardMaterial","isSkinnedMesh","onBeforeCompile","normalMapType","ObjectSpaceNormalMap","TangentSpaceNormalMap","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","directionalShadowMap","pointShadowMap","spotShadowMap","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","pop","WebGLProperties","properties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItemsIndex","opaque","getNextRenderItem","group","renderItem","renderItems","defaultProgram","customOpaqueSort","customTransparentSort","finish","WebGLRenderLists","onSceneDispose","lists","cameras","UniformsCache","light","coneCos","penumbraCos","decay","skyColor","groundColor","halfWidth","halfHeight","ShadowUniformsCache","shadowBias","shadowRadius","shadowMapSize","shadowCameraNear","shadowCameraFar","shadowCastingLightsFirst","lightA","lightB","WebGLLights","setup","probe","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","intensity","shadow","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","multiplyScalar","setFromMatrixPosition","vector3","transformDirection","shadowUniforms","shadowCache","bias","mapSize","directionalShadow","directionalShadowMatrix","isSpotLight","angle","penumbra","spotShadow","spotShadowMatrix","isRectAreaLight","matrix42","identity","matrix4","premultiply","extractRotation","isPointLight","pointShadow","pointShadowMatrix","isHemisphereLight","normalize","ambient","nextVersion","WebGLRenderState","lightsArray","shadowsArray","pushLight","pushShadow","shadowLight","setupLights","WebGLRenderStates","renderStates","renderState","has","BasicDepthPacking","displacementScale","displacementBias","referencePosition","nearDistance","farDistance","WebGLShadowMap","_renderer","_objects","VSMPass","fullScreenMesh","shadowMaterialVertical","shadow_pass","resolution","mapPass","renderBufferDirect","shadowMaterialHorizonal","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","_depthMaterials","RGBADepthPacking","getDistanceMaterialVariant","_distanceMaterials","getDepthMaterial","result","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","keyA","keyB","materialsForVariant","_materialCache","cachedMaterial","isMeshDistanceMaterial","renderObject","shadowCamera","isMesh","isLine","isPoints","_frustum","intersectsObject","multiplyMatrices","kl","groupMaterial","depthMaterial","_shadowMapSize","_viewportSize","_viewport","0","1","2","SAMPLE_RATE","HALF_SAMPLE_RATE","vsm_vert","vsm_frag","HORIZONAL_PASS","fullScreenTri","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","NoBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","multiply","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","ColorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","equals","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","enable","disable","depthMask","setFunc","NeverDepth","AlwaysDepth","LessDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","clearDepth","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","createTexture","bindTexture","texParameteri","texImage2D","initAttributes","newAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enabledAttributes","enableVertexAttribArray","attributeDivisors","disableUnusedAttributes","disableVertexAttribArray","enabledCapabilities","useProgram","currentProgram","currentBlendingEnabled","CustomBlending","currentBlendEquation","currentBlendEquationAlpha","blendEquationSeparate","equationToGL","currentBlendSrc","currentBlendDst","currentBlendSrcAlpha","currentBlendDstAlpha","blendFuncSeparate","factorToGL","currentBlending","currentPremultipledAlpha","AdditiveBlending","blendFunc","SubtractiveBlending","MultiplyBlending","setMaterial","frontFaceCW","setFlipSided","colorBuffer","setPolygonOffset","currentFlipSided","frontFace","setCullFace","cullFace","CullFaceNone","currentCullFace","CullFaceBack","CullFaceFront","setLineWidth","currentLineWidth","lineWidthAvailable","lineWidth","factor","currentPolygonOffsetFactor","currentPolygonOffsetUnits","activeTexture","webglSlot","currentTextureSlot","webglType","webglTexture","boundTexture","currentBoundTextures","emptyTextures","unbindTexture","compressedTexImage2D","apply","texImage3D","currentScissor","currentViewport","maxVertexAttributes","glVersion","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","MIN_EXT","MAX_EXT","ZeroFactor","OneFactor","SrcColorFactor","SrcAlphaSaturateFactor","DstColorFactor","DstAlphaFactor","OneMinusSrcColorFactor","OneMinusDstColorFactor","OneMinusDstAlphaFactor","WebGLTextures","_gl","utils","createCanvas","useOffscreenCanvas","OffscreenCanvas","createElementNS","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","HTMLCanvasElement","ImageBitmap","floorPowerOfTwo","_canvas","isPowerOfTwo","textureNeedsPowerOfTwo","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","textureProperties","__maxMipLevel","LOG2E","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","NearestMipmapNearestFilter","NearestMipmapLinearFilter","onTextureDispose","deallocateTexture","isVideoTexture","_videoTextures","onRenderTargetDispose","deallocateRenderTarget","__webglInit","deleteTexture","__webglTexture","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","resetTextureUnits","textureUnits","textureUnit","setTexture2D","slot","updateVideoTexture","__version","uploadTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","isDataTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","mipmapImage","setTextureCubeDynamic","textureType","wrappingToGL","filterToGL","FloatType","HalfFloatType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","isDataTexture2DArray","isDataTexture3D","isDepthTexture","UnsignedIntType","UnsignedInt248Type","DepthFormat","UnsignedShortType","DepthStencilFormat","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","setupDepthTexture","isCube","webglDepthTexture","setupDepthRenderbuffer","createRenderbuffer","setupRenderTarget","isWebGLMultisampleRenderTarget","createFramebuffer","updateRenderTargetMipmap","updateMultisampleRenderTarget","blitFramebuffer","warnedTexture2D","warnedTextureCube","RepeatWrapping","MirroredRepeatWrapping","LinearMipmapNearestFilter","WebGLUtils","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","ByteType","ShortType","IntType","HALF_FLOAT_OES","AlphaFormat","LuminanceFormat","LuminanceAlphaFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1_Format","COMPRESSED_RGB_ETC1_WEBGL","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","RGBA_BPTC_Format","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","Group","WebXRManager","onSessionEvent","controller","inputSourcesMap","inputSource","targetRay","grip","onSessionEnd","setFramebuffer","animation","isPresenting","onRequestReferenceSpace","referenceSpace","updateInputSources","inputSources","controllers","removed","added","setProjectionFromUnion","cameraL","cameraR","cameraLPos","cameraRPos","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","decompose","translateX","translateZ","compose","getInverse","near2","far2","left2","right2","top2","bottom2","makePerspective","updateCamera","pose","getViewerPose","views","baseLayer","cameraVR","inputPose","gripPose","getPose","targetRaySpace","gripSpace","onAnimationFrameCallback","framebufferScaleFactor","referenceSpaceType","Map","_currentDepthNear","_currentDepthFar","getController","getControllerGrip","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","getContextAttributes","layerInit","XRWebGLLayer","updateRenderState","requestReferenceSpace","getCamera","depthNear","depthFar","getTargetPixelRatio","_currentRenderTarget","_pixelRatio","initGLContext","_currentScissor","_scissor","_currentViewport","morphtargets","programCache","renderLists","_premultipliedAlpha","bufferRenderer","indexedBufferRenderer","onContextLost","_isContextLost","onContextRestore","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReference","programInfo","renderObjectImmediate","renderBufferImmediate","setupVertexAttributes","isInstancedBufferGeometry","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","maxInstancedCount","vertexAttribPointer","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","projectObject","isGroup","isLOD","isLight","currentRenderState","isSprite","intersectsSprite","_vector3","_projScreenMatrix","currentRenderList","isImmediateRenderObject","renderObjects","isArrayCamera","_currentArrayCamera","jl","camera2","setProgram","_currentGeometryProgram","onAfterRender","initMaterial","materialProperties","lightsStateVersion","_clipping","programCacheKey","programChange","numSupportedMorphTargets","numSupportedMorphNormals","needsLights","materialNeedsLights","ambientLightColor","lightProbe","directionalLights","directionalLightShadows","spotLights","spotLightShadows","rectAreaLights","pointLights","pointLightShadows","hemisphereLights","progUniforms","uniformsList","seqWithValue","_clippingEnabled","_localClippingEnabled","_currentCamera","useCache","_currentMaterialId","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","LN2","isMeshPhongMaterial","isMeshToonMaterial","uCamPos","cameraPosition","isMeshLambertMaterial","isMeshBasicMaterial","isOrthographicCamera","setOptional","boneTexture","sqrt","ceilPowerOfTwo","boneMatrices","boneTextureSize","toneMappingExposure","toneMappingWhitePoint","markUniformsLightsNeedsUpdate","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","refreshUniformsToon","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshMatcapMaterial","refreshUniformsMatcap","isMeshDepthMaterial","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","ltc_1","UniformsLib","LTC_1","ltc_2","LTC_2","upload","diffuse","emissive","emissiveIntensity","maxMipLevel","uvScaleMap","uv2ScaleMap","uv2Transform","dashSize","totalSize","gapSize","_height","fogColor","isFog","fogNear","fogFar","fogDensity","density","specular","shininess","bumpScale","normalScale","negate","roughness","metalness","envMapIntensity","clearcoat","clearcoatRoughness","clearcoatNormalScale","transparency","_context","_alpha","_depth","_stencil","_antialias","_preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentFramebuffer","_currentScissorTest","_width","_opaqueSort","_transparentSort","_scissorTest","contextAttributes","xrCompatible","rangeMin","rangeMax","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","getSize","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","pixelRatio","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","uvArray","colorArray","tempScene","determinant","updateBuffers","rangeFactor","dataCount","rangeStart","rangeCount","groupStart","groupCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","compile","traverse","compiled","isCamera","setFromProjectionMatrix","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","restore","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","FogExp2","Fog","InterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","Sprite","_geometry","float32Array","transformVertex","vertexPosition","mvPosition","_alignedPosition","subVectors","addScalar","_rotatedPosition","_viewWorldMatrix","LOD","_currentLevel","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","Skeleton","boneInverses","calculateInverses","Bone","InstancedMesh","linecap","linejoin","Line","LineSegments","LineLoop","Points","testPoint","localThresholdSq","rayPointDistanceSq","_ray$2","distanceSqToPoint","intersectPoint","closestPointToPoint","distanceToRay","VideoTexture","CompressedTexture","DepthTexture","WireframeGeometry","o","ol","edge1","edge2","vertex","edge","edges","index1","index2","getX","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","EPS","pu","pv","sliceCount","crossVectors","PolyhedronGeometry","PolyhedronBufferGeometry","subdivide","getVertexByIndex","subdivideFace","cols","aj","lerp","bj","rows","pushVertex","applyRadius","vertexBuffer","generateUVs","azimuth","inclination","uvBuffer","correctUVs","correctSeam","x0","x1","x2","centroid","uvA","uvB","uvC","divideScalar","azi","correctUV","atan2","computeVertexNormals","normalizeNormals","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","generateBufferData","generateSegment","generateIndices","P","getPointAt","N","frames","B","computeFrenetFrames","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","calculatePositionOnCurve","cu","su","quOverP","P1","P2","T","addVectors","cx","cy","TorusGeometry","arc","TorusBufferGeometry","linkedList","dim","clockwise","last","signedArea","insertNode","removeNode","filterPoints","again","steiner","area","prev","earcutLinked","ear","minX","minY","invSize","pass","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","minZ","zOrder","maxZ","prevZ","nextZ","locallyInside","isValidDiagonal","splitPolygon","eliminateHoles","holeIndices","outerNode","len","queue","getLeftmost","compareX","eliminateHole","hole","findHoleBridge","hx","hy","qx","mx","my","tanMin","sortLinked","tail","numMerges","pSize","qSize","inSize","leftmost","ax","ay","bx","by","px","py","intersectsPolygon","middleInside","q1","q2","inside","a2","Node","b2","an","bp","removeDupEndPts","addContour","contour","ExtrudeGeometry","shapes","ExtrudeBufferGeometry","addShape","shape","scalePt2","pt","vec","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","EPSILON","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","sign","buildLidFaces","verticesArray","bevelEnabled","layer","vlen","flen","f3","steps","bevelSegments","addGroup","buildSideFaces","layeroffset","sidewalls","h","hl","holes","ahole","sl","slen1","slen2","f4","placeholder","addVertex","nextIndex","uvgen","generateTopUV","addUV","generateSideWallUV","vector2","curveSegments","bevelThickness","bevelSize","bevelOffset","extrudePath","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","ShapeUtils","isClockWise","triangulateShape","concat","bs","vert","contourMovements","oneHoleMovements","holesMovements","verticesMovements","toJSON","TextGeometry","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","LatheBufferGeometry","clamp","base","inverseSegments","n1","n2","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","toJSON$1","EdgesGeometry","thresholdAngle","geometry2","thresholdDot","DEG2RAD","computeFaceNormals","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","generateTorso","slope","indexRow","sinTheta","cosTheta","indexArray","generateCap","centerIndexStart","centerIndexEnd","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","RawShaderMaterial","STANDARD","PHYSICAL","TOON","MATCAP","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","times","interpolation","AnimationUtils","convertArray","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","tracks","resetDuration","getTrackTypeForValueTypeName","typeName","parseKeyframeTrack","trackType","flattenJSON","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","removeHandler","splice","getHandler","file","Loader","DefaultLoadingManager","crossOrigin","resourcePath","FileLoader","AnimationLoader","CompressedTextureLoader","DataTextureLoader","CubeTextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","t0","t1","c0","c1","c2","c3","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","t3","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","QuadraticBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezier","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","CurvePath","curves","autoClose","Path","currentPoint","setFromPoints","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","MaterialLoader","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","ObjectLoader","fetch","ShapePath","subPaths","currentPath","Font","createPaths","chars","from","String","line_height","yMax","yMin","underlineThickness","paths","offsetX","offsetY","char","ret","createPath","glyph","glyphs","familyName","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","lineTo","quadraticCurveTo","bezierCurveTo","ha","FontLoader","AudioLoader","SphericalHarmonics3","LightProbe","HemisphereLightProbe","color1","color2","sky","ground","AmbientLightProbe","StereoCamera","eyeSep","_cache","Clock","autoStart","startTime","oldTime","elapsedTime","running","AudioListener","AudioContext","gain","createGain","destination","timeDelta","_clock","Audio","listener","getInput","detune","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_pausedAt","filters","PositionalAudio","panner","createPanner","panningModel","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getOutput","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","inUse","bindingsPerObject","AnimationAction","mixer","clip","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","endingStart","ZeroCurvatureEnding","endingEnd","interpolant","createInterpolant","settings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","LoopRepeat","_loopCount","_startTime","timeScale","_effectiveTimeScale","weight","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedInterleavedBuffer","params","threshold","PointCloud","ascSort","intersectObject","recursive","raycast","Spherical","Cylindrical","Box2","Line3","ImmediateRenderObject","SpotLightHelper","positions","cone","getBoneList","boneList","isBone","SkeletonHelper","bone","PointLightHelper","sphereSize","HemisphereLightHelper","rotateY","GridHelper","divisions","halfSize","PolarGridHelper","radials","circles","DirectionalLightHelper","lightPlane","targetLine","CameraHelper","addLine","addPoint","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","_vector$b","unproject","setXYZ","BoxHelper","Box3Helper","box","computeBoundingSphere","PlaneHelper","hex","positions2","ArrowHelper","dir","headLength","headWidth","_lineGeometry","_coneGeometry","setDirection","setLength","AxesHelper","PMREMGenerator","_compileMaterial","_blurMaterial","_createPlanes","_lodPlanes","_sizeLods","_sigmas","lod","LOD_MAX","TOTAL_LODS","sizeLod","sigma","LOD_MIN","EXTRA_LOD_SIGMA","texelSize","uv1","cubeFaces","positionSize","uvSize","faceIndexSize","faceIndex","coordinates","fill","_allocateTargets","equirectangular","RGBEFormat","cubeUVRenderTarget","_createRenderTarget","_pingPongRenderTarget","_cleanup","outputTarget","_oldTarget","_sceneToCubeUV","cubeCamera","upSign","forwardSign","convertSRGBToLinear","maxComponent","fExp","log2","col","_setViewport","SIZE_MAX","_textureToCubeUV","_cubemapShader","_getCubemapShader","_equirectShader","_getEquirectShader","ENCODINGS","_flatCamera","tmpScene","_applyPMREM","poleAxis","_axisDirections","_blur","lodIn","lodOut","_halfBlur","targetIn","targetOut","sigmaRadians","STANDARD_DEVIATIONS","blurScene","blurUniforms","pixels","radiansPerPixel","isFinite","MAX_SAMPLES","sigmaPixels","weights","exp","outputSize","_getBlurShader","shaderMaterial","latitudinal","dTheta","mipInt","inputEncoding","_getCommonVertexShader","_getEncodings","Face4","MeshFaceMaterial","MultiMaterial","isMultiMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","DynamicBufferAttribute","setUsage","DynamicDrawUsage","Int8Attribute","Uint8Attribute","Uint8ClampedAttribute","Int16Attribute","Uint16Attribute","Int32Attribute","Uint32Attribute","Float32Attribute","Float64Attribute","ClosedSplineCurve3","SplineCurve3","Spline","AxisHelper","BoundingBoxHelper","EdgesHelper","WireframeHelper","XHRLoader","BinaryTextureLoader","WebGLRenderTargetCube","JSONLoader","LensFlare","Function","output","nextKey","hasOwnProperty","REVISION","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","TOUCH","DOLLY_PAN","DOLLY_ROTATE","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","FlatShading","SmoothShading","UVMapping","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","LoopOnce","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","ZeroStencilOp","ReplaceStencilOp","IncrementStencilOp","DecrementStencilOp","IncrementWrapStencilOp","DecrementWrapStencilOp","InvertStencilOp","NeverStencilFunc","LessStencilFunc","EqualStencilFunc","LessEqualStencilFunc","GreaterStencilFunc","NotEqualStencilFunc","GreaterEqualStencilFunc","StreamDrawUsage","StaticReadUsage","DynamicReadUsage","StreamReadUsage","StaticCopyUsage","DynamicCopyUsage","StreamCopyUsage","_listeners","listeners","hasEventListener","listenerArray","_lut","RAD2DEG","d0","d1","d2","d3","euclideanModulo","mapLinear","a1","b1","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","degrees","radians","setQuaternionFromProperEuler","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","setScalar","scalar","setX","setY","setComponent","getComponent","subScalar","divide","applyMatrix3","clampScalar","minVal","maxVal","clampLength","round","roundToZero","cross","lengthSq","manhattanLength","distanceToSquared","dx","dy","manhattanDistanceTo","lerpVectors","getY","rotateAround","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","throwOnDegenerate","t11","t12","t13","det","detInv","transpose","transposeIntoArray","setUvTransform","tx","ty","sx","sy","rotate","ImageUtils","getDataURL","ImageData","meta","isRootObject","metadata","generator","wrap","transformUv","setZ","setW","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","epsilon","epsilon2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","slerp","qa","qb","qm","slerpFlat","src0","srcOffset0","src1","srcOffset1","y0","z0","w0","y1","z1","w1","sqrSin","tDir","_onChangeCallback","isQuaternion","euler","isEuler","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","inverse","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_vector","_quaternion","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyNormalMatrix","qy","qz","qw","iz","iw","az","bz","projectOnVector","denominator","projectOnPlane","planeNormal","reflect","dz","setFromSpherical","setFromSphericalCoords","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixScale","setFromMatrixColumn","sz","_v1","_m1","_zero","_one","n14","n24","n34","n41","n42","n43","n44","makeBasis","scaleX","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","df","ac","ad","bc","bd","makeRotationFromQuaternion","eye","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","y2","z2","wx","wy","wz","invSX","invSY","invSZ","makeOrthographic","_matrix","_quaternion$1","RotationOrders","asin","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enableAll","disableAll","_v1$1","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","isObject3D","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateZ","translateOnAxis","translateY","localToWorld","worldToLocal","updateWorldMatrix","attach","getObjectById","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","force","updateParents","updateChildren","serialize","library","extractFromCache","uuids","isScene","_points","_vector$1","_box","_v0","_v1$2","_v2","_f0","_f1","_f2","_center","_extents","_triangleNormal","isBox3","setFromArray","maxX","maxY","setFromBufferAttribute","makeEmpty","expandByPoint","setFromCenterAndSize","expandByObject","isEmpty","getCenter","expandByVector","expandByScalar","computeBoundingBox","union","containsPoint","containsBox","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","intersectsTriangle","triangle","distanceToPoint","clampedPoint","getBoundingSphere","_box$1","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","_vector$2","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","at","recast","directionDistance","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","_vector1","_vector2","_normalMatrix","isPlane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","delta","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","setHex","setStyle","setHSL","handleAlpha","charAt","setColorName","copyGammaToLinear","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","lerpHSL","NAMES","isMaterial","newValue","currentValue","isRoot","srcPlanes","dstPlanes","_vector$3","isBufferAttribute","copyAt","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","morphTarget","morphNormal","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","getIndex","clearGroups","setDrawRange","tangent","direct","__directGeometry","lineDistance","fromDirectGeometry","morphAttributesPosition","isNaN","vA","vB","vC","cb","ab","merge","attribute1","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","newAttribute","morphArray","attributeData","hasMorphAttributes","attributeArray","_inverseMatrix","_ray","_sphere","morphTargetDictionary","ml","fvA","fvB","fvC","fl","faceMaterial","uvs_f","_m1$3","_obj$1","_offset$1","addFace","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","faceVertexUvs2","uvsCopy","mergeMesh","verticesMap","unique","changes","precisionPoints","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","uvs1","setBit","getNormalIndex","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","hasMaterial","hasFaceUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","srcVertexNormal","destVertexNormal","depthSegments","__proto__","buildPlane","udir","vdir","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","vertexCounter","numberOfVertices","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","clearViewOffset","skew","fromEquirectangularTexture","tEquirect","_sphere$1","_vector$5","frustum","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","sprite","negRadius","common","specularmap","envmap","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","envmap_physical_pars_fragment","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","basic","lambert","phong","standard","toon","dashed","equirect","distanceRGBA","physical","updateCache","isInterleavedBuffer","_vector$6","_intersectPoint","_worldScale","_mvPosition","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","_v1$4","_v2$2","addLevel","getCurrentLevel","getObjectForDistance","normalizeSkinWeights","skinWeight","_offsetMatrix","_identityMatrix","getBoneByName","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","getMatrixAt","raycastTimes","instanceId","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","computeLineDistances","positionAttribute","localThreshold","vStart","vEnd","interSegment","interRay","distSq","nbVertices","_start$1","_end$1","_inverseMatrix$2","_sphere$3","_position$1","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","triangulate","hasHoles","outerLen","pts","holeIndex","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","Geometries","freeze","Materials","arraySlice","to","isTypedArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","compareTime","sortedArray","nValues","srcOffset","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","track","getValueSize","minStartTime","shift","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","ValueTypeName","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","Cache","files","setCrossOrigin","setPath","setResourcePath","cached","dataUriRegex","dataUriRegexResult","isBase64","decodeURIComponent","atob","charCodeAt","parser","DOMParser","parseFromString","callbacks","withCredentials","overrideMimeType","header","requestHeader","setRequestHeader","setResponseType","setWithCredentials","setMimeType","loadTexture","texDatas","mipmapCount","isCubemap","texData","onImageLoad","onImageError","urls","isJPEG","getPoint","optionalTarget","getUtoTmapping","getPoints","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","isCatmullRomCurve3","intPoint","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","aCPx","aCPy","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","scaleW","scaleH","isDirectionalLightShadow","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","fromCharCode","escape","extractUrlBase","typedArray","TYPED_ARRAYS","bufferAttributeConstr","bufferAttribute","drawcalls","offsets","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","bufferGeometryLoader","details","geometryShapes","loadImage","currentUrl","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","res","imageBitmap","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","webkitAudioContext","bufferCopy","decodeAudioData","audioBuffer","isSphericalHarmonics3","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","performance","getElapsedTime","getDelta","newTime","_position$2","_quaternion$3","_scale$1","_orientation","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","_RESERVED_CHARS_RE","_reservedRe","RegExp","_wordChar","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","coords","other","makeSafe","setFromCartesianCoords","_vector$7","_startP","_startEnd","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","_vector$8","coneLength","coneWidth","_vector$9","_boneMatrix","_matrixWorldInv","isSkeletonHelper","_vector$a","_color1","_color2","_v1$5","_v2$3","_v3$1","_camera","_box$3","_axis","setColor","ref","PHI","INV_PHI","fromScene","fromEquirectangular","fromCubemap","cubemap","compileCubemapShader","compileEquirectangularShader","LineStrip","LinePieces","NoColors","FaceColors","VertexColors","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","setTexturePath","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","applyMatrix","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","linePrecision","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","clearTarget","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","renderReverseSided","renderSingleSided","audioLoader","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","CubeGeometry","SpriteCanvasMaterial","isSpriteCanvasMaterial","calculateLights","_ambientLight","_directionalLights","_pointLights","ll","_lights","lightColor","calculateLight","_lightColor","lightPosition","renderSprite","setOpacity","_canvasWidthHalf","_canvasHeightHalf","dist","_elemBox","_patterns","textureToPattern","setFillStyle","ox","oy","fillRect","setStrokeStyle","renderLine","beginPath","positionScreen","setLineCap","setLineJoin","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","setLineDash","stroke","renderFace3","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","drawTriangle","_diffuseColor","_emissiveColor","_color","_centroid","positionWorld","normalModel","strokePath","fillPath","_uvs","patternPath","vertexNormalsModel","_normalViewMatrix","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","repeatX","repeatY","mirrorX","mirrorY","setTransform","createPattern","u0","u1","u2","idet","expand","_contextGlobalAlpha","globalAlpha","_contextGlobalCompositeOperation","globalCompositeOperation","_contextLineWidth","_contextLineCap","lineCap","_contextLineJoin","lineJoin","_contextStrokeStyle","strokeStyle","_contextFillStyle","fillStyle","_contextLineDash","_renderData","_elements","_projector","Projector","_canvasWidth","_canvasHeight","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_clearColor","_clearAlpha","_clipBox","_clearBox","sortElements","setClearColorHex","clearRect","projectScene","el","RenderableSprite","RenderableLine","RenderableFace","pointerEvents","Element","CSS3DSprite","getCameraCSSMatrix","getObjectCSSMatrix","cameraCSSMatrix","matrix3d","isIE","_widthHalf","_heightHalf","cachedObject","WebkitTransform","objectData","distanceToCameraSquared","getDistanceToSquared","cameraElement","filterAndFlatten","sorted","distanceA","distanceB","zMax","zIndex","overflow","WebkitTransformStyle","object1","object2","WebkitPerspective","perspective","deviceOrientation","screenOrientation","alphaOffset","onDeviceOrientationChangeEvent","onScreenOrientationChangeEvent","setObjectQuaternion","zee","q0","beta","gamma","orient","DeviceOrientationEvent","requestPermission","device","RenderableObject","RenderableVertex","vertexNormalsLength","addObject","_object","getNextObjectInPool","_viewProjectionMatrix","pushPoint","_vector4","invW","_sprite","getNextSpriteInPool","_objectCount","_objectPoolLength","_objectPool","getNextVertexInPool","_vertexCount","_vertexPoolLength","_vertexPool","getNextFaceInPool","_faceCount","_facePoolLength","_facePool","getNextLineInPool","_lineCount","_linePoolLength","_linePool","_spriteCount","_spritePoolLength","_spritePool","painterSort","clipLine","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","_vertex","_face","_line","_modelMatrix","_boundingBox","_points3","_viewMatrix","_modelViewProjectionMatrix","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","unprojectVector","pickingRay","RenderList","setObject","projectVertex","pushNormal","pushColor","pushUv","checkTriangleVisibility","checkBackfaceCulling","pushLine","pushTriangle","tl","targetVertex","nl","isObject","writable","genId","checkInstance","rand"],"mappings":"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","file":"tour-player.js","sourcesContent":["var BrouserInfo;\n\nBrouserInfo = function() {\n\n    var screenSize = screen ? screen.width + ' x ' + screen.height : '';\n\n    var isSupportedCanvas = function() {\n        var canvas = document.createElement('canvas');\n        return !!(canvas.getContext && canvas.getContext('2d'));\n    };\n\n    var isSupportedTransformWebGL = function() {\n        try {\n            var canvas = document.createElement('canvas');\n            return !!window.WebGLRenderingContext &&\n            !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n        } catch (e) {\n            return false;\n        }\n    };\n\n    var isSupportedTransformCSS = function() {\n        var propertys = {\n            'webkitTransformStyle': '-webkit-transform-style',\n            'MozTransformStyle': '-moz-transform-style',\n            'msTransformStyle': '-ms-transform-style',\n            'transformStyle': 'transform-style'\n        };\n\n        var element = document.createElement('p');\n        document.body.insertBefore(element, null);\n\n        for (var k in propertys) {\n            if (element.style[k] !== undefined) {\n                element.style[k] = 'preserve-3d';\n            }\n        }\n\n        var st = window.getComputedStyle(element, null);\n        var transform;\n\n        for (var n in propertys) {\n            transform = st.getPropertyValue(propertys[n]) || transform;\n        }\n\n        document.body.removeChild(element);\n        return transform == 'preserve-3d';\n    };\n\n    var detectOS = function() {\n        var name = '-';\n        var version  = '-';\n\n        var clientStrings = [\n        {s: 'Windows 3.11',        r: /Win16/},\n        {s: 'Windows 95',          r: /(Windows 95|Win95|Windows_95)/},\n        {s: 'Windows ME',          r: /(Win 9x 4.90|Windows ME)/},\n        {s: 'Windows 98',          r: /(Windows 98|Win98)/},\n        {s: 'Windows CE',          r: /Windows CE/},\n        {s: 'Windows 2000',        r: /(Windows NT 5.0|Windows 2000)/},\n        {s: 'Windows XP',          r: /(Windows NT 5.1|Windows XP)/},\n        {s: 'Windows Server 2003', r: /Windows NT 5.2/},\n        {s: 'Windows Vista',       r: /Windows NT 6.0/},\n        {s: 'Windows 7',           r: /(Windows 7|Windows NT 6.1)/},\n        {s: 'Windows 8.1',         r: /(Windows 8.1|Windows NT 6.3)/},\n        {s: 'Windows 8',           r: /(Windows 8|Windows NT 6.2)/},\n        {s: 'Windows NT 4.0',      r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/},\n        {s: 'Windows ME',          r: /Windows ME/},\n        {s: 'Android',             r: /Android/},\n        {s: 'Open BSD',            r: /OpenBSD/},\n        {s: 'Sun OS',              r: /SunOS/},\n        {s: 'Linux',               r: /(Linux|X11)/},\n        {s: 'iOS',                 r: /(iPhone|iPad|iPod)/},\n        {s: 'Mac OS X',            r: /Mac OS X/},\n        {s: 'Mac OS',              r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/},\n        {s: 'QNX',                 r: /QNX/},\n        {s: 'UNIX',                r: /UNIX/},\n        {s: 'BeOS',                r: /BeOS/},\n        {s: 'OS/2',                r: /OS\\/2/},\n        {s: 'Search Bot',          r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\\/Teoma|ia_archiver)/}\n        ];\n\n        for (var id in clientStrings) {\n            var cs = clientStrings[id];\n            if (cs.r.test(navigator.userAgent)) {\n                name = cs.s;\n                break;\n            }\n        }\n\n        if (/Windows/.test(name)) {\n            version = /Windows (.*)/.exec(name)[1];\n            name = 'Windows';\n        }\n\n        switch (name) {\n            case 'Mac OS X': version = /Mac OS X (10[\\.\\_\\d]+)/.exec(navigator.userAgent)[1]; break;\n            case 'Android':  version = /Android ([\\.\\_\\d]+)/.exec(navigator.userAgent)[1]; break;\n            case 'iOS':      version = /OS (\\d+)_(\\d+)_?(\\d+)?/.exec(navigator.appVersion);\n                version = version[1] + '.' + version[2] + '.' + (version[3] | 0); break;\n        }\n\n        return {name: name, version: version};\n    };\n\n    var detectBrouser = function() {\n        //browser\n        var nAgt = navigator.userAgent;\n        var name = navigator.appName;\n        var version = parseFloat(navigator.appVersion);\n        var nameOffset;\n        var verOffset;\n        var ix;\n\n        // Opera\n        if ((verOffset = nAgt.indexOf('Opera')) != -1) {\n            name = 'Opera';\n            version = nAgt.substring(verOffset + 6);\n            if ((verOffset = nAgt.indexOf('Version')) != -1) {\n                version = nAgt.substring(verOffset + 8);\n            }\n        }\n        // MSIE\n        else if ((verOffset = nAgt.indexOf('MSIE')) != -1) {\n            name = 'Microsoft Internet Explorer';\n            version = nAgt.substring(verOffset + 5);\n        }\n        // Chrome\n        else if ((verOffset = nAgt.indexOf('Chrome')) != -1) {\n            name = 'Chrome';\n            version = nAgt.substring(verOffset + 7);\n        }\n        // Safari\n        else if ((verOffset = nAgt.indexOf('Safari')) != -1) {\n            name = 'Safari';\n            version = nAgt.substring(verOffset + 7);\n            if ((verOffset = nAgt.indexOf('Version')) != -1) {\n                version = nAgt.substring(verOffset + 8);\n            }\n        }\n        // Firefox\n        else if ((verOffset = nAgt.indexOf('Firefox')) != -1) {\n            name = 'Firefox';\n            version = nAgt.substring(verOffset + 8);\n        }\n        // MSIE 11+\n        else if (nAgt.indexOf('Trident/') != -1) {\n            name = 'Microsoft Internet Explorer';\n            version = nAgt.substring(nAgt.indexOf('rv:') + 3);\n        }\n        // Другие браузеры\n        else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {\n            name = nAgt.substring(nameOffset, verOffset);\n            version = nAgt.substring(verOffset + 1);\n            if (name.toLowerCase() == name.toUpperCase()) {\n                name = navigator.appName;\n            }\n        }\n        // Обрезает строку версии\n        if ((ix = version.indexOf(';')) != -1) {version = version.substring(0, ix);}\n        if ((ix = version.indexOf(' ')) != -1) {version = version.substring(0, ix);}\n        if ((ix = version.indexOf(')')) != -1) {version = version.substring(0, ix);}\n\n        return {name: name, version: version};\n    };\n\n    var detectApple = function() {\n        return !!~['iOS','Mac OS X','iOS'].indexOf(detectOS().name);\n    };\n\n    var detectMobile = function() {\n        return /Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(navigator.appVersion);\n    };\n\n    var detectProtocol = function() {\n        return location.protocol != 'file:';\n    };\n\n    BrouserInfo = {\n        screenSize: screenSize,\n        canvas: isSupportedCanvas(),\n        webgl: isSupportedTransformWebGL(),\n        css: isSupportedTransformCSS(),\n        os: detectOS(),\n        brouser: detectBrouser(),\n        mobile: detectMobile(),\n        apple: detectApple(),\n        array: !!window.Float32Array,\n        protocol: detectProtocol\n    };\n};\n","var Lang = {};\n\n/**\n * Язык по умолчанию, он будет выбран,\n * если в словаре нет нужного языка.\n *\n * @type {String}\n */\nLang.default = 'en';\n\n/**\n * Устанавливает язык на тот, что указан в первом параметре,\n * или из тега <html lang>,\n * или navigator.language\n * или navigator.userLanguage (EI)\n * или на русский \"ru\"\n *\n * @param {String} language ISO 639-1 Код языка\n * @param {String} dictionary Словарь фраз на нескольких языхах\n * @return {String} Возвращает ISO 639-1 код установленного языка\n */\nLang.set = function(language, dictionary) {\n    this.language = (\n        language                      ||\n        document.documentElement.lang ||\n        navigator.language            ||\n        navigator.userLanguage        ||\n        this.default\n    ).split('-')[0];\n\n    if (dictionary) {\n        this.dictionary = dictionary;\n    }\n\n    return this.language;\n};\n\n/**\n * Преобразует Языковой объект во вразу установленного языка.\n * Если фразы нужного языка нет, то возвращает враузу языка по умолчанию.\n * Если передан не объект, то возвращает его без преобразований.\n *\n * @param  {Object} value Языковой объект\n *                        или строка\n * @return {String}       Фразу установленного языка\n */\nLang.translate = function(value) {\n    if (typeof value === 'object') {\n        return value[this.language] || value[this.default];\n    } else {\n        return value;\n    }\n};\n\n/**\n * Возвращает фразу по ключу из словаря\n *\n * @param  {String} key Ключ фразы в словаре\n * @return {String}     Фраза из словаря\n */\nLang.get = function(key) {\n    if (this.dictionary[key]) {\n        return this.translate(this.dictionary[key]);\n    } else {\n        return '[' + key + ']';\n    }\n};\n","/* exported Tools */\n\nvar Tools = {};\n","var Tour = {};\n\n// Версия плеера\nTour.version = [2, 2, 4];\n","/* exported UI */\n\nvar UI = {};\n","/* globals UI */\n\nUI.controlPanel = {};\n\nUI.controlPanel.init = function(visibility) {\n    this.progressValue = document.createElement('div');\n    this.progressValue.className = 'value';\n\n    this.progressBar = document.createElement('div');\n    this.progressBar.className = 'progress-bar';\n    this.progressBar.appendChild(this.progressValue);\n\n    this.btnList = document.createElement('div');\n    this.btnList.className = 'btn-list';\n\n    this.panel = document.createElement('div');\n    this.panel.className = 'panel';\n\n    this.panel.appendChild(this.btnList);\n    this.panel.appendChild(this.progressBar);\n\n    this.domElement = document.createElement('div');\n    this.domElement.id = 'control-panel';\n    this.domElement.appendChild(this.panel);\n\n    this.setProgress(0);\n    this.setVisible(visibility);\n\n    document.body.appendChild(this.domElement);\n};\n\nUI.controlPanel.setVisible = function(visibility) {\n    this.visibility = visibility || false;\n    this.domElement.classList[visibility ? 'add' : 'remove']('visible');\n};\n\nUI.controlPanel.addBtn = function(className, callback, title) {\n    var btn = document.createElement('div');\n    btn.classList.add('marker');\n    btn.classList.add(className);\n    btn.addEventListener('click', callback, false);\n    btn.title = title || '';\n    this.btnList.appendChild(btn);\n};\n\nUI.controlPanel.setProgress = function(value) {\n    document.body.classList[value < 1 ? 'add' : 'remove']('load');\n\n    if (this.progressBar) {\n        this.progressBar.classList[value >= 1 ? 'add' : 'remove']('hidden');\n        this.progressValue.style.width = Math.min(value, 1) * 100 + '%';\n    }\n};\n\nUI.controlPanel.setOrientation = function(value) {\n    var deg = value - 45;\n\n    var orientation = '';\n    if (deg < 0   && deg >  -90) {orientation = 'portrait-primary';\n    } else if (deg > 90  && deg <  180) {orientation = 'portrait-secondary';\n    } else if (deg < -90 && deg > -180) {orientation = 'landscape-primary';\n    } else if (deg > 0   && deg <   90) {orientation = 'landscape-secondary';}\n    if (this.domElement) {\n        this.domElement.setAttribute('data-orientation', orientation);\n    }\n};\n","/* globals UI */\r\n\r\nUI.controlPanelBig = {};\r\n\r\nUI.controlPanelBig.init = function(visibility) {\r\n    this.progressValue = document.createElement('div');\r\n    this.progressValue.className = 'value';\r\n\r\n    this.progressBar = document.createElement('div');\r\n    this.progressBar.className = 'progress-bar';\r\n    this.progressBar.appendChild(this.progressValue);\r\n\r\n    this.btnList = document.createElement('div');\r\n    this.btnList.className = 'btn-list';\r\n\r\n    this.panel = document.createElement('div');\r\n    this.panel.className = 'panel';\r\n\r\n    this.panel.appendChild(this.btnList);\r\n    this.panel.appendChild(this.progressBar);\r\n\r\n    this.domElement = document.createElement('div');\r\n    this.domElement.id = 'control-panel-lg';\r\n    this.domElement.appendChild(this.panel);\r\n\r\n    this.setProgress(0);\r\n    this.setVisible(visibility);\r\n\r\n    document.body.appendChild(this.domElement);\r\n};\r\n\r\nUI.controlPanelBig.setVisible = function(visibility) {\r\n    this.visibility = visibility || false;\r\n    this.domElement.classList[visibility ? 'add' : 'remove']('visible');\r\n};\r\n\r\nUI.controlPanelBig.addBtn = function(className, callback, title) {\r\n    var btn = document.createElement('div');\r\n    btn.classList.add('marker');\r\n    btn.classList.add(className);\r\n    btn.addEventListener('click', callback, false);\r\n    btn.title = title || '';\r\n    this.btnList.appendChild(btn);\r\n};\r\n\r\nUI.controlPanelBig.setProgress = function(value) {\r\n    document.body.classList[value < 1 ? 'add' : 'remove']('load');\r\n\r\n    if (this.progressBar) {\r\n        this.progressBar.classList[value >= 1 ? 'add' : 'remove']('hidden');\r\n        this.progressValue.style.width = Math.min(value, 1) * 100 + '%';\r\n    }\r\n};\r\n\r\nUI.controlPanelBig.setOrientation = function(value) {\r\n    var deg = value - 45;\r\n\r\n    var orientation = '';\r\n    if (deg < 0   && deg >  -90) {orientation = 'portrait-primary';\r\n    } else if (deg > 90  && deg <  180) {orientation = 'portrait-secondary';\r\n    } else if (deg < -90 && deg > -180) {orientation = 'landscape-primary';\r\n    } else if (deg > 0   && deg <   90) {orientation = 'landscape-secondary';}\r\n    if (this.domElement) {\r\n        this.domElement.setAttribute('data-orientation', orientation);\r\n    }\r\n};\r\n","UI.devCursor = {};\nUI.devCursor.init = function(set) {\n    if (set) {\n        var cursor = document.createElement('div');\n        cursor.classList.add('dev-cursor');\n        document.body.appendChild(cursor);\n    }\n};\n","/* globals UI */\n\nUI.gallery = {\n    borderHoverSize: 5,\n    init: function(visible) {\n        this.visible = visible;\n        this.domElement = document.createElement('div');\n        this.domElement.id = 'gallery';\n        this.ul = document.createElement('ul');\n        this.toggler = document.createElement('div');\n        this.toggler.classList.add('gallery-toggler');\n        this.toggler.addEventListener('click', this.toggle.bind(this));\n        this.domElement.appendChild(this.toggler);\n        this.domElement.appendChild(this.ul);\n        document.body.appendChild(this.domElement);\n\n        this.items = {};\n\n        this.display(visible);\n    },\n    toggle: function() {\n        this.display(!this.visible);\n    },\n    display: function(visible) {\n        this.visible = visible;\n        if (visible) {\n            this.onOpen && this.onOpen();\n        } else {\n            this.onClose && this.onClose();\n        }\n        this.toggler.title = visible ?  Lang.get('gallery.hide') : Lang.get('gallery.show');\n        this.domElement.classList[visible ? 'add' : 'remove']('visible');\n    },\n    addItem: function(options) {\n        this.item = document.createElement('li');\n        this.item.onclick = options.onclick;\n        this.item.style.backgroundImage = 'url(' + options.image + ')';\n        this.items[options.id] = this.item;\n        if (options.title) {\n            this.titleElem = document.createElement('div');\n            this.titleElem.classList.add('item-title');\n            this.titleElem.innerText = options.title;\n            this.titleElem.title = options.title;\n            this.item.appendChild(this.titleElem);\n        }\n\n        this.ul.appendChild(this.item);\n    },\n\n    setActive: function(id) {\n        for (var k in this.items) {\n            this.items[k].classList.remove('active');\n        }\n\n        if (this.items[id] && document.body.getBoundingClientRect) {\n            this.items[id].classList.add('active');\n\n            var itemRect = this.items[id].getBoundingClientRect();\n            var ulRect = this.ul.getBoundingClientRect();\n\n            if ((ulRect.height - itemRect.top) < 0 || (itemRect.top + itemRect.height) < 0) {\n                var y = this.ul.scrollTop + this.items[id].getBoundingClientRect().y - this.borderHoverSize;\n                this.ul.scrollTop = y;\n            }\n        }\n    }\n};\n","/* globals UI */\n\nUI.Marker = function(action, icon, title, sound) {\n    var markersContayner = document.getElementById('markers');\n    if (!markersContayner) {\n        markersContayner = document.createElement('div');\n        markersContayner.id = 'markers';\n        document.body.appendChild(markersContayner);\n    }\n\n    this.buttonDomElement = document.createElement('div');\n    this.buttonDomElement.classList.add('button');\n    this.buttonDomElement.addEventListener('click', action);\n\n    this.domElement = document.createElement('div');\n    this.domElement.classList.add('marker');\n    this.domElement.appendChild(this.buttonDomElement);\n    this.domElement.addEventListener('mouseover', this.setTitlePosition.bind(this));\n    this.visible = true;\n\n    markersContayner.appendChild(this.domElement);\n    this.size = this.domElement.clientWidth;\n\n    if (icon) {\n        this.setIcon(icon);\n    }\n    if (title) {\n        this.setTitle(title);\n    }\n    if (sound) {\n        this.setSound(sound);\n    }\n\n    this.setPosition();\n};\n\nUI.Marker.prototype.setTitle = function(content) {\n    if (content) {\n        var span;\n        if (!this.title) {\n            span = document.createElement('span');\n            span.innerHTML = content;\n            var title = document.createElement('div');\n            title.classList.add('title');\n            title.appendChild(span);\n            this.domElement.appendChild(title);\n            this.titleDomElement = title;\n        }\n        span = this.titleDomElement.children[0];\n        span.innerHTML = content;\n        this.titleDomElement.style.width = 'max-content';\n        var newWidth = this.titleDomElement.clientWidth + 1;\n        this.titleDomElement.style.width = newWidth + 'px';\n        this.titleDomElement.style.marginLeft = -(newWidth / 2 - this.size / 2) + 'px';\n        this.title = content;\n    } else {\n        return false;\n    }\n};\n\nUI.Marker.prototype.setPosition = function(x, y, r) {\n    this.x = x;\n    this.y = y;\n    if (this.x && this.y &&\n        this.x > -this.size && this.y > -this.size &&\n        this.x < window.innerWidth + this.size &&\n        this.y < window.innerHeight + this.size) {\n        this.domElement.style.transform = 'translate(' + this.x + 'px,' + this.y + 'px) ' +\n            'rotate(' + r + 'deg)';\n        this.setVisible(true);\n    } else {\n        this.setVisible(false);\n    }\n\n};\n\nUI.Marker.prototype.setTitlePosition = function() {\n    var offset = 100;\n    if (this.title) {\n        var direction = 'bottom';\n        if (this.x > window.innerWidth - offset)         {direction = 'left';\n        } else if (this.x < offset)                      {direction = 'right';\n        } else if (this.y > window.innerHeight - offset) {direction = 'top';}\n\n        if (direction == 'top' || direction == 'bottom') {\n            this.titleDomElement.style.marginTop = '';\n            this.titleDomElement.style.marginLeft = -(this.titleDomElement.clientWidth / 2 - this.size / 2) + 'px';\n        } else {\n            this.titleDomElement.style.marginLeft = '';\n            this.titleDomElement.style.marginTop =\n            -(this.titleDomElement.children[0].clientHeight / 2 - this.size / 2) + 'px';\n        }\n        this.titleDomElement.className = 'title ' + direction;\n    }\n};\n\nUI.Marker.prototype.setVisible = function(type) {\n    if (this.visible != type) {\n        this.domElement.style.visibility = type ? 'visible' : 'hidden';\n        this.visible = type;\n    }\n};\n\nUI.Marker.prototype.setIcon = function(name) {\n    if (name) {\n        this.icon = name;\n        this.buttonDomElement.className = 'button';\n        this.buttonDomElement.classList.add(name);\n    }\n};\n\nUI.Marker.prototype.setSound = function(name) {\n    if (name) {\n        this.sound = name;\n    }\n};\n\nUI.Marker.prototype.remove = function() {\n    this.domElement.parentNode.removeChild(this.domElement);\n};\n\n","/* globals UI */\n\nUI.mouseMenu = {};\n\nUI.mouseMenu.init = function() {\n    this.domElement = document.createElement('div');\n    this.domElement.id = 'mouse-menu';\n    this.domElement.addEventListener('selectstart', function() {\n        event.preventDefault();\n    });\n    document.body.appendChild(this.domElement);\n\n    document.addEventListener('contextmenu', function(event) {\n        event.preventDefault();\n        UI.mouseMenu.open(event);\n    });\n\n    this.domElement.addEventListener('mousedown', function(event) {\n        event.stopPropagation();\n    });\n\n    document.addEventListener('mousedown', function() {\n        this.close();\n    }.bind(this));\n\n    window.addEventListener('blur', function() {\n        this.close();\n    }.bind(this));\n};\n\nUI.mouseMenu.setPosition = function(x, y) {\n    this.domElement.style.left = x + 'px';\n    this.domElement.style.top = y + 'px';\n};\n\nUI.mouseMenu.open = function(event) {\n    this.domElement.classList.add('visible');\n    if (event) {\n        var margin = 5;\n        var x = event.clientX;\n        var y = event.clientY + margin;\n        var height = UI.mouseMenu.domElement.clientHeight;\n        var width  = UI.mouseMenu.domElement.clientWidth;\n\n        if (event.clientX + width > window.innerWidth) {\n            x = Math.max(0, event.clientX - width);\n        }\n\n        if (event.clientY + height > window.innerHeight) {\n            y = Math.max(0, event.clientY - height + margin);\n        }\n\n        this.setPosition(x, y);\n    }\n};\n\nUI.mouseMenu.close = function() {\n    this.domElement.classList.remove('visible');\n};\n\nUI.mouseMenu.Item = function(action, title, key) {\n    this.titleElement = document.createElement('span');\n    this.titleElement.classList.add('title');\n    this.titleElement.textContent = title;\n    this.action = action;\n\n    this.keyElement = document.createElement('span');\n    this.keyElement.classList.add('key');\n    this.keyElement.textContent = key || '';\n\n    this.domElement = document.createElement('div');\n    this.domElement.classList.add('item');\n    this.disabled = false;\n\n    this.domElement.appendChild(this.titleElement);\n    this.domElement.appendChild(this.keyElement);\n\n    var onselect = function(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        if (!this.disabled && this.action) {\n            this.action();\n            UI.mouseMenu.close();\n        }\n    };\n\n    this.domElement.addEventListener('click', onselect.bind(this));\n    this.domElement.addEventListener('contextmenu', onselect.bind(this));\n    UI.mouseMenu.domElement.appendChild(this.domElement);\n};\n\nUI.mouseMenu.Item.prototype.setDisable = function(type) {\n    this.disabled = type;\n    this.domElement.classList[type ? 'add' : 'remove']('disabled');\n};\n\nUI.mouseMenu.Item.prototype.setVisible = function(type) {\n    this.visible = type;\n    this.domElement.classList[type ? 'remove' : 'add']('hidden');\n};\n\nUI.mouseMenu.Item.prototype.setText = function(title, key) {\n    if (title) {\n        this.titleElement.textContent = title;\n    }\n    if (key) {\n        this.keyElement.textContent = key;\n    }\n};\n\nUI.mouseMenu.Hr = function() {\n    this.domElement = document.createElement('hr');\n    UI.mouseMenu.domElement.appendChild(this.domElement);\n};\n\n","/* globals UI */\n\nUI.notification = {\n    init: function() {\n        this.domElement = document.createElement('div');\n        this.domElement.id = 'notification';\n\n        this.textDomElement = document.createElement('span');\n\n        this.domElement.appendChild(this.textDomElement);\n        document.body.appendChild(this.domElement);\n        this.setVisible(false);\n    },\n    setVisible: function(type) {\n        if (type) {\n            this.domElement.classList.add('visible');\n            this.domElement.classList.remove('hidden');\n        } else {\n            this.setTimeout && clearTimeout(this.setTimeout);\n            this.domElement.classList.remove('visible');\n            this.setTimeout = setTimeout(function() {\n                this.domElement.classList.add('hidden');\n            }.bind(this), 300); // 300 - Длительность анимации скрытия уведомления\n        }\n    },\n    setText: function(text) {\n        this.textDomElement.textContent = text;\n    },\n    show: function(text, duration) {\n        this.setText(text);\n        this.setVisible(true);\n        if (this.setTimeout) {\n            clearTimeout(this.setTimeout);\n        }\n        if (duration !== false) {\n            this.setTimeout = setTimeout(function() {\n                this.setVisible(false);\n            }.bind(this), duration || 2000);\n        }\n    }\n};\n","/* globals UI */\n\nUI.popUp = {\n    init: function() {\n        console.log('init popup')\n        this.domElement = document.querySelector('.popup-layout');\n        if (this.domElement) {\n            this.domElement.addEventListener('click', function(event) {\n                if (event.target == this.domElement) {\n                    this.set();\n                }\n            }.bind(this));\n            this.closeElement = document.querySelector('.popup-layout .close');\n            this.closeElement.addEventListener('click', this.set.bind(this, false));\n            window.addEventListener('hashchange', this.popstate.bind(this));\n            this.popstate();\n        }\n    },\n    set: function(id) {\n        var canAccessIFrame = !!~Object.keys(window.parent.location).indexOf('host');\n        if (canAccessIFrame) {\n            var scrollY = window.parent.scrollY;\n            var scrollX = window.parent.scrollX;\n        }\n\n        window.location.hash = id || '';\n\n        if (canAccessIFrame) {\n            setTimeout(function() {\n                window.parent.scrollTo(scrollX, scrollY);\n            }, 0);\n        }\n\n        setTimeout(function() {\n            window.scroll(0,0);\n        }, 0); // issues #226\n    },\n\n    popstate: function() {\n        var hash = window.location.hash.length > 1;\n        this.domElement.classList[hash ? 'add' : 'remove']('visible');\n    }\n};\n\n","\r\nUI.popUpLg = {\r\n   init: function() {\r\n\r\n       this.domElement = document.querySelector('.popup-layout-lg');\r\n       if (this.domElement) {\r\n           this.domElement.addEventListener('click', function(event) {\r\n               if (event.target == this.domElement) {\r\n                   this.set();\r\n               }\r\n           }.bind(this));\r\n           this.closeElement = document.querySelector('.popup-layout-lg .close');\r\n           this.closeElement.addEventListener('click', this.set.bind(this, false));\r\n           window.addEventListener('hashchange', this.popstate.bind(this));\r\n           this.popstate();\r\n       }\r\n   },\r\n   set: function(id) {\r\n       var canAccessIFrame = !!~Object.keys(window.parent.location).indexOf('host');\r\n       if (canAccessIFrame) {\r\n           var scrollY = window.parent.scrollY;\r\n           var scrollX = window.parent.scrollX;\r\n       }\r\n\r\n       window.location.hash = id || '';\r\n\r\n       if (canAccessIFrame) {\r\n           setTimeout(function() {\r\n               window.parent.scrollTo(scrollX, scrollY);\r\n           }, 0);\r\n       }\r\n\r\n   },\r\n\r\n   popstate: function() {\r\n       var hash = window.location.hash.length > 1;\r\n       this.domElement.classList[hash ? 'add' : 'remove']('visible');\r\n   }\r\n};\r\n","/* globals UI */\n\nUI.Slider = function(domElement) {\n\n    this.frame = 0;\n    this.domElement = domElement;\n    this.popupId = this.domElement.parentNode.id;\n    this.images = this.domElement.getElementsByTagName('img');\n    this.length = this.images.length;\n\n    this.tape = document.createElement('div');\n    this.tape.className = 'tape';\n\n    while (this.images.length) {\n        this.tape.appendChild(this.images[0]);\n    }\n    this.images = this.tape.getElementsByTagName('img');\n\n    this.prevButton = new this.SliderButton(this, 'prev');\n    this.nextButton = new this.SliderButton(this, 'next');\n\n    if (Tour.options.sliderBullets) {\n        this.bulletsElement = document.createElement('div');\n        this.bulletsElement.classList.add('bullets');\n        this.domElement.appendChild(this.bulletsElement);\n\n        for (var i = 0; i < this.images.length; i++) {\n            var bullet = document.createElement('div');\n            bullet.classList.add('bullet');\n            bullet.addEventListener('click', function(i) {\n                this.setPosition(i, true);\n            }.bind(this, i), false);\n            this.bulletsElement.appendChild(bullet);\n        }\n\n        if (Tour.options.sliderAutoNextFrameInterval) {\n            this.autoNextInterval = setInterval(this.next.bind(this), Tour.options.sliderAutoNextFrameInterval);\n        }\n    }\n\n    this.setPosition(0);\n    this.domElement.appendChild(this.tape);\n\n    document.addEventListener('keydown', function(event) {\n        if (this.popupId == location.hash.slice(1)) {\n            switch (event.key) {\n                case 'ArrowLeft': this.move(-1, true); event.stopImmediatePropagation(); break;\n                case 'ArrowRight': this.move(1, true); event.stopImmediatePropagation(); break;\n            }\n        }\n    }.bind(this), false);\n};\n\nUI.Slider.prototype.setPosition = function(n, userEvent) {\n    if (userEvent) {\n        clearInterval(this.autoNextInterval);\n    }\n    if (typeof n == 'number') {\n        this.frame = Math.max(0, Math.min(this.length - 1, n));\n    }\n    this.tape.style.transform = 'translateX(' + (this.frame * -100) + '%)';\n    if (this.images) { this.images = this.tape.getElementsByTagName('img');} // IE\n    this.images[this.frame].onload = this.setPosition.bind(this);\n    var height = this.images[this.frame].clientHeight;\n    if (height > 100) { \n        this.tape.style.height = height + 'px'; \n    }\n    this.prevButton.setVisible(this.frame > 0);\n    this.nextButton.setVisible(this.frame < this.length - 1);\n\n    if (this.bulletsElement) {\n        for (var i = 0; i < this.images.length; i++) {\n            this.bulletsElement.children[i].classList[this.frame == i ? 'add' : 'remove']('select');\n        }\n    }\n};\n\nUI.Slider.prototype.move = function(n, userEvent) {\n    this.setPosition(this.frame += n, userEvent);\n};\n\nUI.Slider.prototype.next = function() {\n    if (window.location.hash.substr(1) == this.popupId) {\n        this.frame = ++this.frame % this.images.length;\n        this.setPosition(this.frame);\n    }\n};\n\nUI.Slider.prototype.SliderButton = function(slider, type) {\n    this.slider = slider;\n    this.domElement = document.createElement('div');\n    this.domElement.classList.add('slider-button', type);\n    this.domElement.classList.add(type);\n    this.domElement.addEventListener('click', function() {\n        this.move(type == 'next' ? 1 : -1, true);\n    }.bind(this.slider), false);\n    this.slider.domElement.appendChild(this.domElement);\n};\n\nUI.Slider.prototype.SliderButton.prototype.setVisible = function(v) {\n    this.domElement.classList[v ? 'remove' : 'add']('hidden');\n};\n","/* globals UI */\r\n\r\nUI.SliderLg = function(domElement) {\r\n\r\n   this.frame = 0;\r\n   this.domElement = domElement;\r\n   this.popupId = this.domElement.parentNode.id;\r\n   this.images = this.domElement.getElementsByTagName('img');\r\n   this.length = this.images.length;\r\n\r\n   this.tape = document.createElement('div');\r\n   this.tape.className = 'tape';\r\n\r\n   while (this.images.length) {\r\n      this.tape.appendChild(this.images[0]);\r\n   }\r\n   this.images = this.tape.getElementsByTagName('img');\r\n\r\n   this.prevButton = new this.SliderButton(this, 'prev');\r\n   this.nextButton = new this.SliderButton(this, 'next');\r\n\r\n   if (Tour.options.sliderBullets) {\r\n       this.bulletsElement = document.createElement('div');\r\n       this.bulletsElement.classList.add('bullets');\r\n       this.domElement.appendChild(this.bulletsElement);\r\n\r\n       for (var i = 0; i < this.images.length; i++) {\r\n           var bullet = document.createElement('div');\r\n           bullet.classList.add('bullet');\r\n           bullet.addEventListener('click', function(i) {\r\n               this.setPosition(i, true);\r\n           }.bind(this, i), false);\r\n           this.bulletsElement.appendChild(bullet);\r\n       }\r\n\r\n       if (Tour.options.sliderAutoNextFrameInterval) {\r\n           this.autoNextInterval = setInterval(this.next.bind(this), Tour.options.sliderAutoNextFrameInterval);\r\n       }\r\n   }\r\n\r\n   this.setPosition(0);\r\n   this.domElement.appendChild(this.tape);\r\n\r\n   document.addEventListener('keydown', function(event) {\r\n       if (this.popupId == location.hash.slice(1)) {\r\n           switch (event.key) {\r\n               case 'ArrowLeft': this.move(-1, true); event.stopImmediatePropagation(); break;\r\n               case 'ArrowRight': this.move(1, true); event.stopImmediatePropagation(); break;\r\n           }\r\n       }\r\n   }.bind(this), false);\r\n\r\n};\r\n\r\nUI.SliderLg.prototype.setPosition = function(n, userEvent) {\r\n   if (userEvent) {\r\n       clearInterval(this.autoNextInterval);\r\n   }\r\n   if (typeof n == 'number') {\r\n       this.frame = Math.max(0, Math.min(this.length - 1, n));\r\n   }\r\n   this.tape.style.transform = 'translateX(' + (this.frame * - 100) + '%)';\r\n   if (this.images) { \r\n      this.images = this.tape.getElementsByTagName('img');\r\n   } // IE\r\n   this.images[this.frame].onload = this.setPosition.bind(this);\r\n   var height = this.images[this.frame].clientHeight;\r\n   if (height > 100) { \r\n      // this.tape.style.height = height + 'px'; \r\n      this.tape.style.height = '370px';\r\n   }\r\n   this.prevButton.setVisible(this.frame > 0);\r\n   this.nextButton.setVisible(this.frame < this.length - 1);\r\n\r\n   if (this.bulletsElement) {\r\n       for (var i = 0; i < this.images.length; i++) {\r\n           this.bulletsElement.children[i].classList[this.frame == i ? 'add' : 'remove']('select');\r\n       }\r\n   }\r\n};\r\n\r\nUI.SliderLg.prototype.move = function(n, userEvent) {\r\n   this.setPosition(this.frame += n, userEvent);\r\n};\r\n\r\nUI.SliderLg.prototype.next = function() {\r\n   if (window.location.hash.substr(1) == this.popupId) {\r\n       this.frame = ++this.frame % this.images.length;\r\n       this.setPosition(this.frame);\r\n   }\r\n};\r\n\r\nUI.SliderLg.prototype.SliderButton = function(slider, type) {\r\n   this.slider = slider;\r\n   this.domElement = document.createElement('div');\r\n   this.domElement.classList.add('slider-button', type);\r\n   this.domElement.classList.add(type);\r\n   this.domElement.addEventListener('click', function() {\r\n       this.move(type == 'next' ? 1 : -1, true);\r\n   }.bind(this.slider), false);\r\n   this.slider.domElement.appendChild(this.domElement);\r\n};\r\n\r\nUI.SliderLg.prototype.SliderButton.prototype.setVisible = function(v) {\r\n   this.domElement.classList[v ? 'remove' : 'add']('hidden');\r\n};\r\n","/* globals Tools */\n\nTools.copyDirectionMarker = function(id, lat) {\n    console.info('Pano id:', Tour.view.id);\n    var code = JSON.stringify({\n        lat: lat || parseFloat(Tour.view.lat.value.toFixed(2)),\n        lon: parseFloat(Tour.view.lon.value.toFixed(2)),\n        icon: Tools.point.icon,\n        action: { type: 'panorama', id: id }\n    }, null, '');\n\n    Tour.controls.copyText(code);\n};\n","/* globals Tools */\n\nTools.copyInfoMarker = function(title, id) {\n    console.info('Pano id:', Tour.view.id);\n\n    var marker = {\n        lat: parseFloat(Tour.view.lat.value.toFixed(2)),\n        lon: parseFloat(Tour.view.lon.value.toFixed(2))\n    };\n\n    if (title) {\n        marker.title = title;\n    }\n    if (id) {\n        marker.action = { type: 'popup', id: id };\n    }\n\n    var code = JSON.stringify(marker, null, '');\n\n    Tour.controls.copyText(code);\n};\n","/* globals Tools */\n\nTools.copyMarker = function() {\n    if (this.point.icon == 'info') {\n        this.copyInfoMarker(\n            prompt('Enter title for info marker', 'title'),\n            prompt('Enter popup id', '')\n        );\n    } else {\n        this.copyDirectionMarker(prompt('Enter pano id', Tour.view.id));\n    }\n};\n","/* globals Tools */\n\nTools.init = function() {\n    this.setPoint();\n    window.addEventListener('keydown', function(event) {\n        switch (event.keyCode) {\n            case 13:  Tools.copyMarker(); break;  // Enter\n            case 49:  Tools.copyLon(); break;     // 1\n            case 50:  Tools.meshEditor(); break;  // 2\n        }\n    });\n\n    new UI.mouseMenu.Hr();\n    new UI.mouseMenu.Item(Tools.copyLon, 'Copy lon', '1');\n    new UI.mouseMenu.Item(Tools.meshEditor, 'Mesh editor', '2');\n\n    this.meshEditor();\n\n    Tour.view.fov.min = 5;\n    Tour.view.fov.max = 130;\n};\n\nTools.copyLon = function() {\n    Tour.controls.copyText(parseFloat(Tour.view.get().lon.toFixed(2)));\n};\n","/* globals Tools */\n\nTools.meshEditor = function() {\n    this.selectedMesh = false;\n    this.durationCrop = 0;\n\n    function onMouseMove(event) {\n        var mouse = new THREE.Vector2();\n        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n        var raycaster = new THREE.Raycaster();\n        raycaster.setFromCamera(mouse, Tour.camera);\n        var intersects = raycaster.intersectObjects(Tour.meshs);\n\n        Tour.meshs.forEach(function(n) {\n            n.material.color && n.material.color.set(0xffffff);\n            n.material.opacity = 1;\n        });\n\n        Tools.selectedMesh = false;\n\n        for (var i = 0; i < intersects.length; i++) {\n            if (intersects[ i ].object.material.color) {\n                intersects[ i ].object.material.color.set(0xff0000);\n                intersects[ i ].object.material.opacity = 0.6;\n                Tools.selectedMesh = intersects[ i ].object;\n            }\n        }\n    }\n\n    window.addEventListener('keydown', function(event) {\n        var alpha = 0.1;\n\n        if (event.altKey) { alpha /= 10; }\n        if (event.ctrlKey) { alpha /= 10; }\n        if (event.shiftKey) { alpha *= 10; }\n\n        var sm = Tools.selectedMesh;\n\n        if (sm) {\n            if (event.keyCode == 74) { // J\n                sm.position.z -= 1 * alpha;\n            } else if (event.keyCode == 76) { // L\n                sm.position.z += 1 * alpha;\n            } else if (event.keyCode == 73) { // K\n                sm.position.x += 1 * alpha;\n            } else if (event.keyCode == 75) { // K\n                sm.position.x -= 1 * alpha;\n            } else if (event.keyCode == 85) { // K\n                sm.position.y += 1 * alpha;\n            } else if (event.keyCode == 79) { // K\n                sm.position.y -= 1 * alpha;\n            } else if (event.keyCode == 219) { //{\n                sm.rotation.y += Math.PI / 2 * alpha;\n            } else if (event.keyCode == 221) { // }\n                sm.rotation.y -= Math.PI / 2 * alpha;\n            } else if (event.keyCode == 57) { // (\n                sm.rotation.z += Math.PI / 2 * alpha;\n            } else if (event.keyCode == 48) { // )\n                sm.rotation.z -= Math.PI / 2 * alpha;\n            } else if (event.keyCode == 188) { // (\n                sm.rotation.x += Math.PI / 2 * alpha;\n            } else if (event.keyCode == 190) { // )\n                sm.rotation.x -= Math.PI / 2 * alpha;\n            } else if (event.keyCode == 84) { // (\n                sm.scale.x += 1 * alpha;\n            } else if (event.keyCode == 89) { // )\n                sm.scale.x -= 1 * alpha;\n            } else if (event.keyCode == 71) { // (\n                sm.scale.y += 1 * alpha;\n            } else if (event.keyCode == 72) { // )\n                sm.scale.y -= 1 * alpha;\n            } else if (event.keyCode == 86) { // v\n                Tools.durationCrop = ++Tools.durationCrop % 4;\n                UI.notification.show('Set duration crop ' + ['top', 'right', 'bottom', 'left'][Tools.durationCrop]);\n            } else if (event.keyCode == 66) { // b\n                if (Tools.durationCrop == 0) {\n                    sm.material.map.repeat.y /= 1.1;\n                    sm.material.map.offset.y /= 1.1;\n                    Tools.selectedVideo.scale.y /= 1.1;\n                } else if (Tools.durationCrop == 1) {\n                    sm.material.map.repeat.x /= 1.1;\n                    sm.material.map.offset.x /= 1.1;\n                    sm.scale.x /= 1.1;\n                } else if (Tools.durationCrop == 2) {\n                    sm.material.map.repeat.y -= 0.1;\n                    sm.scale.y = sm.material.map.repeat.y;\n                } else if (Tools.durationCrop == 3) {\n                    sm.material.map.repeat.x -= 0.1;\n                    sm.scale.x = sm.material.map.repeat.x;\n                }\n\n            } else if (event.keyCode == 78) { // n\n                if (Tools.durationCrop == 0) {\n                    sm.material.map.repeat.y *= 1.1;\n                    sm.material.map.offset.y *= 1.1;\n                    sm.scale.y *= 1.1;\n                } else if (Tools.durationCrop == 1) {\n                    sm.material.map.repeat.x *= 1.1;\n                    sm.material.map.offset.x *= 1.1;\n                    sm.scale.x *= 1.1;\n                } else if (Tools.durationCrop == 2) {\n                    sm.material.map.repeat.y += 0.1;\n                    sm.scale.y = sm.material.map.repeat.y;\n                } else if (Tools.durationCrop == 3) {\n                    sm.material.map.repeat.x += 0.1;\n                    sm.scale.x = sm.material.map.repeat.x;\n                }\n            };\n\n            var fix = function(n) {\n                return parseFloat(parseFloat(n).toFixed(4));\n            };\n\n            if (event.code == 'Digit8' && Tools.selectedMesh) {\n                var mesh = {};\n                sm = Tools.selectedMesh;\n                mesh.position = {x: fix(sm.position.x), y: fix(sm.position.y), z: fix(sm.position.z)};\n                mesh.rotation = {x: fix(sm.rotation.x), y: fix(sm.rotation.y), z: fix(sm.rotation.z)};\n                if (sm._videoId) {\n                    alpha = Tour.videos[sm._videoId].canvas.height / Tour.videos[sm._videoId].canvas.width;\n                    mesh.scale = {\n                        x: fix(sm.scale.x / Tour.videos[sm._videoId].texture.repeat.x),\n                        y: fix(sm.scale.y / Tour.videos[sm._videoId].texture.repeat.y) / alpha,\n                        z: fix(sm.scale.z)\n                    };\n\n                    mesh.videoId = sm._videoId;\n                } else {\n                    alpha = Tour.images[sm._imageId].height / Tour.images[sm._imageId].width;\n                    mesh.scale = {\n                        x: fix(sm.scale.x),\n                        y: fix(sm.scale.y / alpha),\n                        z: fix(sm.scale.z)\n                    };\n                    mesh.imageId = sm._imageId;\n                }\n\n                Tour.controls.copyText(JSON.stringify(mesh));\n            }\n        }\n    });\n\n    document.body.addEventListener('click', onMouseMove, false);\n};\n","/* globals Tools */\n\nTools.setPoint = function() {\n    var directions = ['up', 'right', 'down', 'left', 'point', 'info'];\n    var currentDirection = -1;\n\n    var onclick = function() {\n        Tools.point = {icon: directions[++currentDirection % directions.length]};\n        point.setIcon(Tools.point.icon);\n    };\n\n    var point = new UI.Marker(onclick, false, false);\n    point.setVisible(true);\n\n    Object.assign(point.domElement.style, {\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        margin: 'auto'\n    });\n\n    onclick();\n};\n","/* globals Tour*/\n\nTour.addEventListeners = function() {\n    var active = { passive: false };\n\n    this.renderer.domElement.addEventListener('dblclick',  Tour.controls.fullscreen.bind(this), active);\n    this.renderer.domElement.addEventListener('mousedown', Tour.mouseEvents.down.bind(this), active);\n    this.renderer.domElement.addEventListener('touchstart', Tour.mouseEvents.down.bind(this), active);\n    this.renderer.domElement.addEventListener('mousewheel', Tour.mouseEvents.wheel.bind(this), active);\n    this.renderer.domElement.addEventListener('wheel', Tour.mouseEvents.wheel.bind(this), active);\n\n    this.renderer.domElement.addEventListener('gesturestart', Tour.mouseEvents.gesturestart.bind(this), active);\n    this.renderer.domElement.addEventListener('gesturechange', Tour.mouseEvents.gesturechange.bind(this), active);\n\n    document.addEventListener('mousemove', Tour.mouseEvents.move.bind(this), active);\n    document.addEventListener('touchmove', Tour.mouseEvents.move.bind(this), active);\n    document.addEventListener('mouseup', Tour.mouseEvents.up.bind(this), active);\n    document.addEventListener('touchend', Tour.mouseEvents.up.bind(this), active);\n\n    document.addEventListener('fullscreenchange', Tour.fullscreenEvents.change, active);\n    document.addEventListener('webkitfullscreenchange', Tour.fullscreenEvents.change, active);\n    document.addEventListener('mozfullscreenchange', Tour.fullscreenEvents.change, active);\n    document.addEventListener('MSFullscreenChange', Tour.fullscreenEvents.change, active);\n\n    window.addEventListener('keydown', Tour.keyEvents.down.bind(this));\n    window.addEventListener('resize',  this.resize.bind(this), active);\n\n    window.addEventListener('popstate', Tour.history.onpopstate);\n\n    // document.addEventListener('touchmove', function(event) {\n    //     if (event.scale !== 1) {\n    //         event.preventDefault();\n    //     }\n    // }, active);\n\n};\n","/* globals Tour, THREE */\n\nTour.animate = function() {\n    requestAnimationFrame(Tour.animate.bind(this));\n\n    if (this.view.rotation.auto) {\n        if (Math.abs(this.view.rotation.lon) < Math.abs(this.options.autorotationSpeed)) {\n            this.view.rotation.lon += this.options.autorotationSpeed / 100;\n        }\n        if (this.options.autorotationAlign) {\n            this.view.lat.set(this.view.lat.value / 1.01);\n            this.view.fov.set(90 + ((this.view.fov.value - 90) / 1.005));\n        }\n    } else {\n        this.view.rotation.lon /= this.options.kineticResistance;\n        this.view.rotation.lat /= this.options.kineticResistance;\n        if (Math.abs(Tour.view.rotation.lon) > 1e-5 || Math.abs(Tour.view.rotation.lon) > 1e-5) {\n            Tour.emmit('moveview');\n        }\n    }\n\n    this.view.lat.move(this.view.rotation.lat, true);\n    this.view.lon.move(this.view.rotation.lon, true);\n\n    var phi = THREE.Math.degToRad(90 - this.view.lat.value);\n    var theta = THREE.Math.degToRad(-this.view.lon.value);\n    var target = new THREE.Vector3(); //! Вынести!\n\n    target.x = Math.sin(phi) * Math.cos(theta);\n    target.y = Math.cos(phi);\n    target.z = Math.sin(phi) * Math.sin(theta);\n\n    if (window.isSecureContext && this.orientationControls.controls.enabled) {\n        this.orientationControls.controls.update();\n    } else {\n        this.camera.lookAt(target);\n    }\n\n    this.camera.fov = this.view.fov.value;\n    this.camera.updateProjectionMatrix();\n\n    for (var k in this.view) {\n        if (typeof this.view[k] == 'object') {\n            this.view[k].animate();\n        }\n    }\n    Tour.emmit('animate');\n    this.render();\n};\n","/* globals Tour, THREE */\n\nTour.backgroundImage = {};\n\nTour.backgroundImage.init = function() {\n    var wrapper = document.createElement('div');\n    wrapper.className = 'background-image__wrapper';\n\n    this.domElement = new Image();\n    this.domElement.id = 'background-image';\n    this.domElement.addEventListener('dragstart', function(event) {\n        event.preventDefault();\n    }, false);\n\n    wrapper.appendChild(this.domElement);\n    document.body.appendChild(wrapper);\n    if (Tour.options.rendererType != 'css') {\n        document.body.classList.add('transition-zoomin-start');\n    }\n};\n\nTour.backgroundImage.set = function(url, color, callback) {\n    if (color) {\n        document.body.style.backgroundColor = color;\n        Tour.renderer.setClearColor(new THREE.Color(color), 1);\n    }\n\n    if (url) {\n        if (this.domElement.decode) {\n            this.domElement.src = url;\n            this.domElement.decode().then(callback);\n        } else {\n            this.domElement.onload = callback;\n            this.domElement.src = url;\n        }\n    } else if (callback) {\n        callback();\n    }\n};\n\nTour.backgroundImage.getUrl = function(callback) {\n    var type = 'image/jpeg';\n    var quality = .5;\n\n    if (!Tour.mesh.material[0].map.image) {\n        callback(Tour.data.backgroundImage);\n    } else if (Tour.renderer.domElement.toBlob) {\n        Tour.renderer.domElement.toBlob(function(blob) {\n            callback(URL.createObjectURL(blob));\n        }, type, quality);\n    } else if (Tour.renderer.domElement) {\n        callback(Tour.renderer.domElement.toDataURL(type, quality));\n    }\n};\n\nTour.backgroundImage.transitionStart = function(callback, zoom) {\n    this.zoom = zoom;\n    var after = function() {\n        Tour.data.backgroundImage = false;\n        document.body.classList.add(zoom ? 'transition-zoomin-start' : 'transition-fadein-start');\n        document.body.classList.remove('transition-zoomin-end');\n        document.body.classList.remove('transition-fadein-end');\n        if (callback) {\n            callback();\n        }\n    };\n\n    if (Tour.options.rendererType != 'css' && Tour.options.transition) {\n        this.getUrl(function(url) {\n            this.set(url, Tour.data.backgroundColor, after);\n        }.bind(this));\n    } else {\n        after();\n    }\n};\n\nTour.backgroundImage.transitionEnd = function() {\n    document.body.classList.add(Tour.backgroundImage.zoom ? 'transition-zoomin-end' : 'transition-fadein-end');\n    document.body.classList.remove('transition-zoomin-start');\n    document.body.classList.remove('transition-fadein-start');\n};\n","/* globals Tour, UI, Lang, BrouserInfo, Tools*/\n\nTour.controls = {\n    back: function() {\n        window.history.back();\n    },\n\n    forward: function() {\n        window.history.forward();\n    },\n\n    next: function() {\n        Tour.view.go(1);\n    },\n\n    previous: function() {\n        Tour.view.go(-1);\n    },\n\n    opennewtab: function() {\n        window.open(location.href,'_blank');\n    },\n\n    mute: function() {\n        \n\n        if (bgmState) {\n            bgmplayer[bgmCurrent].pause();\n            bgmState = false;\n\n            var elem = document.getElementsByClassName('marker unmute')[0]\n            elem.className = 'marker mute';\n        }\n        else {\n            bgmplayer[bgmCurrent].play();\n            bgmState = true\n            var elem = document.getElementsByClassName('marker mute')[0]\n            elem.className = 'marker unmute';\n        }\n    },\n\n    microsite: function() {\n        var data = Tour.getManifest();\n        if (data.control.microsite !== undefined) {\n            window.open(data.control.microsite.url, data.control.microsite.target);\n        }\n    },\n\n    gohome: function() {\n        var data = Tour.getManifest();\n        window.open(data.microsite.url, data.microsite.target);\n    },\n\n    fullscreen: function() {\n        var e;\n        if (document.fullscreenElement              ||\n            document.msFullscreenElement            ||\n            document.webkitCurrentFullScreenElement ||\n            document.mozFullScreenElemenz\n        ) {\n            e = document;\n            if (e.exitFullscreen) { e.exitFullscreen();\n            } else if (e.msExitFullscreen) { e.msExitFullscreen();\n            } else if (e.webkitCancelFullScreen) { e.webkitCancelFullScreen();\n            } else if (e.mozCancelFullScreen) { e.mozCancelFullScreen(); }\n\n            if (screen.orientation && screen.orientation.unlock) {\n                screen.orientation.unlock();\n            }\n        } else {\n            e = document.documentElement;\n            if (e.requestFullscreen) { e.requestFullscreen();\n            } else if (e.msRequestFullscreen) { e.msRequestFullscreen();\n            } else if (e.webkitRequestFullScreen) { e.webkitRequestFullScreen();\n            } else if (e.mozRequestFullScreen) { e.mozRequestFullScreen(); }\n\n            if (screen.orientation && screen.orientation.lock) {\n                screen.orientation.lock(screen.orientation.type).catch(function() {\n                    // Блокировка поворота экрана недоступна для этого устройства\n                });\n            }\n        }\n    },\n\n    visitSite: function() {\n        window.open('http://tour-360.ru', '_blank');\n    },\n\n    download: function() {\n        var type = 'image/jpeg';\n        var quality = .95;\n\n        function save(url) {\n            var link = document.createElement('a');\n            link.href = url;\n            link.download = document.title + '.jpg';\n            link.dispatchEvent(new MouseEvent('click'));\n        }\n\n        if (Tour.renderer.domElement.toBlob) {\n            Tour.renderer.domElement.toBlob(function(blob) {\n                save(URL.createObjectURL(blob));\n            }, type, quality);\n        } else if (Tour.renderer.domElement) {\n            save(Tour.renderer.domElement.toDataURL(type, quality));\n        }\n    },\n\n    /**\n     * Парсит location.search\n     *\n     * @param {Number} timeout Интервал, на который откладывается автовращение\n     *                         30000     — Будет отложенно на 30 секунд\n     *                         true      — Будет отложенно на время поумолчанию\n     *                         false     — Будет удален интервал\n     *                         undefined — Будет запущен мгновенно\n     */\n\n    autoRotate: function(timeout) {\n        clearInterval(this.autorotateTimeout);\n        if (timeout) {\n            if (timeout === true) {\n                timeout = Tour.options.autorotationTimeout;\n            }\n            if (timeout) {\n                this.autorotateTimeout = setTimeout(this.autoRotate.bind(this), timeout);\n            }\n        } else if (timeout === 0 || timeout === false) {\n            Tour.view.rotation.auto = false;\n        } else if (timeout === undefined) {\n            Tour.view.rotation.auto = !Tour.view.rotation.auto;\n        }\n    },\n\n    reload: function() {\n        location.reload(true);\n    },\n\n    toggleMenu: function() {\n        var panel = UI.controlPanel;\n        panel.setVisible(!panel.visibility);\n        if (Tour.toggleMenuItem) {\n            var text = Lang.get('mousemenu.' + (panel.visibility ? 'hide' : 'show') + 'menu');\n            Tour.toggleMenuItem.setText(text);\n        }\n    },\n\n    stopRotate: function() {\n        Tour.view.rotation.auto = false;\n        Tour.view.rotation.lat = Tour.view.rotation.lon = 0;\n    },\n\n    zoomIn: function() {\n        Tour.view.fov.move(-10);\n        Tour.history.set();\n    },\n\n    zoomOut: function() {\n        Tour.view.fov.move(10);\n        Tour.history.set();\n    },\n\n    moveUp: function() {\n        Tour.controls.stopRotate();\n        Tour.view.lat.move(30);\n        Tour.history.set();\n    },\n\n    moveDown: function() {\n        Tour.controls.stopRotate();\n        Tour.view.lat.move(-30);\n        Tour.history.set();\n    },\n\n    moveRight: function() {\n        Tour.controls.stopRotate();\n        Tour.view.lon.move(-22.5);\n        Tour.history.set();\n    },\n\n    moveLeft: function() {\n        Tour.controls.stopRotate();\n        Tour.view.lon.move(22.5);\n        Tour.history.set();\n    },\n\n    toggleControls: function() {\n        if (window.isSecureContext) {\n            var ctrl = Tour.orientationControls.controls;\n            ctrl.enabled ? ctrl.disconnect() : ctrl.connect();\n        }\n    },\n\n    getCode: function() {\n        var allow = ['accelerometer', 'autoplay', 'gyroscope'];\n        var code = '<iframe src=\"' + location.href +\n        '\" width=\"640\" height=\"480\" frameborder=\"no\" scrolling=\"no\" allow=\"' + allow.join('; ') +\n        '\" allowfullscreen></iframe>';\n        Tour.controls.copyText(code);\n    },\n\n    copyText: function(text) {\n        var report = function(done) {\n            if (done) {\n                UI.notification.show(Lang.get('notification.successfully-copied'));\n            } else {\n                var metaKey = BrouserInfo.apple ? '⌘' : 'Ctrl';\n                window.prompt(Lang.get('notification.embed-code').replace('*', metaKey + '+C'), text);\n            }\n        };\n\n        if (document.execCommand) {\n            var span = document.createElement('span');\n            span.textContent = text;\n            document.body.appendChild(span);\n            var range = document.createRange();\n            range.selectNode(span);\n            window.getSelection().removeAllRanges();\n            window.getSelection().addRange(range);\n\n            report(document.execCommand('copy'));\n\n            window.getSelection().removeAllRanges();\n            document.body.removeChild(span);\n        } else if (window.clipboardData) {\n            window.clipboardData.setData('Text', text);\n            report(true);\n        } else {\n            report(false);\n        }\n    },\n\n    editor: function() {\n        Tools.init();\n    },\n\n    suport: function() {\n\n    },\n\n    help: function(event) {\n        event.preventDefault();\n        var page = 'Помощь-в-пользовании-плеером-виртуальных-туров';\n        window.open('http://github.com/Tour-360/tour-player/wiki/' + page, '_blank');\n    },\n\n    badBrowser: function() {\n\n    },\n\n    closeWindow: function() {\n        UI.popUp.set();\n    }\n};\n","/* globals Tour, THREE*/\n\nTour.createScene = function() {\n    this.setRenderer(Tour.options.rendererType, Tour.options.imageType);\n    document.body.appendChild(this.renderer.domElement);\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera();\n\n    if (Tour.options.rendererType == 'css') {\n        var sides = [\n            [[-1,0, 0],[0,  0.5, 0]],\n            [[1, 0, 0],[0, -0.5, 0]],\n            [[0, 1, 0],[0.5,  0, 1]],\n            [[0,-1, 0],[-0.5, 0, 1]],\n            [[0, 0, 1],[0,    1, 0]],\n            [[0, 0,-1],[0,    0, 0]]\n        ];\n        var increase = function(n) {return this * n;};\n        this.mesh = new THREE.Object3D();\n        for (var k = 0; k < sides.length; k++) {\n            var element = document.createElement('img');\n            var size = this.options.imageType == 'low' ? 1024 : 2048;\n            element.ondragstart = function(event) { event.preventDefault(); };\n            element.width = size + 2;\n            var object = new THREE.CSS3DObject(element);\n            object.rotation.fromArray(sides[k][1].map(increase.bind(Math.PI)));\n            object.position.fromArray(sides[k][0].map(increase.bind(size / 2)));\n            this.mesh.add(object);\n        }\n    } else {\n        var segments = this.options.rendererType == 'canvas' ? 8 : 1;\n        var geometry = new THREE.BoxGeometry(-100, 100, 100, segments, segments, segments);\n        var materials = [];\n        for (var i = 0; i < 6; i++) {\n            materials.push(new THREE.MeshBasicMaterial({map: new THREE.Texture()}));\n        }\n        this.mesh = new THREE.Mesh(geometry, materials);\n    }\n\n    this.mesh.rotation.y = Math.PI / 2;\n\n    this.scene.add(this.mesh);\n    this.resize();\n};\n","/* globals Tour */\n\nTour.defaultOption = {\n    path: 'panorams/',\n    mainifest: 'manifest.json',\n    tileset: [1, 3, 4, 5, 0, 2],\n    initFov: 75,\n    kineticResistance: 1.1,\n    autorotationSpeed: -0.05,\n    autorotationTimeout: 0,\n    mouseSensitivity: 10,\n    touchDrag: true,\n    transition: true,\n    mouseMenu: true,\n    controlPanel: false,\n    touchScroll: false,\n    scaleControl: true,\n    iFrameScaleControl: false,\n    autorotationAlign: true,\n    sliderBullets: true,\n    sliderAutoNextFrameInterval: 6000,\n    sentry: {\n        dsn: 'https://c3787e5f33b14319900ad46caabbaa6f@sentry.io/1309149'\n    },\n    limit: {\n        fov: { min: 40, max: 90},\n        lat: { min: -85, max: 85},\n        lon: { min: false, max: false}\n    }\n};\n","/* globals Tour*/\n\nTour.detectFaceInCamera = function() {\n    var raycaster = new THREE.Raycaster();\n    var faces = [0,0,0,0,0,0];\n    var vector = new THREE.Vector2();\n    for (var y = -1; y < 1; y += 0.2) { for (var x = -1; x < 1; x += 0.2) {\n        vector.x = x; vector.y = y;\n        raycaster.setFromCamera(vector, this.camera);\n        var intersects = raycaster.intersectObjects(this.scene.children);\n        if (intersects.length && intersects[0].object == this.mesh) {\n            faces[intersects[0].face.materialIndex] += intersects[0].distance ? 1 : 0;\n        }\n    }}\n    return faces;\n};\n","/* globals Tour */\n\n/**\n * Словарь фраз на нескольких языхах\n * коды языков ISO 639-1\n *\n * @type {Object}\n */\nTour.dictionary = {\n    'virtual-tour': {\n        'en': 'Virtual tour',\n        'ru': 'Виртуальный тур',\n        'uk': 'Віртуальний тур',\n        'de': 'Virtuelle Tour',\n        'zh': '虚拟之旅'\n    },\n    'loading': {\n        'en': 'Loading...',\n        'ru': 'Загрузка...',\n        'uk': 'Завантаження...',\n        'de': 'Laden...',\n        'zh': '载入中...'\n    },\n\n    'mousemenu.back': {\n        'en': 'Back',\n        'ru': 'Назад',\n        'uk': 'Назад',\n        'de': 'Zurück',\n        'zh': '背部'\n    },\n    'mousemenu.forward': {\n        'en': 'Forward',\n        'ru': 'Вперед',\n        'uk': 'Уперед',\n        'de': 'Vorwärts',\n        'zh': '前锋'\n    },\n    'mousemenu.reload': {\n        'en': 'Reload',\n        'ru': 'Перезагрузить',\n        'uk': 'Перезавантажити',\n        'de': 'Neu laden',\n        'zh': '刷新'\n    },\n    'mousemenu.zoomout': {\n        'en': 'Zoom out',\n        'ru': 'Уменьшить',\n        'uk': 'Зменшити',\n        'de': 'Rauszoomen',\n        'zh': '缩小'\n    },\n    'mousemenu.zoomin': {\n        'en': 'Zoom in',\n        'ru': 'Увеличить',\n        'uk': 'Збільшувати',\n        'de': 'Hineinzoomen',\n        'zh': '放大'\n    },\n    'mousemenu.autorotate': {\n        'en': 'Auto rotate',\n        'ru': 'Автовращение',\n        'uk': 'Автоматичного повороту',\n        'de': 'Automatisch drehen',\n        'zh': '自动旋转'\n    },\n    'mousemenu.fullscreen': {\n        'en': 'Full screen',\n        'ru': 'Во весь экран',\n        'uk': 'На весь екран',\n        'de': 'voll Schrei',\n        'zh': '全屏'\n    },\n    'mousemenu.hidemenu': {\n        'en': 'Hide menu',\n        'ru': 'Скрыть меню',\n        'uk': 'Сховати меню',\n        'de': 'Menü ausblenden',\n        'zh': '隐藏菜单'\n    },\n    'mousemenu.showmenu': {\n        'en': 'Show menu',\n        'ru': 'Показать меню',\n        'uk': 'Показати меню',\n        'de': 'Zeige das Menü',\n        'zh': '显示菜单'\n    },\n    'mousemenu.getcode': {\n        'en': 'Copy embed code',\n        'ru': 'Скопировать код для вставки',\n        'uk': 'Скопіюйте код для вставки',\n        'de': 'Einbettungscode kopieren',\n        'zh': '复制嵌入代码'\n    },\n    'mousemenu.saveimage': {\n        'en': 'Save Image As...',\n        'ru': 'Сохранить изображение как...',\n        'uk': 'Зберегти зображення як...',\n        'de': 'Bild speichern als...',\n        'zh': '图像另存为...'\n    },\n    'mousemenu.visitsite': {\n        'en': 'Visit website',\n        'ru': 'Перейти на',\n        'uk': 'Відвідати сайт',\n        'de': 'Besuch',\n        'zh': '访问网站'\n    },\n    'mousemenu.newtab': {\n        'en': 'Open tour in new tabe',\n        'ru': 'Открыть тур в новой вкладке',\n        'uk': 'Відкрити тур в новій вкладці',\n        'de': 'Tour in neuem Tab öffnen',\n        'zh': '在新标签中打开游览'\n    },\n\n    'key.left': {\n        'en': 'Left Arrow',\n        'ru': 'Стрелка влево',\n        'uk': 'стрілка вліво',\n        'de': 'Linker Pfeil',\n        'zh': '左箭头'\n    },\n    'key.right': {\n        'en': 'Right Arrow',\n        'ru': 'Стрелка вправо',\n        'uk': 'стрілка вправо',\n        'de': 'Rechter Pfeil',\n        'zh': '右箭头'\n    },\n    'key.spase': {\n        'en': 'Space',\n        'ru': 'Пробел',\n        'uk': 'Пробіл',\n        'de': 'Raum',\n        'zh': '空间'\n    },\n\n    'control.left': {\n        'en': 'Left',\n        'ru': 'Налево',\n        'uk': 'Зліва',\n        'de': 'Links',\n        'zh': '剩下'\n    },\n    'control.right': {\n        'en': 'Right',\n        'ru': 'Направо',\n        'uk': 'Право',\n        'de': 'Recht',\n        'zh': '对'\n    },\n    'control.up': {\n        'en': 'Up',\n        'ru': 'Вверх',\n        'uk': 'Вгору',\n        'de': 'Oben',\n        'zh': '向上'\n    },\n    'control.down': {\n        'en': 'Down',\n        'ru': 'Вниз',\n        'uk': 'Вниз',\n        'de': 'Nach unten',\n        'zh': '下'\n    },\n\n    'notification.successfully-copied': {\n        'en': 'Code copied to clipboard',\n        'ru': 'Код скопирован в буфер обмена',\n        'uk': 'Код скопійований в буфер обміну',\n        'de': 'Code kopid die Zwischenablage',\n        'zh': '代码复制到剪贴板'\n    },\n    'notification.embed-code': {\n        'en': 'Embed code (Press *, to copy)',\n        'ru': 'Код для вставки (Нажмите *, чтобы скопировать)',\n        'uk': 'Код для вставки (Натисніть *, щоб скопіювати)',\n        'de': 'Embed code (Press *, dann Kopien)',\n        'zh': '嵌入代码（按 *，复制）'\n    },\n    'notification.error-load-pano': {\n        'en': 'Error loading panorama',\n        'ru': 'Ошибка загрузки панорамы',\n        'uk': 'Помилка завантаження панорами',\n        'de': 'Fehler beim Laden Panorama',\n        'zh': '错误加载全景'\n    },\n    'notification.error-load-img': {\n        'en': 'Error loading image',\n        'ru': 'Ошибка загрузки изображения',\n        'uk': 'Помилка завантаження зображення',\n        'de': 'Fehler beim Laden der Bild',\n        'zh': '载入图片时出错'\n    },\n    'notification.error-load-tour': {\n        'en': 'Error loading virtual tour',\n        'ru': 'Ошибка загрузки виртуального тура',\n        'uk': 'Помилка завантаження віртуального туру',\n        'de': 'Fehler beim Laden Virtuelle Tour',\n        'zh': '错误加载虚拟旅游'\n    },\n    'notification.error-load-tour-protocol': {\n        'en': 'Loading error. Use the http or https protocol for correct tour operation',\n        'ru': 'Ошибка загрузки. Используйте протокол http или https для корректной работы тура',\n        'uk': 'Помилка завантаження. Використовуйте протокол http або https для коректної роботи туру',\n        'de': 'Ladefehler. Verwenden Sie das http- oder https-Protokoll für den korrekten Tour-Vorgang',\n        'zh': '加载错误。 使用http或https协议进行正确的巡视操作'\n    },\n\n    'gallery.show': {\n        'en': 'Show gallery',\n        'ru': 'Показать галерею',\n        'uk': 'Show gallery',\n        'de': 'Galerie anzeigen',\n        'zh': '显示图库'\n    },\n    'gallery.hide': {\n        'en': 'Hide gallery',\n        'ru': 'Скрыть галерею',\n        'uk': 'Приховати галерею',\n        'de': 'Galerie ausblenden',\n        'zh': '隐藏图库'\n    }\n};\n","/* globals Tour*/\nTour.events = {};\n\nTour.emmit = function(name, obj) {\n    if (name in this.events) {\n        this.events[name].forEach(function(event) {\n            event.call(this, obj);\n        }.bind(this));\n    }\n};\n\nTour.on = function(name, callback) {\n    if (!(name in this.events)) {\n        this.events[name] = [];\n    }\n    this.events[name].push(callback);\n};\n","/* globals Tour*/\n\nTour.fullscreenEvents = {};\n\nTour.fullscreenEvents.change = function() {\n\n    var fullscreen =\n    document.fullscreen ||\n    document.mozFullScreen ||\n    document.webkitIsFullScreen ||\n    document.msFullscreenElement;\n\n    document.body.classList[fullscreen ? 'add' : 'remove']('fullscreen');\n};\n","\r\n\r\n\r\n\r\nTour.getManifest = function() {\r\n   return this.data;\r\n};\r\n\r\n","/* globals Tour */\n\n/**\n * Простая утилита для получения конкретной панорамы из масива\n */\nTour.getPanorama = function(key) {\n    var key = key !== undefined ? key : this.view.id;\n    return (this.data.panorams || []).filter(function(pano) {\n        return pano.id == (key || 0);\n    })[0] || this.data.panorams[0];\n};\n\n","Tour.getRandomQuery = function() {\r\n   if (!this.options.nocache) {\r\n       return '';\r\n   } else {\r\n       return '?' + Math.floor(Math.random() * Math.pow(16,8)).toString(16);\r\n   }\r\n};\r\n","/* globals Tour, BrouserInfo*/\n\n/**\n * Определяет поддерживаемый тип рендеринга,\n *\n * @return {String} тип рендерига ('webgl', 'css', 'canvas')\n */\nTour.getRenderer = function() {\n    var rendererType;\n\n    if (BrouserInfo.array) {\n        if (BrouserInfo.webgl) {\n            rendererType = 'webgl';\n        } else if (BrouserInfo.css) {\n            rendererType = 'css';\n        } else if (BrouserInfo.canvas) {\n            rendererType = 'canvas';\n        }\n    }\n\n    return rendererType;\n};\n","/* globals Tour, Lang */\n\nTour.history = {};\n\n/**\n * Перезаписывает последнюю запись в историю\n *\n * @param {Boolean} push если указанно true, то создается новая запись\n */\nTour.history.set = function(push) {\n    var title = [Lang.translate(Tour.data.title) || Lang.get('virtual-tour'),\n    Lang.translate(Tour.getPanorama(Tour.view.id).title)];\n\n    title = title.join(title[1] ? ' – ' : '');\n\n    window.history[(push ? 'pushState' : 'replaceState')](\n        Tour.view.get(), title, Tour.query.set(Tour.view) + window.location.hash\n    );\n    document.title = title;\n    Tour.controls.autoRotate(true);\n};\n\nTour.history.onpopstate = function(event) {\n    Tour.view.set(event.state, true);\n};\n","/* globals Tour, THREE*/\n\nTour.Image = function(options) {\n    this.loader = new THREE.TextureLoader();\n    this.material = new THREE.MeshBasicMaterial({\n        map: this.loader.load(options.src),\n        transparent: true,\n        // overdraw: 0.5,\n        // needsUpdate: true,\n        depthWrite: false\n    });\n\n    this.width = options.width;\n    this.height = options.height;\n};\n\n//https://stackoverflow.com/questions/15994944/transparent-objects-in-threejs\n","/* globals Tour */\n\nTour.ImageBitmapLoader = function(manager) {\n    this.manager = manager || new Tour.LoadingManager();\n    this.manager.add(this);\n};\n\nTour.ImageBitmapLoader.prototype.load = function(url, onload, onprogress, onerror) {\n    this.url = url;\n    this.onload = this.onload || onload;\n    this.onprogress = this.onprogress || onprogress;\n    this.onerror = this.onerror || onerror;\n\n    this.request = new XMLHttpRequest();\n    this.request.onprogress = this._onprogress.bind(this);\n    this.request.onload = this._onload.bind(this);\n\n    this.request.onreadystatechange = function(event) {\n        if (this.onerror && event.target.readyState == 4 && event.target.status != 200 && event.target.status != 0) {\n            this.onerror({code: event.target.status});\n        }\n    }.bind(this);\n\n    this.request.open('GET', url, true);\n    this.request.responseType = 'arraybuffer';\n    this.request.send(null);\n};\n\nTour.ImageBitmapLoader.prototype.abort = function() {\n    this.request.abort();\n    this.onload = false;\n};\n\nTour.ImageBitmapLoader.prototype._onload = function() {\n    var headers = this.request.getAllResponseHeaders();\n    var mimeType = headers.match(/^Content-Type\\:\\s*(.*?)$/mi)[1] || 'image/jpeg';\n\n    var options = { imageOrientation: 'flipY', resizeQuality: 'high' };\n    var that = this;\n\n    (function(){\n        \n        if (BrouserInfo.brouser.name == \"Firefox\" && parseInt(BrouserInfo.brouser.version.split('.')[0])<93)\n            return createImageBitmap(new Blob([that.request.response], {type: mimeType}));\n        if (BrouserInfo.mobile)\n            return createImageBitmap(new Blob([that.request.response], {type: mimeType}), options);\n        else\n            return createImageBitmap(new Blob([that.request.response], {type: mimeType}), options);\n\n    })().then(function(bitmap){\n        that.bitmap = bitmap;\n        that.complete = true;\n        that._onimageload();\n    }).catch(function (err){\n        that.onerror(err);\n    })\n\n\n\n    // createImageBitmap(new Blob([this.request.response], {type: mimeType}), options).then(function(bitmap){\n    //     that.bitmap = bitmap;\n    //     that._onimageload();\n    // }).catch(function (err){\n    //     that.onerror(err);\n    // })\n};\n\nTour.ImageBitmapLoader.prototype._onprogress = function(event) {\n    this.onprogress({\n        url: this.url,\n        progress: event.loaded / event.total\n    });\n};\n\nTour.ImageBitmapLoader.prototype._onimageload = function() {\n    if (this.onload) { this.onload(this.bitmap); }\n    if (this.oncomplete) { this.oncomplete(this.bitmap); }\n};\n\n","/* globals Tour */\n\nTour.ImageLoader = function(manager) {\n    this.manager = manager || new Tour.LoadingManager();\n    this.manager.add(this);\n};\n\nTour.ImageLoader.prototype.load = function(url, onload, onprogress, onerror) {\n    this.url = url;\n    this.onload = this.onload || onload;\n    this.onprogress = this.onprogress || onprogress;\n    this.onerror = this.onerror || onerror;\n\n    this.request = new XMLHttpRequest();\n    this.request.onprogress = this._onprogress.bind(this);\n    this.request.onload = this._onload.bind(this);\n\n    this.request.onreadystatechange = function(event) {\n        if (this.onerror && event.target.readyState == 4 && event.target.status != 200 && event.target.status != 0) {\n            this.onerror({code: event.target.status});\n        }\n    }.bind(this);\n\n    this.request.open('GET', url, true);\n    this.request.responseType = 'arraybuffer';\n    this.request.send(null);\n};\n\nTour.ImageLoader.prototype.abort = function() {\n    this.request.abort();\n    this.onload = false;\n};\n\nTour.ImageLoader.prototype._onload = function() {\n    var headers = this.request.getAllResponseHeaders();\n    var mimeType = headers.match(/^Content-Type\\:\\s*(.*?)$/mi)[1] || 'image/jpeg';\n\n    this.image = new Image();\n    this.image.src = window.URL.createObjectURL(new Blob([this.request.response], {type: mimeType})) || this.url;\n    this.image.onload = this._onimageload.bind(this);\n    this.image.onerror = this.onerror;\n};\n\nTour.ImageLoader.prototype._onprogress = function(event) {\n    this.onprogress({\n        url: this.url,\n        progress: event.loaded / event.total\n    });\n};\n\nTour.ImageLoader.prototype._onimageload = function() {\n    if (this.onload) { this.onload(this.image); }\n    if (this.oncomplete) { this.oncomplete(this.image); }\n};\n\n","/* globals Tour, Lang, BrouserInfo, UI*/\n\nvar bgmplayer = [];\nvar bgmCurrent = '';\nvar bgmState = true;\n\nTour.init = function(data, options) {\n    this.sentry();\n    console.info('Tour-player', 'v' + this.version.join('.'));\n    BrouserInfo();\n    this.options.set(this.defaultOption);\n    this.options.set(options);\n    this.options.set(Tour.query.get());\n    Lang.set(this.options.lang, Tour.dictionary);\n    this.backgroundImage.init();\n    this.createScene();\n    UI.notification.init();\n    // UI.popUp.init();\n    UI.popUpLg.init();\n    // this.setSliders();\n    this.setSlidersLg();\n    UI.devCursor.init(this.options.cursor);\n\n    \n    this.setMouseMenu();\n    this.orientationControls.init();\n\n    this.load(data, function(data) {\n\n        this.setControlPanel(data.control);\n        this.setVideos(data.videos);\n        this.setImages(data.images);\n        document.title = Lang.translate(data.title) || Lang.get('virtual-tour');\n        var query = Tour.query.get();\n        query.id = query.id || data.start || data.panorams[0].id || 0;\n        if (query.id == data.start && !query.lon && !query.lat) {\n            var pano = this.getPanorama(query.id);\n            query.lat = pano.lat;\n            query.lon = pano.lon;\n        };\n        this.view.set(query, true);\n        this.setGallery(data, options.galleryVisible);\n        this.addEventListeners();\n        Tour.emmit('init');\n        this.animate();\n\n\n        this.currentBGM = '';\n        for (i = 0; i< data.panorams.length; i++) {\n            if (data.panorams[i].bgm !== undefined) { \n                var panoid = data.panorams[i].id\n                bgmplayer[panoid] = document.getElementById(data.panorams[i].bgm.id)\n            }\n        }\n\n    }.bind(this));\n};\n","/* globals Tour*/\n\nTour.keyEvents = {};\n\nTour.keyEvents.down = function(event) {\n\n    if ((event.ctrlKey || event.metaKey) && event.keyCode == 83) { // Ctrl+S, Cmd+S\n        event.preventDefault();\n        this.controls.download();\n        return;\n    }\n\n    if ((event.shiftKey && event.metaKey && event.keyCode == 70) || event.keyCode == 122) { // ⌘⇧F, F11\n        event.preventDefault();\n        Tour.controls.fullscreen();\n        return;\n    }\n\n    if ((event.keyCode == 82 && event.metaKey) || event.keyCode == 116) { // ⌘R, F5\n        event.preventDefault();\n        this.controls.reload();\n        return;\n    }\n\n    switch (event.keyCode) {\n        case 65: case 37:  this.controls.moveLeft(); break;        // A ←\n        case 68: case 39:  this.controls.moveRight(); break;       // D →\n        case 87: case 38:  this.controls.moveUp(); break;          // W ↑\n        case 83: case 40:  this.controls.moveDown(); break;        // S ↓\n        case 16: case 187: this.controls.zoomIn(); break;          // + Shift\n        case 17: case 189: this.controls.zoomOut(); break;         // - Ctrl\n        case 72: case 77:  this.controls.toggleMenu(); break;      // H M\n        case 82: case 32:  this.controls.autoRotate(); break;      // R Space\n        case 190:          this.controls.next(); break;            // >\n        case 188:          this.controls.previous(); break;        // <\n        case 112:          this.controls.help(event); break;       // F1\n        case 113:          this.controls.editor(); break;          // F2\n        case 27:           this.controls.closeWindow(); break;     // Esc\n    }\n};\n","document.addEventListener('DOMContentLoaded', function() {\n    var lazyImages = [].slice.call(document.querySelectorAll('img[data-src]'));\n\n    if ('IntersectionObserver' in window) {\n        var lazyImageObserver = new IntersectionObserver(function(entries) {\n            entries.forEach(function(entry) {\n                if (entry.isIntersecting) {\n                    var lazyImage = entry.target;\n                    lazyImage.src = lazyImage.dataset.src;\n                    delete lazyImage.dataset.src;\n                    lazyImageObserver.unobserve(lazyImage);\n                }\n            });\n        });\n\n        lazyImages.forEach(function(lazyImage) {\n            lazyImageObserver.observe(lazyImage);\n        });\n    } else {\n        lazyImages.forEach(function(lazyImage) {\n            lazyImage.src = lazyImage.getAttribute('data-src');\n            lazyImage.removeAttribute('data-src');\n        });\n    }\n});\n","/* globals Tour, UI, Lang */\n\nTour.load = function(data, callback) {\n    if (typeof data === 'object') {\n        this.data = data;\n        this.emmit('load', this.data);\n        callback(this.data);\n    } else {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', data || Tour.options.mainifest, true);\n        xhr.onreadystatechange = function() {\n            if (xhr.readyState != 4) {\n                return;\n            }\n            if (xhr.status != 200) {\n                var errorText;\n                if (xhr.status == 0 || window.location.protocol == 'file:') {\n                    errorText = Lang.get('notification.error-load-tour-protocol');\n                } else {\n                    errorText = Lang.get('notification.error-load-tour');\n                }\n                UI.notification.show(errorText, false);\n            } else {\n                var json = xhr.responseText.replace(/\\/\\*[\\s\\S]*?\\*\\/|([^:]|^)\\/\\/.*$/mg, '');\n                try {\n                    Tour.data = JSON.parse(json);\n                } catch (e) {\n                    var position = parseInt(e.message.split(' ')[7]);\n                    if (position) {\n                        var lines = xhr.responseText.split('\\n');\n                        for (var line = 0, bites = 0; bites <= position; line++) {\n                            bites += lines[line].length + 1;\n                        }\n                    }\n                    UI.notification.show(e.name + ' \\n' + e.message + (line ? ' line ' + line : ''), false);\n                } finally {\n                    Tour.emmit('load', Tour.data);\n                    callback(Tour.data);\n                }\n            }\n        };\n        xhr.send();\n    }\n};\n","/* globals Tour */\n\nTour.LoadingManager = function(onload, onprogress, onerror) {\n    this.images = [];\n    this.loaders = [];\n    this.onload = this.onload || onload;\n    this.onprogress = this.onprogress || onprogress;\n    this.onerror = this.onerror || onerror;\n};\n\nTour.LoadingManager.prototype.add = function(loader) {\n    loader.onerror = this.onerror;\n    this.loaders.push(loader);\n\n    loader.onprogress = function(event) {\n        this.images[event.url] = event.progress;\n        var sum = 0;\n        for (var k in this.images) {sum += this.images[k];}\n        var progress = sum / this.images.length;\n\n        if (this.onprogress) {\n            this.onprogress({progress: progress});\n        }\n    }.bind(this);\n\n    var _this = this;\n    loader.oncomplete = function() {\n        var completeAll = _this.loaders.every(function(n) {\n            return n.image && n.image.complete;\n        });\n        if (completeAll && _this.onload) {\n            _this.onload();\n        }\n    };\n\n    this.images.length++;\n};\n\nTour.LoadingManager.prototype.abort = function() {\n    this.loaders.map(function(loader) {\n        loader.abort();\n    });\n};\n","/* globals Tour, THREE, UI*/\n\n\n\n\nTour.Marker = function(lat, lon, action, icon, title, sound) {\n    UI.Marker.call(this, action, icon, title, sound);\n    this.setLatLon(lat, lon);\n};\n\nTour.Marker.prototype = Object.create(UI.Marker.prototype);\nTour.Marker.prototype.constructor = Tour.Marker;\n\nTour.Marker.prototype.setLatLon = function(lat, lon) {\n    this.lat = lat || 0;\n    this.lon = lon || 0;\n\n    var x =  -lon / 180 * Math.PI;\n    var y = (-lat + 90) / 180 * Math.PI;\n\n    this.vector = new THREE.Vector3(\n        Math.cos(x) * Math.sin(y),\n        Math.cos(y),\n        Math.sin(x) * Math.sin(y)\n    );\n};\n\nTour.Marker.prototype.draw = function() {\n    var pos = this.vector.clone().project(Tour.camera);\n\n    var width = Tour.clientWidth / 2;\n    var height = Tour.clientHeight / 2;\n\n    if (pos.z < 1) {\n        var rotation = 0;\n        var oc = Tour.orientationControls;\n        if (oc && oc.controls && oc.controls.enabled) {\n            rotation = THREE.Math.radToDeg(Tour.camera.rotation.z);\n        }\n\n        this.setPosition(\n            (pos.x  * width  + width),\n            (-pos.y * height + height),\n            rotation\n        );\n    } else {\n        this.setVisible(false);\n    }\n};\n","/* globals Tour*/\n\nTour.mouseEvents = {};\n\nTour.mouseEvents._setCinetic = function(event) {\n    if (\n        (event.clientX || event.clientY) &&\n        (event.scale == undefined || event.scale == 1) &&\n        (event.touches == undefined || event.touches.length == 1) &&\n        !(this.previousEvent.clientX == event.clientX && this.previousEvent.clientY == event.clientY)\n    ) {\n        var alpha = Tour.view.fov.value / Tour.options.initFov / Tour.options.mouseSensitivity;\n        this.cineticLon = (event.clientX - this.previousEvent.clientX) * alpha;\n        this.cineticLat = (event.clientY - this.previousEvent.clientY) * alpha;\n    } else if (event.timeStamp - this.previousEvent.timeStamp > 20) {\n        this.cineticLon = this.cineticLat = 0;\n    }\n    this.previousEvent = event;\n};\n\nTour.mouseEvents._touches2mouse = function(event) {\n    if (event.touches  && event.touches.length) {\n        event.clientX = event.touches[0].pageX * window.devicePixelRatio;\n        event.clientY = event.touches[0].pageY * window.devicePixelRatio;\n\n        if (event.defaultPrevented) {\n            event.preventDefault();\n        }\n    }\n};\n\nTour.mouseEvents.wheel = function(event) {\n\n    var isIframe = !(window.parent && window.parent == window);\n\n    if (\n        this.options.scaleControl &&\n        (this.options.iFrameScaleControl || !isIframe) &&\n        event.composed && event.deltaY\n    ) {\n        this.controls.autoRotate(false);\n        if (event.defaultPrevented) {\n            event.preventDefault();\n        }\n        this.view.fov.move(event.deltaY * (event.deltaMode ? 10 / 3 : 0.1));\n\n        clearTimeout(this.mouseEvents.zoomTimeout);\n\n        this.mouseEvents.zoomTimeout = setTimeout(function() {\n            Tour.history.set();\n        }, 300);\n    }\n};\n\nTour.mouseEvents.down = function(event) {\n    if (this.options.touchScroll && event.type == 'touchstart') {\n        return false;\n    }\n    if (event.which == 2) {\n        event.preventDefault();\n        return false;\n    }\n\n    this.mouseEvents._touches2mouse(event);\n\n    this.mouseEvents.drag = true;\n    this.controls.autoRotate(false);\n    this.mouseEvents.previousEvent = event;\n    Tour.emmit('touchstart');\n};\n\nTour.mouseEvents.move = function(event) {\n    if (this.mouseEvents.drag && (event.touches ? this.options.touchDrag : true)) {\n        this.mouseEvents._touches2mouse(event);\n\n        var alpha = 4.5 / (Math.PI / Math.tan((Tour.view.fov.value/ 180 * Math.PI) / 2)) / Tour.options.mouseSensitivity;\n        this.view.lon.set(this.view.lon.value + (event.clientX - this.mouseEvents.previousEvent.clientX) * alpha);\n        this.view.lat.set(this.view.lat.value + (event.clientY - this.mouseEvents.previousEvent.clientY) * alpha);\n        this.mouseEvents._setCinetic(event);\n        Tour.emmit('touchmove');\n    }\n};\n\nTour.mouseEvents.up = function(event) {\n    if (this.mouseEvents.drag) {\n        this.mouseEvents._touches2mouse(event);\n        this.mouseEvents._setCinetic(event);\n\n        this.view.rotation.lat = this.mouseEvents.cineticLat;\n        this.view.rotation.lon = this.mouseEvents.cineticLon;\n\n        this.history.set();\n        Tour.emmit('touchend');\n    }\n\n    this.mouseEvents.cineticLon = this.mouseEvents.cineticLat = 0;\n    this.mouseEvents.drag = false;\n};\n\nTour.mouseEvents.gesturestart = function(event) {\n    this.mouseEvents.startFov = Tour.view.fov.value;\n    event.preventDefault();\n};\n\nTour.mouseEvents.gesturechange = function(event) {\n    function degToRad(deg) { return deg / 180 * Math.PI; }\n    function radToDeg(rad) { return rad / Math.PI * 180; }\n\n    var a = 1 / (Math.PI / Math.tan(degToRad(this.mouseEvents.startFov) / 2));\n    Tour.view.fov.set(radToDeg(2 * Math.atan((a / event.scale) / 1 * Math.PI)));\n    event.preventDefault();\n};\n","/* globals Tour */\n\nTour.options = {};\n\nTour.options.set = function(options) {\n    if (typeof options === 'object') {\n        for (var k in options) {\n            this[k] = options[k];\n        }\n    }\n};\n\nObject.defineProperty(Tour.options, 'set', {enumerable: false});\n","/* globals THREE, Tour, UI */\n\nTour.orientationControls = {\n    init: function() {\n        if (window.isSecureContext) {\n            this.controls = new THREE.DeviceOrientationControls(Tour.camera);\n            this.controls.disconnect();\n            window.addEventListener('deviceorientation', this.detectDevice);\n        }\n    },\n    detectDevice: function(event) {\n        if (event.alpha) {\n            UI.controlPanel.addBtn('rotate', Tour.controls.toggleControls, '');\n        }\n        window.removeEventListener('deviceorientation', Tour.orientationControls.detectDevice);\n    }\n};\n","/* globals Tour */\n\nTour.query = {};\n\n/**\n * Парсит location.search\n *\n * @return {Object} Объект запросов\n */\n\nTour.query.list = {};\n\nTour.query.get = function() {\n    var search = location.search.slice(1).split('&');\n\n    for (var i = 0; i < search.length; i++) {\n        var querie = search[i].split('=');\n        if (querie[0]) {\n            if (querie[1] === undefined || querie[1] == 'true') {\n                querie[1] = true;\n            }\n            if (querie[1] == 'false') {\n                querie[1] = false;\n            }\n            this.list[querie[0]] = querie[1];\n        }\n    }\n    return this.list;\n};\n\nTour.query.set = function(values) {\n    var query = [];\n    for (var k in values) {\n        this.list[k] = values[k];\n    }\n    for (var k in this.list) {\n        query.push(this.list[k] !== true ? k + '=' + this.list[k] : k);\n    }\n    return '?' + query.join('&');\n};\n","/* globals Tour, UI, THREE*/\n\nTour.render = function() {\n\n    var compare = function(a, b) {\n        return !(Math.abs(a - b) < 1e-4);\n    };\n\n    if (!this.previousCamera || this.needsUpdate ||\n        compare(this.camera.rotation.x, this.previousCamera.x) ||\n        compare(this.camera.rotation.y, this.previousCamera.y) ||\n        compare(this.camera.rotation.z, this.previousCamera.z) ||\n        compare(this.camera.fov,        this.previousCamera.f)\n    ) {\n        var n = Date.now();\n        this.renderer.render(this.scene, this.camera);\n        this.renderers.forEach(function(render) {\n            render.renderer.render(render.scene || this.scene, render.camera || this.camera);\n        }.bind(this));\n        if (window.isSecureContext) {\n            UI.controlPanel.setOrientation(Math.floor(THREE.Math.radToDeg(Tour.camera.rotation.z)));\n        }\n\n        if (this.markers) {\n            this.markers.forEach(function(marker) {\n                marker.draw();\n            });\n        }\n        this.needsUpdate = false;\n        if (this.videos) {\n            for (k in this.videos) {\n                this.videos[k].draw();\n            }\n        }\n        Tour.emmit('render');\n    }\n\n    this.previousCamera = (new THREE.Vector4()).copy(this.camera.rotation);\n    this.previousCamera.f = this.camera.fov;\n\n};\n","/* globals Tour */\n\nTour.resize = function() {\n    var width = Math.max(window.innerWidth, document.documentElement.scrollWidth);\n    var height = Math.max(window.innerHeight, document.documentElement.scrollHeight);\n\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n\n    this.clientWidth = width;\n    this.clientHeight = height;\n\n    this.renderer.setSize(width, height);\n\n    if (this.renderer.setPixelRatio) {\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n    }\n    this.needsUpdate = true;\n    Tour.emmit('resize');\n};\n","/* globals Tour */\n\nTour.sentry = function() {\n    var script = document.createElement('script');\n    script.src = 'https://browser.sentry-cdn.com/4.2.2/bundle.min.js';\n    script.crossorigin = 'anonymous';\n    document.head.appendChild(script);\n\n    script.onload = function() {\n        Sentry.init(Tour.options.sentry);\n        Sentry.configureScope(function(scope) {\n            scope.setTag('player.version', Tour.version.join('.'));\n            scope.setTag('player.renderer', Tour.options.rendererType);\n            scope.setTag('player.gallery', Tour.options.gallery);\n            scope.setTag('player.mouseMenu', Tour.options.mouseMenu);\n            scope.setTag('player.controlPanel', Tour.options.controlPanel);\n        });\n    };\n};\n","/* globals UI, Tour, Lang */\n\nTour.setControlPanel = function(data) {\n\n\n    if (this.options.controlPanel !== undefined) {\n\n        if (data.type === \"custom\")\n        {\n            UI.controlPanelBig.init(this.options.controlPanel);\n            UI.controlPanelBig.addBtn('unmute',         Tour.controls.mute,         'Mute');\n            UI.controlPanelBig.addBtn('fullscreen',     Tour.controls.fullscreen,   'Full Screen');\n            UI.controlPanelBig.addBtn('hall',           Tour.controls.gohome,       'Diamond Hall');\n            \n            if (data.microsite !== undefined) {\n                UI.controlPanelBig.addBtn('microsite',      Tour.controls.microsite,       'Microsite');\n            }\n        }\n        else\n        {\n            UI.controlPanel.init(this.options.controlPanel);\n            UI.controlPanel.addBtn('left',       Tour.controls.moveLeft,       Lang.get('control.left'));\n            UI.controlPanel.addBtn('right',      Tour.controls.moveRight,      Lang.get('control.right'));\n            UI.controlPanel.addBtn('up',         Tour.controls.moveUp,         Lang.get('control.up'));\n            UI.controlPanel.addBtn('down',       Tour.controls.moveDown,       Lang.get('control.down'));\n            UI.controlPanel.addBtn('zoom-in',    Tour.controls.zoomIn,         Lang.get('mousemenu.zoomin'));\n            UI.controlPanel.addBtn('zoom-out',   Tour.controls.zoomOut,        Lang.get('mousemenu.zoomout'));\n            UI.controlPanel.addBtn('fullscreen', Tour.controls.fullscreen,     Lang.get('mousemenu.fullscreen'));\n        }\n\n    }\n\n};\n","/* globals UI, Tour, Lang */\nTour.setGallery = function(data, visible) {\n\n    if (this.options.gallery) {\n        UI.gallery.init(visible);\n\n        data.panorams.map(function(pano) {\n            if (pano.listNumber !== 0) {\n                UI.gallery.addItem({\n                    id: pano.id,\n                    image: 'panorams/' + pano.id + '/thumbnail/mini.jpg',\n                    title: Lang.translate(pano.title),\n                    onclick: function() {\n                        Tour.view.set(pano);\n                    }\n                });\n            }\n        });\n\n        UI.gallery.setActive(Tour.view.id);\n\n        Tour.on('changeView', function(view) {\n            UI.gallery.setActive(view.id);\n        });\n    }\n};\n","/* globals Tour, Lang, UI */\n\n\n\nTour.setMarkers = function(id) {\n\n    if (this.markers) {\n        this.markers.forEach(function(marker) {\n            marker.remove();\n        });\n    }\n\n    this.markers = [];\n    var pano = this.getPanorama(id);\n    var markers = pano && pano.markers;\n\n    if (markers) {\n        /* Типы действий\n         * github.com/Tour-360/tour-player/wiki/Формат-файла-manifest.json#action\n         */\n\n        if (pano.bgm !== undefined) {\n\n            var bgmid = pano.bgm.id;\n            var volume = pano.bgm.volume;\n            var panoid = pano.id;\n\n            if (bgmState)\n            {\n                if (this.currentBGM == '') {\n                    console.log('now playing', bgmid)\n                    bgmplayer[panoid].play();\n                    bgmplayer[panoid].volume = volume;\n                    bgmplayer[panoid].loop = true;\n                    this.currentBGM = panoid;\n\n                    bgmCurrent = panoid;\n                }\n                else if (this.currentBGM != panoid)\n                {\n                    console.log('change bgm to', bgmid)\n                    bgmplayer[this.currentBGM].pause();\n                    bgmplayer[panoid].play();\n                    bgmplayer[panoid].volume = volume;\n                    bgmplayer[panoid].loop = true;\n                    this.currentBGM = panoid;\n\n                    bgmCurrent = panoid;\n                } else {\n\n                    \n                    \n                }\n            }\n            else \n            {\n                this.currentBGM = panoid;\n                bgmCurrent = panoid;\n            }\n            \n        }\n\n        var action = function(marker) {\n\n            if (marker.sound !== undefined) {\n                var sfx = document.getElementById(marker.sound); \n                sfx.play()\n            }\n\n            if (this.type == 'panorama') {\n                Tour.view.set(this, null, Math.abs(Tour.view.lat.value) < 45);\n            } else if (this.type == 'popnorama') {\n\n                Tour.view.set(this, null, Math.abs(Tour.view.lat.value) < 45);\n                UI.popUp.set(this.popupid);\n\n            } else if (this.type == 'url') {\n                window.open(this.href, this.target || '_blank');\n            } else if (this.type == 'action') {\n               document.getElementById(this.id).click();\n            } else if (this.type == 'popup') {\n                UI.popUpLg.set(this.id);\n            } else if (this.type == 'window') {\n\n            } else if (this.type == 'change') {\n                this.click = this.click + 1 || 0;\n                Tour.backgroundImage.transitionStart(function() {\n                    if (Array.isArray(marker.title)) {\n                        Tour.markers[marker.index].setTitle(\n                            Lang.translate(marker.title[this.click % marker.title.length])\n                        );\n                    }\n                    var manager = new Tour.LoadingManager();\n                    manager.onprogress = function(event) {\n                        UI.controlPanel.setProgress(event.progress);\n                    };\n                    manager.onload = function() {\n                        Tour.backgroundImage.transitionEnd();\n                    };\n                    for (var k in this.planes) {\n                        var planeId = this.planes[k][this.click % this.planes[k].length];\n                        var imgeURL = Tour.options.path + id + '/' + Tour.options.imageType + '/' + planeId + '.jpg';\n\n                        Tour.setPlane(k, imgeURL, manager);\n                    }\n                }.bind(this));\n            } \n        };\n\n        for (var i = 0; i < markers.length; i++) {\n\n            var m = markers[i];\n\n            var marker = new this.Marker(\n                m.lat,\n                m.lon,\n                action.bind(m.action, m)\n            );\n\n            var title = (Array.isArray(m.title) ? m.title[m.title.length - 1] : m.title) ||\n                (markers[i].action.type == 'panorama' && this.getPanorama(m.action.id).title) || \n                (markers[i].action.type == 'popnorama' && this.getPanorama(m.action.id).title);\n\n            if (!BrouserInfo.mobile) {\n                marker.setTitle(Lang.translate(title));\n            }\n            marker.setIcon(m.icon || \n                (m.action && markers[i].action.type == 'panorama' ? 'up' : 'info') ||\n                (m.action && markers[i].action.type == 'popnorama' ? 'up' : 'info'));\n\n            marker.setSound(m.sound);\n\n            m.index = this.markers.push(marker) - 1;\n        }\n    }\n};\n","/* globals Tour, Lang, UI */\n\nTour.setMesh = function(id) {\n    if (this.meshs) {\n        this.meshs.forEach(function(mesh) {\n            if (mesh._videoId) {\n                Tour.videos[mesh._videoId].needsUpdate = false;\n            }\n            Tour.scene.remove(mesh);\n        });\n    }\n\n    this.meshs = [];\n    var pano = this.getPanorama(id);\n    var videos = pano && pano.videos;\n\n    if (videos) {\n        for (var i = 0; i < videos.length; i++) {\n            var options = videos[i];\n\n            //console.log(options.videoId)\n\n            if (Tour.options.rendererType == 'css') {\n                var video = new THREE.Object3D();\n                var object = new THREE.CSS3DObject(Tour.videos[options.videoId].videoElement);\n                video.add(object);\n                video.scale.set(\n                    options.scale.x / 512,\n                    options.scale.y / 512,\n                    options.scale.z\n                );\n            } else {\n                var plane = new THREE.PlaneGeometry(1, 1, 1, 1);\n                var video = new THREE.Mesh(plane, Tour.videos[options.videoId].material);\n                var alpha = Tour.videos[options.videoId].canvas.height / Tour.videos[options.videoId].canvas.width;\n                video.scale.set(\n                    options.scale.x * Tour.videos[options.videoId].texture.repeat.x,\n                    options.scale.y * Tour.videos[options.videoId].texture.repeat.y * alpha,\n                    options.scale.z\n                );\n            }\n            Tour.videos[options.videoId].needsUpdate = true;\n            video.position.set(options.position.x, options.position.y, options.position.z);\n            video.rotation.set(options.rotation.x, options.rotation.y, options.rotation.z);\n            video._videoId = options.videoId;\n            this.meshs.push(video);\n            Tour.scene.add(video);\n        }\n    }\n\n    var images = this.data.panorams && this.data.panorams[id] && this.data.panorams[id].images;\n    if (images) {\n        for (var i = 0; i < images.length; i++) {\n            var options = images[i];\n            var plane = new THREE.PlaneGeometry(1, 1, 1, 1);\n            var image = new THREE.Mesh(plane, Tour.images[options.imageId].material);\n\n            var alpha = Tour.images[options.imageId].height / Tour.images[options.imageId].width;\n            image.position.set(options.position.x, options.position.y, options.position.z);\n            image.rotation.set(options.rotation.x, options.rotation.y, options.rotation.z);\n            image.scale.set(options.scale.x, options.scale.y * alpha, options.scale.z);\n            image._imageId = options.imageId;\n            this.meshs.push(image);\n            Tour.scene.add(image);\n        }\n    }\n};\n","/* globals Tour, Lang, UI, BrouserInfo */\n\nTour.setMouseMenu = function() {\n    if (this.options.mouseMenu) {\n        UI.mouseMenu.init();\n\n        var itemList = [];\n        var info = 'Tour-Player v' + Tour.version.join('.') + ' (' +\n        {webgl: 'WebGL', css: 'CSS', canvas: 'Canvas'}[this.options.rendererType] + 'Renderer)';\n\n        var Item = UI.mouseMenu.Item;\n        var ctrl = this.controls;\n\n        var apple = BrouserInfo.apple;\n        var metaKey = apple ? '⌘' : 'Ctrl+';\n        var reloadKey = apple ? '⌘R' : 'F5';\n        var backBtn    = apple ? '[' : Lang.get('mousemenu.back');\n        var forwardBtn = apple ? ']' : Lang.get('mousemenu.forward');\n\n        itemList.push(new Item(ctrl.back, Lang.get('mousemenu.back'), metaKey + backBtn));\n        itemList.push(new Item(ctrl.forward, Lang.get('mousemenu.forward'), metaKey + forwardBtn));\n        itemList.push(new Item(ctrl.reload, Lang.get('mousemenu.reload'), apple ? '⌘R' : 'F5'));\n\n        itemList.push(new UI.mouseMenu.Hr());\n        itemList.push(new Item(ctrl.zoomIn, Lang.get('mousemenu.zoomin'), 'Shift, +'));\n        itemList.push(new Item(ctrl.zoomOut, Lang.get('mousemenu.zoomout'), 'Ctrl, -'));\n        itemList.push(new Item(ctrl.autoRotate, Lang.get('mousemenu.autorotate'), 'R, ' + Lang.get('key.spase')));\n        itemList.push(new Item(ctrl.fullscreen, Lang.get('mousemenu.fullscreen'), apple ? '⌘⇧F' : 'F11'));\n\n        if (this.options.rendererType != 'css') {\n            itemList.push(new UI.mouseMenu.Hr());\n            itemList.push(new Item(ctrl.download, Lang.get('mousemenu.saveimage'), metaKey + 'S'));\n        }\n\n        itemList.push(new UI.mouseMenu.Hr());\n        this.toggleMenuItem = new Item(ctrl.toggleMenu, Lang.get('mousemenu.hidemenu'), 'M');\n        itemList.push(this.toggleMenuItem);\n        itemList.push(new Item(ctrl.getCode, Lang.get('mousemenu.getcode')));\n        itemList.push(new Item(ctrl.opennewtab, Lang.get('mousemenu.newtab')));\n        itemList.push(new Item(ctrl.visitSite, Lang.get('mousemenu.visitsite') + ' tour-360.ru'));\n\n        itemList.push(new UI.mouseMenu.Hr());\n        itemList.push(new UI.mouseMenu.Item(false, info));\n        itemList[itemList.length - 1].setDisable(true);\n\n    } else if (this.options.mouseMenu !== undefined) {\n        document.addEventListener('contextmenu', function(event) {\n            event.preventDefault();\n        });\n    }\n};\n","/* globals Tour */\n\n/**\n * Переключает тур на указанную панораму\n *\n * @param {Number} id идентификатор панорамы\n */\nTour.setPanorama = function(id, zoomin) {\n    Tour.backgroundImage.transitionStart(function() {\n        Tour.mesh.rotation.set(0, Math.PI / 2 - ((this.getPanorama(id).heading || 0) / 180 * Math.PI), 0);\n        this.setTexture(id);\n        this.setMarkers(id);\n        this.setMesh(id);\n        var panorama = this.getPanorama(id);\n        this.view.rotation.auto = panorama.autorotation !== false &&\n            (panorama.autorotation || this.data.autorotation);\n    }.bind(this), zoomin);\n};\n","/* globals Tour, THREE, UI, Lang*/\n\n/**\n * Устанавливает текстуру одной стороны куба\n *\n * @param {Number} id идентификатор стороны\n * @param {String} url путь к изображению\n */\nTour.setPlane = function(id, url, manager) {\n    if (this.options.rendererType == 'css') {\n        this.mesh.children[id].element.src = url;\n    } else {\n        var loader = new Tour.ImageBitmapLoader(manager);\n        loader.load(url, function(img) {\n            var texture = new THREE.CanvasTexture(img);\n            texture.needsUpdate = true;\n            Tour.mesh.material[id].map = texture;\n            Tour.needsUpdate = true;\n        }, null, function() {\n            UI.notification.show(Lang.get('notification.error-load-img'));\n        });\n    }\n};\n","/* globals Tour, THREE, BrouserInfo*/\n\n/**\n * Устанавливет указанный тип редеринга,\n * если тип неуказан, подбирает подходящий.\n * если не одна из технологий не поддерживается,\n * предлогает обновить браузер.\n *\n * @param {String} rendererType тип рендерига ('webgl', 'css', 'canvas')\n * @param {String} imageType размер изображения ('low', 'standard')\n */\nTour.setRenderer = function(rendererType, imageType) {\n    this.options.rendererType = rendererType || this.getRenderer();\n    this.options.imageType = imageType ||\n        (BrouserInfo.mobile || this.options.rendererType == 'canvas') ? 'low' : 'standard';\n\n    if (this.options.rendererType == 'webgl') {\n        this.renderer = new THREE.WebGLRenderer({ antialias: false, preserveDrawingBuffer: true, alpha: false});\n    } else if (this.options.rendererType == 'css') {\n        this.renderer = new THREE.CSS3DRenderer();\n    } else if (this.options.rendererType == 'canvas') {\n        this.renderer = new THREE.CanvasRenderer({alpha: false});\n    } else {\n        this.controls.badBrowser();\n        return false;\n    }\n\n    this.renderer.sortObjects = false;\n    this.renderer.domElement.id = 'renderer';\n    this.renderers = [];\n};\n","/* globals Tour, Lang, UI */\n\nTour.setSliders = function() {\n    var sliders = document.querySelectorAll('.slider');\n    this.sliders = [];\n    for (var i = 0; i < sliders.length; i++) {\n        if (sliders[i].children.length > 1) {\n            this.sliders.push(new UI.Slider(sliders[i]));\n        }\n    }\n};\n\n\nTour.setSlidersLg = function() {\n    var sliders = document.querySelectorAll('.slider');\n    this.sliders = [];\n    for (var i = 0; i < sliders.length; i++) {\n        if (sliders[i].children.length > 1) {\n            this.sliders.push(new UI.SliderLg(sliders[i]));\n        }\n    }\n};\n","/* globals Tour, THREE, UI, Lang */\n\n/**\n * Устанавливает текстуру указанной панорамы\n *\n * @param {Number} id идентификатор панорамы\n */\nTour.setTexture = function(id) {\n    UI.controlPanel.setProgress(0);\n\n    if (this.loadingManager) {\n        this.loadingManager.abort();\n    }\n\n    this.loadingManager = new Tour.LoadingManager();\n    this.loadingManager.onprogress = function(event) {\n        UI.controlPanel.setProgress(event.progress);\n    };\n    this.loadingManager.onerror = function() {\n        UI.notification.show(Lang.get('notification.error-load-pano'));\n    };\n\n    var loader = new THREE.ImageLoader();\n    loader.load(this.options.path + id + '/thumbnail/0.jpg', function(img) {\n\n        this.backgroundImage.transitionEnd();\n\n        var canvas = document.createElement('canvas');\n        canvas.width = img.width;\n        canvas.height = img.height;\n        var ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n\n        var faces = this.detectFaceInCamera();\n\n        for (var i = 0; i < 6; i++) {\n            var planeId = this.options.tileset[i];\n            var imgeURL = this.options.path + id + '/' + this.options.imageType + '/' + planeId + '.jpg';\n            var tile = ctx.getImageData(planeId * img.height, 0, img.height, img.height);\n\n            if (this.options.rendererType == 'css') {\n                var tempcanvas = document.createElement('canvas');\n                tempcanvas.width = tempcanvas.height = img.height;\n                var tempctx = tempcanvas.getContext('2d');\n                tempctx.putImageData(tile, 0, 0);\n                this.mesh.children[i].element.src = tempcanvas.toDataURL('image/jpeg');\n            } else {\n                var texture = new THREE.Texture(tile);\n                texture.needsUpdate = true;\n                this.needsUpdate = true;\n                this.mesh.material[i].map = this.options.rendererType != 'canvas' ? texture : tile;\n            }\n\n            setTimeout(function(i, imgeURL, manager) {\n                this.setPlane(i, imgeURL, manager);\n            }.bind(this, i, imgeURL, this.loadingManager), (100 - faces[i]));\n        }\n    }.bind(this), undefined, function() {\n        UI.notification.show(Lang.get('notification.error-load-pano'));\n    });\n};\n","/* globals Tour */\n\n/**\n * Создает на странице видео элементы\n *\n * @param {Number} videos Объект описания видео\n */\nTour.setVideos = function(videos) {\n    this.videos = {};\n    if (videos) {\n        for (var i = 0; i < videos.length; i++) {\n            this.videos[videos[i].id] = new Tour.Video(videos[i]);\n        }\n    }\n};\n\n// TODO: Вынести и переписать на map\nTour.setImages = function(images) {\n    this.images = {};\n    if (images) {\n        for (var i = 0; i < images.length; i++) {\n            this.images[images[i].id] = new Tour.Image(images[i]);\n        }\n    }\n};\n","/* globals Tour*/\n\nTour.Transition = function(value, options) {\n    this.set(value);\n\n    this.speed = 8;\n    this.max = false;\n    this.min = false;\n    this.limit = false;\n\n    this.setOptions(options);\n};\n\nTour.Transition.prototype.setOptions = function(options) {\n    for (var k in options) {\n        this[k] = options[k];\n    }\n    this.value = this.moveTo(this.value);\n};\n\nTour.Transition.prototype.set = function(value) {\n    this.value = this.moveTo(value);\n    Tour.emmit('moveview');\n};\n\nTour.Transition.prototype.move = function(value, noanim) {\n    if (value) {\n        this.moveTo(this.follow + value, noanim);\n    }\n    return this.follow;\n};\n\nTour.Transition.prototype.moveTo = function(value, noanim) {\n    this.follow = Math.max(this.min || -Infinity, Math.min(this.max || Infinity, value));\n    if (noanim) {\n        this.value = this.follow;\n    }\n    return this.follow;\n};\n\nTour.Transition.prototype.animate = function() {\n    var alpha = (this.value - this.follow) / this.speed;\n    if (Math.abs(alpha) > 1e-5) {\n        this.value -= (this.value - this.follow) / this.speed;\n        Tour.emmit('moveview');\n    } else {\n        this.value = this.follow;\n    }\n};\n\nTour.Transition.prototype.toString = function() {\n    return parseFloat((this.limit ? this.follow % this.limit : this.follow).toFixed(2));\n};\n","/* globals Tour, THREE*/\n\nTour.Video = function(options) {\n\n    \n    this.videoElement = document.createElement('video');\n    this.videoElement.preload = options.preload || 'none';\n    this.videoElement.src = ((BrouserInfo.mobile && Tour.options.mobileVideoScale)? options.src.replace('.', '@'+Tour.options.mobileVideoScale+'.'):options.src) + Tour.getRandomQuery();\n\n    this.videoElement.setAttribute(\"playsinline\", true);\n    this.videoElement.setAttribute(\"loop\", options.loop == undefined ? true : false);\n    this.videoElement.setAttribute(\"muted\", options.muted == undefined ? true : false);\n    this.videoElement.setAttribute(\"autoplay\", options.autoplay || false);\n    this.videoElement.setAttribute(\"preload\", 'none');\n    this.videoElement.setAttribute(\"crossOrigin\", \"anonymous\");\n\n    var _this = this;\n\n    var sync = function() {\n        if (_this.videoElement.duration && _this.needsUpdate) {\n            _this.videoElement.currentTime = (Date.now() / 1000) % _this.videoElement.duration;\n        }\n    };\n\n    if (options.sync) {\n        clearTimeout(this.syncTimeout);\n\n        Tour.on('changeView', function() {\n            _this.syncTimeout = setTimeout(sync, 2000);\n        });\n\n        this.syncInterval = setInterval(sync, 10000);\n    }\n\n    // if(options.autoplay){\n    //     this.videoElement.play();\n    // }\n    this.videoElement.pause();\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = Math.pow(2, Math.ceil(Math.log(options.width) / Math.log(2)));\n    this.canvas.height = Math.pow(2, Math.ceil(Math.log(options.height) / Math.log(2)));\n\n    this.ctx = this.canvas.getContext('2d');\n\n    this.texture = new THREE.Texture(this.canvas);\n    this.texture.repeat.x = options.width / this.canvas.width;\n    this.texture.repeat.y = options.height / this.canvas.height;\n    this.texture.offset.y = 1 - this.texture.repeat.y;\n    this.texture.needsUpdate = true;\n    this.needsUpdate = false;\n\n    this.material = new THREE.MeshBasicMaterial({map: this.texture, transparent: true});\n};\n\nTour.Video.prototype.draw = function() {\n    if (this.needsUpdate) {\n        this.videoElement.play();\n        if (Tour.options.rendererType != 'css') {\n            this.ctx.drawImage(this.videoElement, 0, 0);\n        }\n        this.texture.needsUpdate = true;\n        Tour.needsUpdate = true;\n    } else {\n        this.videoElement.pause();\n    }\n};\n","/* globals Tour*/\n\n/**\n * Параметры посмотра\n * поворот камеры, угол обзора, id текущей панорамы\n * @type {Object}\n */\nTour.view = {};\n\nTour.view.set = function(options, replaceHistory, zoom) {\n\n    options = options || {};\n\n    this.fov = new Tour.Transition(options.fov || this.fov || Tour.options.initFov, Tour.options.limit.fov);\n    this.lat = new Tour.Transition(options.lat || this.lat || 0, Tour.options.limit.lat);\n    this.lon = new Tour.Transition(options.lon || this.lon || 0, Tour.options.limit.lon);\n\n    this.lon.limit = 360;\n\n    this.rotation = {lon: 0, lat: 0, auto: false};\n    Object.defineProperty(this, 'rotation', {enumerable: false});\n\n    if (this.id != options.id && options.id !== undefined) {\n        this.id = options.id;\n        Tour.setPanorama(this.id, zoom);\n    }\n    Tour.history.set(!replaceHistory);\n\n    var panorama;\n    for (var k in this) {\n        if (k != 'id') {\n            panorama = Tour.getPanorama(this.id);\n            this[k].setOptions(\n                (panorama && panorama.limit && panorama.limit[k]) ||\n                (Tour.data.limit && Tour.data.limit[k]) ||\n                Tour.options.limit[k]\n            );\n        }\n    }\n    Tour.emmit('changeView', Tour.view.get());\n};\n\nTour.view.go = function(step) {\n    var index = Tour.data.panorams.indexOf(Tour.getPanorama(Tour.view.id));\n    index += step;\n    index = index % Tour.data.panorams.length;\n\n    if (index < 0) {\n        index = Tour.data.panorams.length + index;\n    }\n\n    Tour.view.set({id: Tour.data.panorams[index].id});\n};\n\nTour.view.get = function() {\n    var view = {};\n    for (var k in this) {\n        view[k] = typeof this[k] == 'object' ? this[k].follow : this[k];\n    }\n    return JSON.parse(JSON.stringify(view));\n};\n\nObject.defineProperty(Tour.view, 'set', {enumerable: false});\nObject.defineProperty(Tour.view, 'get', {enumerable: false});\nObject.defineProperty(Tour.view, 'go', {enumerable: false});\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( 'name' in Function.prototype === false ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t}\n\n\tvar REVISION = '115';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\n\tvar TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar Uncharted2ToneMapping = 3;\n\tvar CineonToneMapping = 4;\n\tvar ACESFilmicToneMapping = 5;\n\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar SphericalReflectionMapping = 305;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RedIntegerFormat = 1029;\n\tvar RGFormat = 1030;\n\tvar RGIntegerFormat = 1031;\n\tvar RGBIntegerFormat = 1032;\n\tvar RGBAIntegerFormat = 1033;\n\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGB_ETC2_Format = 37492;\n\tvar RGBA_ETC2_EAC_Format = 37496;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar RGBA_BPTC_Format = 36492;\n\tvar SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tvar SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tvar SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tvar SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tvar SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tvar SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tvar SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tvar SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tvar SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tvar SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tvar SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tvar SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tvar SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tvar SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { this._listeners = {}; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return false; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author thezwap\n\t */\n\n\tvar _lut = [];\n\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n\t}\n\n\tvar MathUtils = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\t\treturn uuid.toUpperCase();\n\n\t\t},\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tceilPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tfloorPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tsetQuaternionFromProperEuler: function ( q, a, b, c, order ) {\n\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c2 = cos( b / 2 );\n\t\t\tvar s2 = sin( b / 2 );\n\n\t\t\tvar c13 = cos( ( a + c ) / 2 );\n\t\t\tvar s13 = sin( ( a + c ) / 2 );\n\n\t\t\tvar c1_3 = cos( ( a - c ) / 2 );\n\t\t\tvar s1_3 = sin( ( a - c ) / 2 );\n\n\t\t\tvar c3_1 = cos( ( c - a ) / 2 );\n\t\t\tvar s3_1 = sin( ( c - a ) / 2 );\n\n\t\t\tif ( order === 'XYX' ) {\n\n\t\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\n\t\t\t} else if ( order === 'YZY' ) {\n\n\t\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\n\t\t\t} else if ( order === 'ZXZ' ) {\n\n\t\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\n\t\t\t} else if ( order === 'XZX' ) {\n\n\t\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\n\t\t\t} else if ( order === 'YXY' ) {\n\n\t\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\n\t\t\t} else if ( order === 'ZYZ' ) {\n\n\t\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t}\n\n\tObject.defineProperties( Vector2.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.x = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.y = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tisVector2: true,\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tcross: function ( v ) {\n\n\t\t\treturn this.x * v.y - this.y * v.x;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( throwOnDegenerate !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) { return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 ); }\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp, m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\t\tvar c = Math.cos( rotation );\n\t\t\tvar s = Math.sin( rotation );\n\n\t\t\tthis.set(\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t\t0, 0, 1\n\t\t\t);\n\n\t\t},\n\n\t\tscale: function ( sx, sy ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotate: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta );\n\t\t\tvar s = Math.sin( theta );\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\t\tte[ 0 ] = c * a11 + s * a21;\n\t\t\tte[ 3 ] = c * a12 + s * a22;\n\t\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( tx, ty ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\n\t\tgetDataURL: function ( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\t\treturn image.src;\n\n\t\t\t} else if ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tif ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }\n\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\t\t\tthis.center.copy( source.center );\n\t\t\tthis.rotation = source.rotation;\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy( source.matrix );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tvar output = {\n\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\t\trotation: this.rotation,\n\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY,\n\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// process single image\n\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject ) {\n\n\t\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) { return uv; }\n\n\t\t\tuv.applyMatrix3( this.matrix );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t\treturn uv;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.defineProperties( Vector4.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.z = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.w = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) { s = 1; }\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\t\t\tthis.w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tthis.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.texture.image = {};\n\t\tthis.texture.image.width = width;\n\t\tthis.texture.image.height = height;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: WebGLRenderTarget,\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author Matt DesLauriers / @mattdesl\n\t */\n\n\tfunction WebGLMultisampleRenderTarget( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.samples = 4;\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\t\tconstructor: WebGLMultisampleRenderTarget,\n\n\t\tisWebGLMultisampleRenderTarget: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\t\tthis.samples = source.samples;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function ( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Quaternion.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tw: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._w = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\n\t\tisQuaternion: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c1 = cos( x / 2 );\n\t\t\tvar c2 = cos( y / 2 );\n\t\t\tvar c3 = cos( z / 2 );\n\n\t\t\tvar s1 = sin( x / 2 );\n\t\t\tvar s2 = sin( y / 2 );\n\t\t\tvar s3 = sin( z / 2 );\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t\t} else {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function ( vFrom, vTo ) {\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\tvar r = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tangleTo: function ( q ) {\n\n\t\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t\t},\n\n\t\trotateTowards: function ( q, step ) {\n\n\t\t\tvar angle = this.angleTo( q );\n\n\t\t\tif ( angle === 0 ) { return this; }\n\n\t\t\tvar t = Math.min( 1, step / angle );\n\n\t\t\tthis.slerp( q, t );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tinverse: function () {\n\n\t\t\t// quaternion is assumed to have unit length\n\n\t\t\treturn this.conjugate();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) { return this; }\n\t\t\tif ( t === 1 ) { return this.copy( qb ); }\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\t\tthis.normalize();\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index ) {\n\n\t\t\tthis._x = attribute.getX( index );\n\t\t\tthis._y = attribute.getY( index );\n\t\t\tthis._z = attribute.getZ( index );\n\t\t\tthis._w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector = new Vector3();\n\tvar _quaternion = new Quaternion();\n\n\tfunction Vector3( x, y, z ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\n\t}\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\n\n\t\t},\n\n\t\tapplyAxisAngle: function ( axis, angle ) {\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\treturn this.applyMatrix3( m ).normalize();\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t\t},\n\n\t\tunproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\t// TODO lengthSquared?\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\treturn this.crossVectors( this, v );\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( v ) {\n\n\t\t\tvar denominator = v.lengthSq();\n\n\t\t\tif ( denominator === 0 ) { return this.set( 0, 0, 0 ); }\n\n\t\t\tvar scalar = v.dot( this ) / denominator;\n\n\t\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function ( planeNormal ) {\n\n\t\t\t_vector.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( _vector );\n\n\t\t},\n\n\t\treflect: function ( normal ) {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t},\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\t\tif ( denominator === 0 ) { return Math.PI / 2; }\n\n\t\t\tvar theta = this.dot( v ) / denominator;\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function ( s ) {\n\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t\t},\n\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\t\tthis.y = Math.cos( phi ) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCylindrical: function ( c ) {\n\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t\t},\n\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\n\n\t\t\tthis.x = radius * Math.sin( theta );\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 12 ];\n\t\t\tthis.y = e[ 13 ];\n\t\t\tthis.z = e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tsetFromMatrix3Column: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar _v1 = new Vector3();\n\tvar _m1 = new Matrix4();\n\tvar _zero = new Vector3( 0, 0, 0 );\n\tvar _one = new Vector3( 1, 1, 1 );\n\tvar _x = new Vector3();\n\tvar _y = new Vector3();\n\tvar _z = new Vector3();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements, me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function ( m ) {\n\n\t\t\t// this method does not support reflection matrices\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t\t}\n\n\t\t\t// bottom row\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// last column\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\t\treturn this.compose( _zero, q, _one );\n\n\t\t},\n\n\t\tlookAt: function ( eye, target, up ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors( eye, target );\n\n\t\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t\t// eye and target are in the same position\n\n\t\t\t\t_z.z = 1;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t\t// up and z are parallel\n\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\t_z.x += 0.0001;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_z.z += 0.0001;\n\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\t\t\t\t_x.crossVectors( up, _z );\n\n\t\t\t}\n\n\t\t\t_x.normalize();\n\t\t\t_y.crossVectors( _z, _x );\n\n\t\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPosition: function ( x, y, z ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\tte[ 12 ] = x.x;\n\t\t\t\tte[ 13 ] = x.y;\n\t\t\t\tte[ 14 ] = x.z;\n\n\t\t\t} else {\n\n\t\t\t\tte[ 12 ] = x;\n\t\t\t\tte[ 13 ] = y;\n\t\t\t\tte[ 14 ] = z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\tif ( throwOnDegenerate !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.\" );\n\n\t\t\t}\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) { return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); }\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s, c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts, c, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeShear: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, y, z, 0,\n\t\t\t\tx, 1, z, 0,\n\t\t\t\tx, y, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = position.x;\n\t\t\tte[ 13 ] = position.y;\n\t\t\tte[ 14 ] = position.z;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdecompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) { sx = - sx; }\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\t\t\t_m1.copy( this );\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t_m1.elements[ 0 ] *= invSX;\n\t\t\t_m1.elements[ 1 ] *= invSX;\n\t\t\t_m1.elements[ 2 ] *= invSX;\n\n\t\t\t_m1.elements[ 4 ] *= invSY;\n\t\t\t_m1.elements[ 5 ] *= invSY;\n\t\t\t_m1.elements[ 6 ] *= invSY;\n\n\t\t\t_m1.elements[ 8 ] *= invSZ;\n\t\t\t_m1.elements[ 9 ] *= invSZ;\n\t\t\t_m1.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( _m1 );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tif ( far === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _matrix = new Matrix4();\n\tvar _quaternion$1 = new Quaternion();\n\n\tfunction Euler( x, y, z, order ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || Euler.DefaultOrder;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tObject.defineProperties( Euler.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\torder: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._order;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._order = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Euler.prototype, {\n\n\t\tisEuler: true,\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = MathUtils.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function ( q, order, update ) {\n\n\t\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t\t},\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function ( newOrder ) {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\t_quaternion$1.setFromEuler( this );\n\n\t\t\treturn this.setFromQuaternion( _quaternion$1, newOrder );\n\n\t\t},\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tObject.assign( Layers.prototype, {\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel | 0;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel | 0;\n\n\t\t},\n\n\t\tenableAll: function () {\n\n\t\t\tthis.mask = 0xffffffff | 0;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel | 0;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t\t},\n\n\t\tdisableAll: function () {\n\n\t\t\tthis.mask = 0;\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t} );\n\n\tvar _object3DId = 0;\n\n\tvar _v1$1 = new Vector3();\n\tvar _q1 = new Quaternion();\n\tvar _m1$1 = new Matrix4();\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\tvar _scale = new Vector3();\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3( 1, 0, 0 );\n\tvar _yAxis = new Vector3( 0, 1, 0 );\n\tvar _zAxis = new Vector3( 0, 0, 1 );\n\n\tvar _addedEvent = { type: 'added' };\n\tvar _removedEvent = { type: 'removed' };\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Object3D,\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tthis.matrix.premultiply( matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateOnWorldAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.premultiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t\t},\n\n\t\ttranslateOnAxis: function ( axis, distance ) {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_v1$1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( _v1$1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslateX: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t\t},\n\n\t\ttranslateY: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t\t},\n\n\t\ttranslateZ: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t\t},\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );\n\n\t\t},\n\n\t\tlookAt: function ( x, y, z ) {\n\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\t_target.copy( x );\n\n\t\t\t} else {\n\n\t\t\t\t_target.set( x, y, z );\n\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_position.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t\t_m1$1.lookAt( _position, _target, this.up );\n\n\t\t\t} else {\n\n\t\t\t\t_m1$1.lookAt( _target, _position, this.up );\n\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\t\tthis.quaternion.premultiply( _q1.inverse() );\n\n\t\t\t}\n\n\t\t},\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push( object );\n\n\t\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tattach: function ( object ) {\n\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.getInverse( this.matrixWorld );\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t\t}\n\n\t\t\tobject.applyMatrix4( _m1$1 );\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) { return this; }\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\t\ttarget = new Quaternion();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, target, _scale );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldScale: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, _quaternion$2, target );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) { return; }\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t\t}\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tif ( updateChildren === true ) {\n\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { object.name = this.name; }\n\t\t\tif ( this.castShadow === true ) { object.castShadow = true; }\n\t\t\tif ( this.receiveShadow === true ) { object.receiveShadow = true; }\n\t\t\tif ( this.visible === false ) { object.visible = false; }\n\t\t\tif ( this.frustumCulled === false ) { object.frustumCulled = false; }\n\t\t\tif ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }\n\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\tif ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }\n\n\t\t\t// object specific properties\n\n\t\t\tif ( this.isInstancedMesh ) {\n\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\t\t\t\tvar shapes = extractFromCache( meta.shapes );\n\n\t\t\t\tif ( geometries.length > 0 ) { output.geometries = geometries; }\n\t\t\t\tif ( materials.length > 0 ) { output.materials = materials; }\n\t\t\t\tif ( textures.length > 0 ) { output.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { output.images = images; }\n\t\t\t\tif ( shapes.length > 0 ) { output.shapes = shapes; }\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) { recursive = true; }\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Scene,\n\n\t\tisScene: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) { this.background = source.background.clone(); }\n\t\t\tif ( source.environment !== null ) { this.environment = source.environment.clone(); }\n\t\t\tif ( source.fog !== null ) { this.fog = source.fog.clone(); }\n\n\t\t\tif ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }\n\t\t\tif ( this.environment !== null ) { data.object.environment = this.environment.toJSON( meta ); }\n\t\t\tif ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tvar _points = [\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3()\n\t];\n\n\tvar _vector$1 = new Vector3();\n\n\tvar _box = new Box3();\n\n\t// triangle centered vertices\n\n\tvar _v0 = new Vector3();\n\tvar _v1$2 = new Vector3();\n\tvar _v2 = new Vector3();\n\n\t// triangle edge vectors\n\n\tvar _f0 = new Vector3();\n\tvar _f1 = new Vector3();\n\tvar _f2 = new Vector3();\n\n\tvar _center = new Vector3();\n\tvar _extents = new Vector3();\n\tvar _triangleNormal = new Vector3();\n\tvar _testAxis = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\n\tObject.assign( Box3.prototype, {\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tvar x = attribute.getX( i );\n\t\t\t\tvar y = attribute.getY( i );\n\t\t\t\tvar z = attribute.getZ( i );\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\treturn this.expandByObject( object );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByObject: function ( object ) {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t}\n\n\t\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box );\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, _vector$1 );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn _vector$1.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t\t},\n\n\t\tintersectsTriangle: function ( triangle ) {\n\n\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// compute box center and extents\n\t\t\tthis.getCenter( _center );\n\t\t\t_extents.subVectors( this.max, _center );\n\n\t\t\t// translate triangle to aabb origin\n\t\t\t_v0.subVectors( triangle.a, _center );\n\t\t\t_v1$2.subVectors( triangle.b, _center );\n\t\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t\t// compute edge vectors for triangle\n\t\t\t_f0.subVectors( _v1$2, _v0 );\n\t\t\t_f1.subVectors( _v2, _v1$2 );\n\t\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\t\tvar axes = [\n\t\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t\t];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// test 3 face normals from the aabb\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\t\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\t\treturn satForAxes( axes, _v0, _v1$2, _v2, _extents );\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$1.copy( point ).clamp( this.min, this.max );\n\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tgetBoundingSphere: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\n\n\t\t\t}\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$1 ).length() * 0.5;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif ( this.isEmpty() ) { this.makeEmpty(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif ( this.isEmpty() ) { return this; }\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\t\tthis.setFromPoints( _points );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\tfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\t\tvar i, j;\n\n\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t\t_testAxis.fromArray( axes, i );\n\t\t\t// project the aabb onto the seperating axis\n\t\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\t\tvar p0 = v0.dot( _testAxis );\n\t\t\tvar p1 = v1.dot( _testAxis );\n\t\t\tvar p2 = v2.dot( _testAxis );\n\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tvar _box$1 = new Box3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n\t}\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\t_box$1.setFromPoints( points ).getCenter( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tempty: function () {\n\n\t\t\treturn ( this.radius <= 0 );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\ttarget.sub( this.center ).normalize();\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\t\ttarget = new Box3();\n\n\t\t\t}\n\n\t\t\ttarget.set( this.center, this.center );\n\t\t\ttarget.expandByScalar( this.radius );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t} );\n\n\tvar _vector$2 = new Vector3();\n\tvar _segCenter = new Vector3();\n\tvar _segDir = new Vector3();\n\tvar _diff = new Vector3();\n\n\tvar _edge1 = new Vector3();\n\tvar _edge2 = new Vector3();\n\tvar _normal = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );\n\n\t}\n\n\tObject.assign( Ray.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function ( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, _vector$2 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( point, this.origin );\n\n\t\t\tvar directionDistance = target.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn target.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function ( point ) {\n\n\t\t\tvar directionDistance = _vector$2.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\t_vector$2.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn _vector$2.distanceToSquared( point );\n\n\t\t},\n\n\t\tdistanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( _segDir );\n\t\t\tvar b0 = _diff.dot( this.direction );\n\t\t\tvar b1 = - _diff.dot( _segDir );\n\t\t\tvar c = _diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t},\n\n\t\tintersectSphere: function ( sphere, target ) {\n\n\t\t\t_vector$2.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = _vector$2.dot( this.direction );\n\t\t\tvar d2 = _vector$2.dot( _vector$2 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) { return null; }\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) { return null; }\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) { return this.at( t1, target ); }\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, target );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, target ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, target );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, target ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) { return null; }\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn this.intersectBox( box, _vector$2 ) !== null;\n\n\t\t},\n\n\t\tintersectTriangle: function ( a, b, c, backfaceCulling, target ) {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t_edge1.subVectors( b, a );\n\t\t\t_edge2.subVectors( c, a );\n\t\t\t_normal.crossVectors( _edge1, _edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( _normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) { return null; }\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t_diff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * _diff.dot( _normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, target );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.transformDirection( matrix4 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector1 = new Vector3();\n\tvar _vector2 = new Vector3();\n\tvar _normalMatrix = new Matrix3();\n\n\tfunction Plane( normal, constant ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tObject.assign( Plane.prototype, {\n\n\t\tisPlane: true,\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function ( a, b, c ) {\n\n\t\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t\t},\n\n\t\tintersectLine: function ( line, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar direction = line.delta( _vector1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn target.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t},\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant -= offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v0$1 = new Vector3();\n\tvar _v1$3 = new Vector3();\n\tvar _v2$1 = new Vector3();\n\tvar _v3 = new Vector3();\n\n\tvar _vab = new Vector3();\n\tvar _vac = new Vector3();\n\tvar _vbc = new Vector3();\n\tvar _vap = new Vector3();\n\tvar _vbp = new Vector3();\n\tvar _vcp = new Vector3();\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tObject.assign( Triangle, {\n\n\t\tgetNormal: function ( a, b, c, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( c, b );\n\t\t\t_v0$1.subVectors( a, b );\n\t\t\ttarget.cross( _v0$1 );\n\n\t\t\tvar targetLengthSq = target.lengthSq();\n\t\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t\t}\n\n\t\t\treturn target.set( 0, 0, 0 );\n\n\t\t},\n\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tgetBarycoord: function ( point, a, b, c, target ) {\n\n\t\t\t_v0$1.subVectors( c, a );\n\t\t\t_v1$3.subVectors( b, a );\n\t\t\t_v2$1.subVectors( point, a );\n\n\t\t\tvar dot00 = _v0$1.dot( _v0$1 );\n\t\t\tvar dot01 = _v0$1.dot( _v1$3 );\n\t\t\tvar dot02 = _v0$1.dot( _v2$1 );\n\t\t\tvar dot11 = _v1$3.dot( _v1$3 );\n\t\t\tvar dot12 = _v1$3.dot( _v2$1 );\n\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn target.set( 1 - u - v, v, u );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point, a, b, c ) {\n\n\t\t\tTriangle.getBarycoord( point, a, b, c, _v3 );\n\n\t\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t\t},\n\n\t\tgetUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\n\n\t\t\ttarget.set( 0, 0 );\n\t\t\ttarget.addScaledVector( uv1, _v3.x );\n\t\t\ttarget.addScaledVector( uv2, _v3.y );\n\t\t\ttarget.addScaledVector( uv3, _v3.z );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tisFrontFacing: function ( a, b, c, direction ) {\n\n\t\t\t_v0$1.subVectors( c, b );\n\t\t\t_v1$3.subVectors( a, b );\n\n\t\t\t// strictly front facing\n\t\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetArea: function () {\n\n\t\t\t_v0$1.subVectors( this.c, this.b );\n\t\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t\t},\n\n\t\tgetMidpoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tgetNormal: function ( target ) {\n\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetPlane: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\t\ttarget = new Plane();\n\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tgetBarycoord: function ( point, target ) {\n\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetUV: function ( point, uv1, uv2, uv3, target ) {\n\n\t\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tisFrontFacing: function ( direction ) {\n\n\t\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsTriangle( this );\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( p, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar a = this.a, b = this.b, c = this.c;\n\t\t\tvar v, w;\n\n\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors( b, a );\n\t\t\t_vac.subVectors( c, a );\n\t\t\t_vap.subVectors( p, a );\n\t\t\tvar d1 = _vab.dot( _vap );\n\t\t\tvar d2 = _vac.dot( _vap );\n\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy( a );\n\n\t\t\t}\n\n\t\t\t_vbp.subVectors( p, b );\n\t\t\tvar d3 = _vab.dot( _vbp );\n\t\t\tvar d4 = _vac.dot( _vbp );\n\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy( b );\n\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t\t}\n\n\t\t\t_vcp.subVectors( p, c );\n\t\t\tvar d5 = _vab.dot( _vcp );\n\t\t\tvar d6 = _vac.dot( _vcp );\n\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy( c );\n\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t\t_vbc.subVectors( c, b );\n\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t\t}\n\n\t\t\t// face region\n\t\t\tvar denom = 1 / ( va + vb + vc );\n\t\t\t// u = va * denom\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t\t},\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tvar _hslA = { h: 0, s: 0, l: 0 };\n\tvar _hslB = { h: 0, s: 0, l: 0 };\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tfunction hue2rgb( p, q, t ) {\n\n\t\tif ( t < 0 ) { t += 1; }\n\t\tif ( t > 1 ) { t -= 1; }\n\t\tif ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }\n\t\tif ( t < 1 / 2 ) { return q; }\n\t\tif ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }\n\t\treturn p;\n\n\t}\n\n\tfunction SRGBToLinear( c ) {\n\n\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t}\n\n\tfunction LinearToSRGB( c ) {\n\n\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n\t}\n\n\tObject.assign( Color.prototype, {\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function ( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = MathUtils.euclideanModulo( h, 1 );\n\t\t\ts = MathUtils.clamp( s, 0, 1 );\n\t\t\tl = MathUtils.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) { return; }\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\treturn this.setColorName( style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetColorName: function ( style ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\n\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\n\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopySRGBToLinear: function ( color ) {\n\n\t\t\tthis.r = SRGBToLinear( color.r );\n\t\t\tthis.g = SRGBToLinear( color.g );\n\t\t\tthis.b = SRGBToLinear( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToSRGB: function ( color ) {\n\n\t\t\tthis.r = LinearToSRGB( color.r );\n\t\t\tthis.g = LinearToSRGB( color.g );\n\t\t\tthis.b = LinearToSRGB( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertSRGBToLinear: function () {\n\n\t\t\tthis.copySRGBToLinear( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToSRGB: function () {\n\n\t\t\tthis.copyLinearToSRGB( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( target ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t\t}\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function ( h, s, l ) {\n\n\t\t\tthis.getHSL( _hslA );\n\n\t\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpHSL: function ( color, alpha ) {\n\n\t\t\tthis.getHSL( _hslA );\n\t\t\tcolor.getHSL( _hslB );\n\n\t\t\tvar h = MathUtils.lerp( _hslA.h, _hslB.h, alpha );\n\t\t\tvar s = MathUtils.lerp( _hslA.s, _hslB.s, alpha );\n\t\t\tvar l = MathUtils.lerp( _hslA.l, _hslB.l, alpha );\n\n\t\t\tthis.setHSL( h, s, l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t} );\n\n\tColor.NAMES = _colorKeywords;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tObject.assign( Face3.prototype, {\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Material,\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function () {},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) { return; }\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }\n\n\t\t\tif ( this.roughness !== undefined ) { data.roughness = this.roughness; }\n\t\t\tif ( this.metalness !== undefined ) { data.metalness = this.metalness; }\n\n\t\t\tif ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }\n\t\t\tif ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }\n\t\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }\n\n\t\t\tif ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }\n\t\t\tif ( this.shininess !== undefined ) { data.shininess = this.shininess; }\n\t\t\tif ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }\n\t\t\tif ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }\n\n\t\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }\n\t\t\tif ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\n\t\t\t\tif ( this.combine !== undefined ) { data.combine = this.combine; }\n\t\t\t\tif ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) { data.size = this.size; }\n\t\t\tif ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }\n\n\t\t\tif ( this.blending !== NormalBlending ) { data.blending = this.blending; }\n\t\t\tif ( this.flatShading === true ) { data.flatShading = this.flatShading; }\n\t\t\tif ( this.side !== FrontSide ) { data.side = this.side; }\n\t\t\tif ( this.vertexColors ) { data.vertexColors = true; }\n\n\t\t\tif ( this.opacity < 1 ) { data.opacity = this.opacity; }\n\t\t\tif ( this.transparent === true ) { data.transparent = this.transparent; }\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t\t// rotation (SpriteMaterial)\n\t\t\tif ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }\n\n\t\t\tif ( this.polygonOffset === true ) { data.polygonOffset = true; }\n\t\t\tif ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }\n\t\t\tif ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }\n\n\t\t\tif ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }\n\t\t\tif ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }\n\t\t\tif ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }\n\t\t\tif ( this.scale !== undefined ) { data.scale = this.scale; }\n\n\t\t\tif ( this.dithering === true ) { data.dithering = true; }\n\n\t\t\tif ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }\n\t\t\tif ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }\n\n\t\t\tif ( this.wireframe === true ) { data.wireframe = this.wireframe; }\n\t\t\tif ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }\n\t\t\tif ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }\n\n\t\t\tif ( this.morphTargets === true ) { data.morphTargets = true; }\n\t\t\tif ( this.morphNormals === true ) { data.morphNormals = true; }\n\t\t\tif ( this.skinning === true ) { data.skinning = true; }\n\n\t\t\tif ( this.visible === false ) { data.visible = false; }\n\n\t\t\tif ( this.toneMapped === false ) { data.toneMapped = false; }\n\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) { data.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { data.images = images; }\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\t{ dstPlanes[ i ] = srcPlanes[ i ].clone(); }\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\n\t\t\tthis.shadowSide = source.shadowSide;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.toneMapped = source.toneMapped;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Material.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _vector$3 = new Vector3();\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyNormalMatrix( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.transformDirection( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, {\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex = undefined;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i ] = {\n\t\t\t\t\t\tname: morphNormals[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) { return - Infinity; }\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) { max = array[ i ]; }\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tvar _m1$2 = new Matrix4();\n\tvar _obj = new Object3D();\n\tvar _offset = new Vector3();\n\tvar _box$2 = new Box3();\n\tvar _boxMorphTargets = new Box3();\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: BufferGeometry,\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tsetAttribute: function ( name, attribute ) {\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeleteAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif ( tangent !== undefined ) {\n\n\t\t\t\ttangent.transformDirection( matrix );\n\n\t\t\t\ttangent.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$2.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$2.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$2.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$2.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$2.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj.lookAt( vector );\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tvar position = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.normal;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.color;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\n\t\t\t\t\tattribute.name = morphTarget.name;\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.min, _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.max, _box$2.max );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position ) {\n\n\t\t\t\t// first, find the center of the bounding sphere\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter( center );\n\n\t\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\t_vector$4.fromBufferAttribute( position, i );\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t\t_vector$4.add( _offset );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tif ( attributes.position ) {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) {\n\n\t\t\t\toffset = 0;\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) { continue; }\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\t\tfor ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$4.x = normals.getX( i );\n\t\t\t\t_vector$4.y = normals.getY( i );\n\t\t\t\t_vector$4.z = normals.getZ( i );\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute( array2, itemSize );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\t// attributes\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = morphAttribute[ i ];\n\n\t\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\tdata.data.attributes[ key ] = attributeData;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor ( var key in this.morphAttributes ) {\n\n\t\t\t\tvar attributeArray = this.morphAttributes[ key ];\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = attributeArray[ i ];\n\n\t\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\t\tarray.push( attributeData );\n\n\t\t\t\t}\n\n\t\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\t\thasMorphAttributes = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasMorphAttributes ) {\n\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar name, i, l;\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.setAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\t// user data\n\n\t\t\tthis.userData = source.userData;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tvar _inverseMatrix = new Matrix4();\n\tvar _ray = new Ray();\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\tvar _vB = new Vector3();\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\tvar _tempB = new Vector3();\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\tvar _morphB = new Vector3();\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\tvar _uvB = new Vector2();\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t\t}\n\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) { return; }\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere.copy( geometry.boundingSphere );\n\t\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix.getInverse( matrixWorld );\n\t\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }\n\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar a, b, c;\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\t\t\t\tvar i, j, il, jl;\n\t\t\t\tvar group, groupMaterial;\n\t\t\t\tvar start, end;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\ta = j;\n\t\t\t\t\t\t\t\tb = j + 1;\n\t\t\t\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\ta = i;\n\t\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) { continue; }\n\n\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\tvar intersect;\n\n\t\tif ( material.side === BackSide ) {\n\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t} else {\n\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t}\n\n\t\tif ( intersect === null ) { return null; }\n\n\t\t_intersectionPointWorld.copy( point );\n\t\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return null; }\n\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\n\t}\n\n\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t\t_vA.fromBufferAttribute( position, a );\n\t\t_vB.fromBufferAttribute( position, b );\n\t\t_vC.fromBufferAttribute( position, c );\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( material.morphTargets && morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tvar influence = morphInfluences[ i ];\n\t\t\t\tvar morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) { continue; }\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\t\tif ( intersection ) {\n\n\t\t\tif ( uv ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tif ( uv2 ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tvar face = new Face3( a, b, c );\n\t\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\t\tintersection.face = face;\n\n\t\t}\n\n\t\treturn intersection;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\n\tvar _m1$3 = new Matrix4();\n\tvar _obj$1 = new Object3D();\n\tvar _offset$1 = new Vector3();\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _geometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Geometry,\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$3.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$3.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$3.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$3.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$3.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj$1.lookAt( vector );\n\n\t\t\t_obj$1.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj$1.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif ( attributes.position === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\t\tif ( uvs2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }\n\n\t\t\tfor ( var i = 0; i < positions.length; i += 3 ) {\n\n\t\t\t\tscope.vertices.push( new Vector3().fromArray( positions, i ) );\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color().fromArray( colors, i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexColors = ( colors === undefined ) ? [] : [\n\t\t\t\t\tscope.colors[ a ].clone(),\n\t\t\t\t\tscope.colors[ b ].clone(),\n\t\t\t\t\tscope.colors[ c ].clone() ];\n\n\t\t\t\tvar vertexNormals = ( normals === undefined ) ? [] : [\n\t\t\t\t\tnew Vector3().fromArray( normals, a * 3 ),\n\t\t\t\t\tnew Vector3().fromArray( normals, b * 3 ),\n\t\t\t\t\tnew Vector3().fromArray( normals, c * 3 )\n\t\t\t\t];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, a * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, b * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, c * 2 )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, a * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, b * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, c * 2 )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset$1 ).negate();\n\n\t\t\tthis.translate( _offset$1.x, _offset$1.y, _offset$1.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) { areaWeighted = true; }\n\n\t\t\tvar v, vl, f, fl, face, vertices;\n\n\t\t\tvertices = new Array( this.vertices.length );\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tvar f, fl, face;\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\tvar i, il, f, fl, face;\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }\n\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) { this.faceVertexUvs[ i ] = []; }\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = this.faces[ i ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.vertices = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) { newUvs1 = []; }\n\t\t\tif ( uvs2 && uvs2.length === length ) { newUvs2 = []; }\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar id = faces[ i ]._id;\n\n\t\t\t\tif ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }\n\t\t\t\tif ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }\n\t\t\tif ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) { data.data.colors = colors; }\n\t\t\tif ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar i, il, j, jl, k, kl;\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// BoxGeometry\n\n\tvar BoxGeometry = /*@__PURE__*/(function (Geometry) {\n\t\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'BoxGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tif ( Geometry ) BoxGeometry.__proto__ = Geometry;\n\t\tBoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );\n\t\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t\treturn BoxGeometry;\n\t}(Geometry));\n\n\t// BoxBufferGeometry\n\n\tvar BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {\n\t\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'BoxBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = this;\n\n\t\t\twidth = width || 1;\n\t\t\theight = height || 1;\n\t\t\tdepth = depth || 1;\n\n\t\t\t// segments\n\n\t\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0;\n\n\t\t\t// build each side of the box geometry\n\n\t\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\n\t\t\t\tvar ix, iy;\n\n\t\t\t\tvar vector = new Vector3();\n\n\t\t\t\t// generate vertices, normals and uvs\n\n\t\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// uvs\n\n\t\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t\t// counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// indices\n\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t\t// faces\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t\t// increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t\t// calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\n\t\t\t\t// update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;\n\t\tBoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );\n\t\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t\treturn BoxBufferGeometry;\n\t}(BufferGeometry));\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tfunction cloneUniforms( src ) {\n\n\t\tvar dst = {};\n\n\t\tfor ( var u in src ) {\n\n\t\t\tdst[ u ] = {};\n\n\t\t\tfor ( var p in src[ u ] ) {\n\n\t\t\t\tvar property = src[ u ][ p ];\n\n\t\t\t\tif ( property && ( property.isColor ||\n\t\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\t\tproperty.isTexture ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn dst;\n\n\t}\n\n\tfunction mergeUniforms( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = cloneUniforms( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t}\n\n\t// Legacy\n\n\tvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = source.extensions;\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = {};\n\n\t\tfor ( var name in this.uniforms ) {\n\n\t\t\tvar uniform = this.uniforms[ name ];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tvar extensions = {};\n\n\t\tfor ( var key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) { extensions[ key ] = true; }\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tObject3D.prototype.updateWorldMatrix.call( this, updateParents, updateChildren );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar fov = 90, aspect = 1;\n\n\tfunction CubeCamera( near, far, cubeResolution, options ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\toptions = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\t\tthis.renderTarget = new WebGLCubeRenderTarget( cubeResolution, options );\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\t\tthis.update = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) { this.updateMatrixWorld(); }\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\t\trenderer.render( scene, cameraPX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\t\trenderer.render( scene, cameraNX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\t\trenderer.render( scene, cameraPY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\t\trenderer.render( scene, cameraNY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\t\trenderer.render( scene, cameraPZ );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\t\trenderer.render( scene, cameraNZ );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderer.setRenderTarget( renderTarget, i );\n\n\t\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction WebGLCubeRenderTarget( size, options, dummy ) {\n\n\t\tif ( Number.isInteger( options ) ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );\n\n\t\t\toptions = dummy;\n\n\t\t}\n\n\t\tWebGLRenderTarget.call( this, size, size, options );\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tWebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function ( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = texture.format;\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tvar scene = new Scene();\n\n\t\tvar shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\",\n\n\t\t\t\t\"\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvWorldDirection = transformDirection( position, modelMatrix );\",\n\n\t\t\t\t\"\t#include <begin_vertex>\",\n\t\t\t\t\"\t#include <project_vertex>\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform sampler2D tEquirect;\",\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"#define RECIPROCAL_PI 0.31830988618\",\n\t\t\t\t\"#define RECIPROCAL_PI2 0.15915494\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvec3 direction = normalize( vWorldDirection );\",\n\n\t\t\t\t\"\tvec2 sampleUV;\",\n\n\t\t\t\t\"\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\",\n\n\t\t\t\t\"\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\",\n\n\t\t\t\t\"\tgl_FragColor = texture2D( tEquirect, sampleUV );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\t\t};\n\n\t\tvar material = new ShaderMaterial( {\n\n\t\t\ttype: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tvar mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );\n\n\t\tscene.add( mesh );\n\n\t\tvar camera = new CubeCamera( 1, 10, 1 );\n\n\t\tcamera.renderTarget = this;\n\t\tcamera.renderTarget.texture.name = 'CubeCameraTexture';\n\n\t\tcamera.update( renderer, scene );\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1 };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _sphere$1 = new Sphere();\n\tvar _vector$5 = new Vector3();\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tObject.assign( Frustum.prototype, {\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromProjectionMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSprite: function ( sprite ) {\n\n\t\t\t_sphere$1.center.set( 0, 0, 0 );\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\t\t\t_sphere$1.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t// corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif ( plane.distanceToPoint( _vector$5 ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\tuv2Transform: { value: new Matrix3() },\n\n\t\t\talphaMap: { value: null },\n\n\t\t},\n\n\t\tspecularmap: {\n\n\t\t\tspecularMap: { value: null },\n\n\t\t},\n\n\t\tenvmap: {\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 },\n\t\t\tmaxMipLevel: { value: 0 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tlightProbe: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {}\n\t\t\t} },\n\n\t\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {}\n\t\t\t} },\n\n\t\t\tspotLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {}\n\t\t\t} },\n\n\t\t\tpointLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {},\n\t\t\t\tshadowCameraNear: {},\n\t\t\t\tshadowCameraFar: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\t\trotation: { value: 0.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAnimation() {\n\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tif ( isAnimating === false ) { return; }\n\n\t\t\tanimationLoop( time, frame );\n\n\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tstart: function () {\n\n\t\t\t\tif ( isAnimating === true ) { return; }\n\t\t\t\tif ( animationLoop === null ) { return; }\n\n\t\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t\t\tisAnimating = true;\n\n\t\t\t},\n\n\t\t\tstop: function () {\n\n\t\t\t\tisAnimating = false;\n\n\t\t\t},\n\n\t\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\t\tanimationLoop = callback;\n\n\t\t\t},\n\n\t\t\tsetContext: function ( value ) {\n\n\t\t\t\tcontext = value;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAttributes( gl, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = 5126;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = 5126;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = 5122;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = 5125;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = 5124;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = 5120;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = 5121;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\treturn buffers.get( attribute );\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tbuffers.delete( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PlaneGeometry\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\tvar ix, iy;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha  = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n  return m[ 2 ][ 3 ] == - 1.0;\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_maxMipLevel 8.0\\n#define cubeUV_minMipLevel 4.0\\n#define cubeUV_maxTileSize 256.0\\n#define cubeUV_minTileSize 16.0\\nfloat getFace(vec3 direction) {\\n    vec3 absDirection = abs(direction);\\n    float face = -1.0;\\n    if (absDirection.x > absDirection.z) {\\n      if (absDirection.x > absDirection.y)\\n        face = direction.x > 0.0 ? 0.0 : 3.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    } else {\\n      if (absDirection.z > absDirection.y)\\n        face = direction.z > 0.0 ? 2.0 : 5.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    }\\n    return face;\\n}\\nvec2 getUV(vec3 direction, float face) {\\n    vec2 uv;\\n    if (face == 0.0) {\\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\\n    } else if (face == 1.0) {\\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\\n    } else if (face == 2.0) {\\n      uv = direction.xy / abs(direction.z);\\n    } else if (face == 3.0) {\\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\\n    } else if (face == 4.0) {\\n      uv = direction.xz / abs(direction.y);\\n    } else {\\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\\n    }\\n    return 0.5 * (uv + 1.0);\\n}\\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\\n  float face = getFace(direction);\\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\\n  mipInt = max(mipInt, cubeUV_minMipLevel);\\n  float faceSize = exp2(mipInt);\\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\\n  vec2 f = fract(uv);\\n  uv += 0.5 - f;\\n  if (face > 2.0) {\\n    uv.y += faceSize;\\n    face -= 3.0;\\n  }\\n  uv.x += face * faceSize;\\n  if(mipInt < cubeUV_maxMipLevel){\\n    uv.y += 2.0 * cubeUV_maxTileSize;\\n  }\\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\\n  uv *= texelSize;\\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x += texelSize;\\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.y += texelSize;\\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x -= texelSize;\\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  vec3 tm = mix(tl, tr, f.x);\\n  vec3 bm = mix(bl, br, f.x);\\n  return mix(tm, bm, f.y);\\n}\\n#define r0 1.0\\n#define v0 0.339\\n#define m0 -2.0\\n#define r1 0.8\\n#define v1 0.276\\n#define m1 -1.0\\n#define r4 0.4\\n#define v4 0.046\\n#define m4 2.0\\n#define r5 0.305\\n#define v5 0.016\\n#define m5 3.0\\n#define r6 0.21\\n#define v6 0.0038\\n#define m6 4.0\\nfloat roughnessToMip(float roughness) {\\n  float mip = 0.0;\\n  if (roughness >= r1) {\\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\\n  } else if (roughness >= r4) {\\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\\n  } else if (roughness >= r5) {\\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\\n  } else if (roughness >= r6) {\\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\\n  } else {\\n    mip = -2.0 * log2(1.16 * roughness);  }\\n  return mip;\\n}\\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\\n  float mipF = fract(mip);\\n  float mipInt = floor(mip);\\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\\n  if (mipF == 0.0) {\\n    return vec4(color0, 1.0);\\n  } else {\\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\\n    return vec4(mix(color0, color1, mipF), 1.0);\\n  }\\n}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\t\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t}  else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) { \\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t  vec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\\n}\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 0.5 },\n\t\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\ttoon: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t\t},\n\n\t\tmatcap: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tmatcap: { value: null }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.sprite,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t\t},\n\n\t\tbackground: {\n\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\t\tt2D: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\n\t\t},\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t},\n\n\t\tshadow: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t} ] ),\n\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\tclearcoat: { value: 0 },\n\t\t\t\tclearcoatMap: { value: null },\n\t\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\t\tclearcoatNormalMap: { value: null },\n\t\t\t\tsheen: { value: new Color( 0x000000 ) },\n\t\t\t\ttransparency: { value: 0 },\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\t\tvar currentTonemapping = null;\n\n\t\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.background;\n\n\t\t\t// Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\t\t\tvar xr = renderer.xr;\n\t\t\tvar session = xr.getSession && xr.getSession();\n\n\t\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\t\tbackground = null;\n\n\t\t\t}\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && ( background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\ttype: 'BackgroundCubeMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t\t};\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = background.isWebGLCubeRenderTarget ? background.texture : background;\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = texture;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = texture.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== texture.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = texture.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\ttype: 'BackgroundMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tbackground.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) { return maxAnisotropy; }\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\t/* eslint-disable no-undef */\n\t\tvar isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\t\tvar maxTextures = gl.getParameter( 34930 );\n\t\tvar maxVertexTextures = gl.getParameter( 35660 );\n\t\tvar maxTextureSize = gl.getParameter( 3379 );\n\t\tvar maxCubemapSize = gl.getParameter( 34076 );\n\n\t\tvar maxAttributes = gl.getParameter( 34921 );\n\t\tvar maxVertexUniforms = gl.getParameter( 36347 );\n\t\tvar maxVaryings = gl.getParameter( 36348 );\n\t\tvar maxFragmentUniforms = gl.getParameter( 36349 );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\t\treturn {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\t\tmaxSamples: maxSamples\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this,\n\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\n\t\t\tplane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function () {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, attributes, info ) {\n\n\t\tvar geometries = new WeakMap();\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tgeometries.delete( geometry );\n\n\t\t\tvar attribute = wireframeAttributes.get( buffergeometry );\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\twireframeAttributes.delete( buffergeometry );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfo.memory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry ) { return buffergeometry; }\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries.set( geometry, buffergeometry );\n\n\t\t\tinfo.memory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, 34963 );\n\n\t\t\t}\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateWireframeAttribute( geometry ) {\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\t\tattribute.version = version;\n\n\t\t\tattributes.update( attribute, 34963 );\n\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( previousAttribute ) { attributes.remove( previousAttribute ); }\n\n\t\t\t//\n\n\t\t\twireframeAttributes.set( geometry, attribute );\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar currentAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( currentAttribute ) {\n\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get( geometry );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLInfo( gl ) {\n\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update( count, mode, instanceCount ) {\n\n\t\t\tinstanceCount = instanceCount || 1;\n\n\t\t\trender.calls ++;\n\n\t\t\tswitch ( mode ) {\n\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\trender.frame ++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n\t}\n\n\tfunction WebGLMorphtargets( gl ) {\n\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tfunction update( object, geometry, material, program ) {\n\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tvar length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tvar influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t\t// Remove current morphAttributes\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence[ 1 ] !== 0 ) {\n\n\t\t\t\t\tif ( morphTargets ) { geometry.deleteAttribute( 'morphTarget' + i ); }\n\t\t\t\t\tif ( morphNormals ) { geometry.deleteAttribute( 'morphNormal' + i ); }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\t// Add morphAttributes\n\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence ) {\n\n\t\t\t\t\tvar index = influence[ 0 ];\n\t\t\t\t\tvar value = influence[ 1 ];\n\n\t\t\t\t\tif ( value ) {\n\n\t\t\t\t\t\tif ( morphTargets ) { geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] ); }\n\t\t\t\t\t\tif ( morphNormals ) { geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] ); }\n\n\t\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\t\tvar updateMap = new WeakMap();\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tupdateMap = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\tformat = format !== undefined ? format : RGBFormat;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction DataTexture2DArray( data, width, height, depth ) {\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture2DArray.prototype = Object.create( Texture.prototype );\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\t/**\n\t * @author Artur Trzesiok\n\t */\n\n\tfunction DataTexture3D( data, width, height, depth ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tvar texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\n\t}\n\n\tDataTexture3D.prototype = Object.create( Texture.prototype );\n\tDataTexture3D.prototype.constructor = DataTexture3D;\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * @author tschw\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\tvar mat2array = new Float32Array( 4 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) { return array; }\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\tfunction arraysEqual( a, b ) {\n\n\t\tif ( a.length !== b.length ) { return false; }\n\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\tif ( a[ i ] !== b[ i ] ) { return false; }\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction copyArray( a, b ) {\n\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\n\n\t\t\ta[ i ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( textures, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t{ r[ i ] = textures.allocateTextureUnit(); }\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValueV1f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1f( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValueV2f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform2fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV3f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\n\t\t\t}\n\n\t\t} else if ( v.r !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\t\tcache[ 0 ] = v.r;\n\t\t\t\tcache[ 1 ] = v.g;\n\t\t\t\tcache[ 2 ] = v.b;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV4f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\t\t\t\tcache[ 3 ] = v.w;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform4fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValueM2( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat2array.set( elements );\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM3( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat3array.set( elements );\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM4( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat4array.set( elements );\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT2DArray1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\n\n\t}\n\n\tfunction setValueT3D1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture3D( v || emptyTexture3d, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValueV1i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1i( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\tfunction setValueV2i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV3i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV4i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\t// uint\n\n\tfunction setValueV1ui( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1ui( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\t\tcase 0x1405: return setValueV1ui; // UINT\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\tfunction setValueV1fArray( gl, v ) {\n\n\t\tgl.uniform1fv( this.addr, v );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\tfunction setValueV1iArray( gl, v ) {\n\n\t\tgl.uniform1iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV2iArray( gl, v ) {\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV3iArray( gl, v ) {\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV4iArray( gl, v ) {\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t}\n\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 2 );\n\n\t\tgl.uniform2fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV3fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 3 );\n\n\t\tgl.uniform3fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV4fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniform4fv( this.addr, data );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM3Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 9 );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM4Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 16 );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\t\tthis.cache = new Float32Array( data.length );\n\n\t\t}\n\n\t\tcopyArray( cache, data );\n\n\t};\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile ( true ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\tid = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) { id = id | 0; } // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35718 );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) { u.setValue( gl, value, textures ); }\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) { this.setValue( gl, name, v ); }\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) { r.push( u ); }\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB', '( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE', '( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn [ 'LogLuv', '( value )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getShaderErrors( gl, shader, type ) {\n\n\t\tvar status = gl.getShaderParameter( shader, 35713 );\n\t\tvar log = gl.getShaderInfoLog( shader ).trim();\n\n\t\tif ( status && log === '' ) { return ''; }\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource( shader );\n\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers( source );\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = 'Uncharted2';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n\t}\n\n\tfunction generateExtensions( parameters ) {\n\n\t\tvar chunks = [\n\t\t\t( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) { continue; }\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35721 );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n\t}\n\n\tfunction replaceClippingPlaneNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n\t}\n\n\t// Resolve Includes\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes( string ) {\n\n\t\treturn string.replace( includePattern, includeReplacer );\n\n\t}\n\n\tfunction includeReplacer( match, include ) {\n\n\t\tvar string = ShaderChunk[ include ];\n\n\t\tif ( string === undefined ) {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t\treturn resolveIncludes( string );\n\n\t}\n\n\t// Unroll Loops\n\n\tvar deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tvar unrollLoopPattern = /#pragma unroll_loop_start[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}[\\s]+?#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops( string ) {\n\n\t\treturn string\n\t\t\t.replace( unrollLoopPattern, loopReplacer )\n\t\t\t.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );\n\n\t}\n\n\tfunction deprecatedLoopReplacer( match, start, end, snippet ) {\n\n\t\tconsole.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );\n\t\treturn loopReplacer( match, start, end, snippet );\n\n\t}\n\n\tfunction loopReplacer( match, start, end, snippet ) {\n\n\t\tvar string = '';\n\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\tstring += snippet\n\t\t\t\t.replace( /\\[ i \\]/g, '[ ' + i + ' ]' )\n\t\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t\t}\n\n\t\treturn string;\n\n\t}\n\n\t//\n\n\tfunction generatePrecision( parameters ) {\n\n\t\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\n\n\t\tif ( parameters.precision === \"highp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"mediump\" ) {\n\n\t\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"lowp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\n\n\t\t}\n\n\t\treturn precisionstring;\n\n\t}\n\n\tfunction generateShadowMapTypeDefine( parameters ) {\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapTypeDefine( parameters ) {\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapModeDefine( parameters ) {\n\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapModeDefine;\n\n\t}\n\n\tfunction generateEnvMapBlendingDefine( parameters ) {\n\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\n\t}\n\n\tfunction WebGLProgram( renderer, cacheKey, parameters ) {\n\n\t\tvar gl = renderer.getContext();\n\n\t\tvar defines = parameters.defines;\n\n\t\tvar vertexShader = parameters.vertexShader;\n\t\tvar fragmentShader = parameters.fragmentShader;\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\t\tvar envMapModeDefine = generateEnvMapModeDefine( parameters );\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( parameters.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\t\tprefixVertex += '\\n';\n\n\t\t\t}\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\t\tprefixFragment += '\\n';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t\t' attribute mat4 instanceMatrix;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\t\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding || parameters.lightMapEncoding ) ?\n\t\t\t\t\tShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.lightMapEncoding ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = resolveIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\t\tfragmentShader = resolveIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\t\tvertexShader = unrollLoops( vertexShader );\n\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\tif ( parameters.isWebGL2 && ! parameters.isRawShaderMaterial ) {\n\n\t\t\tvar isGLSL3ShaderMaterial = false;\n\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\n\n\t\t\tif ( parameters.isShaderMaterial &&\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\n\n\t\t\t\tisGLSL3ShaderMaterial = true;\n\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\n\n\t\t\t}\n\n\t\t\t// GLSL 3.0 conversion\n\n\t\t\tprefixVertex = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define attribute in',\n\t\t\t\t'#define varying out',\n\t\t\t\t'#define texture2D texture'\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\t\tprefixFragment = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define varying in',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t\t'#define texture2D texture',\n\t\t\t\t'#define textureCube texture',\n\t\t\t\t'#define texture2DProj textureProj',\n\t\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\t// check for link errors\n\t\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\t\trunnable = false;\n\n\t\t\t\tvar vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\tvar fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\t\thaveDiagnostics = false;\n\n\t\t\t}\n\n\t\t\tif ( haveDiagnostics ) {\n\n\t\t\t\tthis.diagnostics = {\n\n\t\t\t\t\trunnable: runnable,\n\n\t\t\t\t\tprogramLog: programLog,\n\n\t\t\t\t\tvertexShader: {\n\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t\t},\n\n\t\t\t\t\tfragmentShader: {\n\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.detachShader( program, glVertexShader );\n\t\tgl.detachShader( program, glFragmentShader );\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function () {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t//\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount ++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\t\tvar programs = [];\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar precision = capabilities.precision;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\",\n\t\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\n\t\t\t\"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatMap\", \"clearcoatRoughnessMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\n\t\t\t\"sheen\"\n\t\t];\n\n\t\tfunction getShaderObject( material, shaderID ) {\n\n\t\t\tvar shaderobject;\n\n\t\t\tif ( shaderID ) {\n\n\t\t\t\tvar shader = ShaderLib[ shaderID ];\n\n\t\t\t\tshaderobject = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tshaderobject = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn shaderobject;\n\n\t\t}\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tthis.getParameters = function ( material, lights, shadows, scene, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\t\tvar envMap = material.envMap || environment;\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar shaderobject = getShaderObject( material, shaderID );\n\t\t\tmaterial.onBeforeCompile( shaderobject, renderer );\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar parameters = {\n\n\t\t\t\tisWebGL2: isWebGL2,\n\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: shaderobject.name,\n\n\t\t\t\tuniforms: shaderobject.uniforms,\n\t\t\t\tvertexShader: shaderobject.vertexShader,\n\t\t\t\tfragmentShader: shaderobject.fragmentShader,\n\t\t\t\tdefines: material.defines,\n\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial,\n\t\t\t\tisShaderMaterial: material.isShaderMaterial,\n\n\t\t\t\tprecision: precision,\n\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map ),\n\t\t\t\tmatcap: !! material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap ),\n\t\t\t\tenvMap: !! envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( envMap ),\n\t\t\t\tenvMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !! material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !! material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tsheen: !! material.sheen,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,\n\t\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.flatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.get( 'EXT_frag_depth' ) !== null,\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.get( 'WEBGL_draw_buffers' ) !== null,\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) !== null,\n\n\t\t\t\tonBeforeCompile: material.onBeforeCompile\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t};\n\n\t\tthis.getProgramCacheKey = function ( parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( parameters.fragmentShader );\n\t\t\t\tarray.push( parameters.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in parameters.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( parameters.isRawShaderMaterial === undefined ) {\n\n\t\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t\t}\n\n\t\t\t\tarray.push( renderer.outputEncoding );\n\t\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t\t}\n\n\t\t\tarray.push( parameters.onBeforeCompile.toString() );\n\n\t\t\treturn array.join();\n\n\t\t};\n\n\t\tthis.acquireProgram = function ( parameters, cacheKey ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar preexistingProgram = programs[ p ];\n\n\t\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t};\n\n\t\tthis.releaseProgram = function ( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get( object ) {\n\n\t\t\tvar map = properties.get( object );\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set( object, map );\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tproperties.delete( object );\n\n\t\t}\n\n\t\tfunction update( object, key, value ) {\n\n\t\t\tproperties.get( object )[ key ] = value;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tproperties = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\n\tfunction WebGLRenderList() {\n\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\n\t\tvar defaultProgram = { id: - 1 };\n\n\t\tfunction init() {\n\n\t\t\trenderItemsIndex = 0;\n\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\n\t\t}\n\n\t\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\t\tif ( renderItem === undefined ) {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: material.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = material.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t}\n\n\t\t\trenderItemsIndex ++;\n\n\t\t\treturn renderItem;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\t}\n\n\t\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\n\n\t\t}\n\n\t\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\t\tif ( opaque.length > 1 ) { opaque.sort( customOpaqueSort || painterSortStable ); }\n\t\t\tif ( transparent.length > 1 ) { transparent.sort( customTransparentSort || reversePainterSortStable ); }\n\n\t\t}\n\n\t\tfunction finish() {\n\n\t\t\t// Clear references from inactive renderItems in the list\n\n\t\t\tfor ( var i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\t\tvar renderItem = renderItems[ i ];\n\n\t\t\t\tif ( renderItem.id === null ) { break; }\n\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists() {\n\n\t\tvar lists = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\tlists.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar cameras = lists.get( scene );\n\t\t\tvar list;\n\t\t\tif ( cameras === undefined ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists.set( scene, new WeakMap() );\n\t\t\t\tlists.get( scene ).set( camera, list );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tlist = cameras.get( camera );\n\t\t\t\tif ( list === undefined ) {\n\n\t\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\t\tcameras.set( camera, list );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction UniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction ShadowUniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\t\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n\t}\n\n\tfunction WebGLLights() {\n\n\t\tvar cache = new UniformsCache();\n\n\t\tvar shadowCache = ShadowUniformsCache();\n\n\t\tvar state = {\n\n\t\t\tversion: 0,\n\n\t\t\thash: {\n\t\t\t\tdirectionalLength: - 1,\n\t\t\t\tpointLength: - 1,\n\t\t\t\tspotLength: - 1,\n\t\t\t\trectAreaLength: - 1,\n\t\t\t\themiLength: - 1,\n\n\t\t\t\tnumDirectionalShadows: - 1,\n\t\t\t\tnumPointShadows: - 1,\n\t\t\t\tnumSpotShadows: - 1\n\t\t\t},\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\n\t\t};\n\n\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup( lights, shadows, camera ) {\n\n\t\t\tvar r = 0, g = 0, b = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms;\n\t\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.ambient[ 0 ] = r;\n\t\t\tstate.ambient[ 1 ] = g;\n\t\t\tstate.ambient[ 2 ] = b;\n\n\t\t\tvar hash = state.hash;\n\n\t\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\t\thash.pointLength !== pointLength ||\n\t\t\t\thash.spotLength !== spotLength ||\n\t\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\t\thash.hemiLength !== hemiLength ||\n\t\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\t\tstate.version = nextVersion ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tstate: state\n\t\t};\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLRenderState() {\n\n\t\tvar lights = new WebGLLights();\n\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\n\t\t}\n\n\t\tfunction pushLight( light ) {\n\n\t\t\tlightsArray.push( light );\n\n\t\t}\n\n\t\tfunction pushShadow( shadowLight ) {\n\n\t\t\tshadowsArray.push( shadowLight );\n\n\t\t}\n\n\t\tfunction setupLights( camera ) {\n\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\n\t\t\tlights: lights\n\t\t};\n\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderStates() {\n\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\trenderStates.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar renderState;\n\n\t\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\trenderStates.set( scene, new WeakMap() );\n\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderStates.get( scene ).has( camera ) === false ) {\n\n\t\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderState = renderStates.get( scene ).get( camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn renderState;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\trenderStates = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  referencePosition: <float>,\n\t *  nearDistance: <float>,\n\t *  farDistance: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t};\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n  float mean = 0.0;\\n  float squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n    #ifdef HORIZONAL_PASS\\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n      mean += distribution.x;\\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n    #else\\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\\n      mean += depth;\\n      squared_mean += depth * depth;\\n    #endif\\n  }\\n  mean = mean * HALF_SAMPLE_RATE;\\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\\n  float std_dev = sqrt( squared_mean - mean * mean );\\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\t\tvar _frustum = new Frustum(),\n\n\t\t\t_shadowMapSize = new Vector2(),\n\t\t\t_viewportSize = new Vector2(),\n\n\t\t\t_viewport = new Vector4(),\n\n\t\t\t_depthMaterials = [],\n\t\t\t_distanceMaterials = [],\n\n\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\t\tvar shadowMaterialVertical = new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: { value: null },\n\t\t\t\tresolution: { value: new Vector2() },\n\t\t\t\tradius: { value: 4.0 }\n\t\t\t},\n\n\t\t\tvertexShader: vsm_vert,\n\n\t\t\tfragmentShader: vsm_frag\n\n\t\t} );\n\n\t\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\n\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute(\n\t\t\t\"position\",\n\t\t\tnew BufferAttribute(\n\t\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tvar fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function ( lights, scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) { return; }\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }\n\n\t\t\tif ( lights.length === 0 ) { return; }\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.setBlending( NoBlending );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\t\tif ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );\n\n\t\t\t\t\tif ( _shadowMapSize.x > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor ( var vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\t\tvar viewport = shadow.getViewport( vp );\n\n\t\t\t\t\t_viewport.set(\n\t\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t\t);\n\n\t\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t\t}\n\n\t\t\t\t// do blur pass for VSM\n\n\t\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t\t};\n\n\t\tfunction VSMPass( shadow, camera ) {\n\n\t\t\tvar geometry = _objects.update( fullScreenMesh );\n\n\t\t\t// vertical pass\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t\t// horizonal pass\n\n\t\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );\n\n\t\t}\n\n\t\tfunction getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _depthMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDepthMaterial( {\n\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_depthMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _distanceMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDistanceMaterial( {\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_distanceMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tvar result = null;\n\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( light.isPointLight === true ) {\n\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( customMaterial === undefined ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\tif ( geometry.isBufferGeometry === true ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t\t} else if ( geometry.isGeometry === true ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif ( object.isSkinnedMesh === true ) {\n\n\t\t\t\t\tif ( material.skinning === true ) {\n\n\t\t\t\t\t\tuseSkinning = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\n\t\t\t\tresult = getMaterialVariant( useMorphing, useSkinning, useInstancing );\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif ( type === VSMShadowMap ) {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t\t} else {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar maxVertexAttributes = gl.getParameter( 34921 );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\t\tvar enabledCapabilities = {};\n\n\t\tvar currentProgram = null;\n\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar maxTextures = gl.getParameter( 35661 );\n\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter( 7938 );\n\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, 10241, 9728 );\n\t\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\t\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t\t// init\n\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\tdepthBuffer.setClear( 1 );\n\t\tstencilBuffer.setClear( 0 );\n\n\t\tenable( 2929 );\n\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\tsetFlipSided( false );\n\t\tsetCullFace( CullFaceBack );\n\t\tenable( 2884 );\n\n\t\tsetBlending( NoBlending );\n\n\t\t//\n\n\t\tfunction initAttributes() {\n\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction useProgram( program ) {\n\n\t\t\tif ( currentProgram !== program ) {\n\n\t\t\t\tgl.useProgram( program );\n\n\t\t\t\tcurrentProgram = program;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tvar equationToGL = {};\n\t\tequationToGL[ AddEquation ] = 32774;\n\t\tequationToGL[ SubtractEquation ] = 32778;\n\t\tequationToGL[ ReverseSubtractEquation ] = 32779;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\tequationToGL[ MinEquation ] = 32775;\n\t\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t\t} else {\n\n\t\t\tvar extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar factorToGL = {};\n\t\tfactorToGL[ ZeroFactor ] = 0;\n\t\tfactorToGL[ OneFactor ] = 1;\n\t\tfactorToGL[ SrcColorFactor ] = 768;\n\t\tfactorToGL[ SrcAlphaFactor ] = 770;\n\t\tfactorToGL[ SrcAlphaSaturateFactor ] = 776;\n\t\tfactorToGL[ DstColorFactor ] = 774;\n\t\tfactorToGL[ DstAlphaFactor ] = 772;\n\t\tfactorToGL[ OneMinusSrcColorFactor ] = 769;\n\t\tfactorToGL[ OneMinusSrcAlphaFactor ] = 771;\n\t\tfactorToGL[ OneMinusDstColorFactor ] = 775;\n\t\tfactorToGL[ OneMinusDstAlphaFactor ] = 773;\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending === NoBlending ) {\n\n\t\t\t\tif ( currentBlendingEnabled ) {\n\n\t\t\t\t\tdisable( 3042 );\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ! currentBlendingEnabled ) {\n\n\t\t\t\tenable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = true;\n\n\t\t\t}\n\n\t\t\tif ( blending !== CustomBlending ) {\n\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// custom blending\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\n\t\t}\n\n\t\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( 2884 )\n\t\t\t\t: enable( 2884 );\n\n\t\t\tvar flipSided = ( material.side === BackSide );\n\t\t\tif ( frontFaceCW ) { flipSided = ! flipSided; }\n\n\t\t\tsetFlipSided( flipSided );\n\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t\t? setBlending( NoBlending )\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest( stencilWrite );\n\t\t\tif ( stencilWrite ) {\n\n\t\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t\t}\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( 2884 );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 2884 );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) { gl.lineWidth( width ); }\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( 32823 );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 32823 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( 3089 );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 3089 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unbindTexture() {\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage3D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tenabledCapabilities = {};\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentProgram = null;\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\n\t\t\tuseProgram: useProgram,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\t\tvar _canvas;\n\n\t\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\t\tvar useOffscreenCanvas = false;\n\n\t\ttry {\n\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\n\n\t\t} catch ( err ) {\n\n\t\t\t// Ignore any errors\n\n\t\t}\n\n\t\tfunction createCanvas( width, height ) {\n\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\t\treturn useOffscreenCanvas ?\n\t\t\t\tnew OffscreenCanvas( width, height ) :\n\t\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t}\n\n\t\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\t\tvar scale = 1;\n\n\t\t\t// handle case if texture exceeds max size\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t}\n\n\t\t\t// only perform resize if necessary\n\n\t\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t\t// only perform resize for certain image types\n\n\t\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\t\tvar floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\n\t\t\t\t\tvar width = floor( scale * image.width );\n\t\t\t\t\tvar height = floor( scale * image.height );\n\n\t\t\t\t\tif ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }\n\n\t\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\t\treturn canvas;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\tif ( isWebGL2 ) { return false; }\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t\t_gl.generateMipmap( target );\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t\t}\n\n\t\tfunction getInternalFormat( internalFormatName, glFormat, glType ) {\n\n\t\t\tif ( isWebGL2 === false ) { return glFormat; }\n\n\t\t\tif ( internalFormatName !== null ) {\n\n\t\t\t\tif ( _gl[ internalFormatName ] !== undefined ) { return _gl[ internalFormatName ]; }\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t\t}\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif ( glFormat === 6403 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 33326; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 33325; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 33321; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6407 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34837; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34843; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32849; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6408 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34836; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34842; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32856; }\n\n\t\t\t}\n\n\t\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\t\treturn 9728;\n\n\t\t\t}\n\n\t\t\treturn 9729;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t\t_videoTextures.delete( texture );\n\n\t\t\t}\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) { return; }\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) { return; }\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) { _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer ); }\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\n\t\t\ttextureUnits = 0;\n\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.isVideoTexture ) { updateVideoTexture( texture ); }\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture2DArray( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture3D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tif ( texture.image.length !== 6 ) { return; }\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\n\t\t\t\tvar isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\t\tvar mipmaps;\n\n\t\t\t\tif ( isCompressed ) {\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\t\tvar mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tvar wrappingToGL = {};\n\t\twrappingToGL[ RepeatWrapping ] = 10497;\n\t\twrappingToGL[ ClampToEdgeWrapping ] = 33071;\n\t\twrappingToGL[ MirroredRepeatWrapping ] = 33648;\n\n\t\tvar filterToGL = {};\n\t\tfilterToGL[ NearestFilter ] = 9728;\n\t\tfilterToGL[ NearestMipmapNearestFilter ] = 9984;\n\t\tfilterToGL[ NearestMipmapLinearFilter ] = 9986;\n\t\tfilterToGL[ LinearFilter ] = 9729;\n\t\tfilterToGL[ LinearMipmapNearestFilter ] = 9985;\n\t\tfilterToGL[ LinearMipmapLinearFilter ] = 9987;\n\n\t\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\t\tif ( supportsMips ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }\n\t\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction initTexture( textureProperties, texture ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tvar textureType = 3553;\n\n\t\t\tif ( texture.isDataTexture2DArray ) { textureType = 35866; }\n\t\t\tif ( texture.isDataTexture3D ) { textureType = 32879; }\n\n\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\n\t\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\t\tvar supportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\t\tglInternalFormat = 35056;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// validation checks for WebGL 1\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( textureType, texture, image.width, image.height );\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\tvar glInternalFormat = 33189;\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\t\tif ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }\n\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\t// Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif ( isWebGL2 && renderTarget.texture.format === RGBFormat && ( renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType ) ) {\n\n\t\t\t\trenderTarget.texture.format = RGBAFormat;\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );\n\n\t\t\t}\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\n\t\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 34067, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 3553, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) { mask |= 256; }\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) { mask |= 1024; }\n\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer ); // see #18905\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t\t}\n\n\t\tfunction updateVideoTexture( texture ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\t// Check the last frame we updated the VideoTexture\n\n\t\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t\t_videoTextures.set( texture, frame );\n\t\t\t\ttexture.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// backwards compatibility\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTexture2D = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( texture, slot );\n\n\t\t}\n\n\t\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTextureCube = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLCubeRenderTarget.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\tsetTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLCubeRenderTarget\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\n\t}\n\n\t/**\n\t * @author thespite / http://www.twitter.com/thespite\n\t */\n\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === UnsignedByteType ) { return 5121; }\n\t\t\tif ( p === UnsignedShort4444Type ) { return 32819; }\n\t\t\tif ( p === UnsignedShort5551Type ) { return 32820; }\n\t\t\tif ( p === UnsignedShort565Type ) { return 33635; }\n\n\t\t\tif ( p === ByteType ) { return 5120; }\n\t\t\tif ( p === ShortType ) { return 5122; }\n\t\t\tif ( p === UnsignedShortType ) { return 5123; }\n\t\t\tif ( p === IntType ) { return 5124; }\n\t\t\tif ( p === UnsignedIntType ) { return 5125; }\n\t\t\tif ( p === FloatType ) { return 5126; }\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 5131; }\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) { return 6406; }\n\t\t\tif ( p === RGBFormat ) { return 6407; }\n\t\t\tif ( p === RGBAFormat ) { return 6408; }\n\t\t\tif ( p === LuminanceFormat ) { return 6409; }\n\t\t\tif ( p === LuminanceAlphaFormat ) { return 6410; }\n\t\t\tif ( p === DepthFormat ) { return 6402; }\n\t\t\tif ( p === DepthStencilFormat ) { return 34041; }\n\t\t\tif ( p === RedFormat ) { return 6403; }\n\n\t\t\t// WebGL2 formats.\n\n\t\t\tif ( p === RedIntegerFormat ) { return 36244; }\n\t\t\tif ( p === RGFormat ) { return 33319; }\n\t\t\tif ( p === RGIntegerFormat ) { return 33320; }\n\t\t\tif ( p === RGBIntegerFormat ) { return 36248; }\n\t\t\tif ( p === RGBAIntegerFormat ) { return 36249; }\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_ETC2_Format ) { return extension.COMPRESSED_RGB8_ETC2; }\n\t\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) { return extension.COMPRESSED_RGBA8_ETC2_EAC; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 34042; }\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { convert: convert };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group,\n\n\t\tisGroup: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebXRManager( renderer, gl ) {\n\n\t\tvar scope = this;\n\n\t\tvar session = null;\n\n\t\tvar framebufferScaleFactor = 1.0;\n\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\n\t\tvar pose = null;\n\n\t\tvar controllers = [];\n\t\tvar inputSourcesMap = new Map();\n\n\t\t//\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\tvar _currentDepthNear = null;\n\t\tvar _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = {};\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\tif ( controller.targetRay === undefined ) {\n\n\t\t\t\tcontroller.targetRay = new Group();\n\t\t\t\tcontroller.targetRay.matrixAutoUpdate = false;\n\t\t\t\tcontroller.targetRay.visible = false;\n\n\t\t\t}\n\n\t\t\treturn controller.targetRay;\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = {};\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\tif ( controller.grip === undefined ) {\n\n\t\t\t\tcontroller.grip = new Group();\n\t\t\t\tcontroller.grip.matrixAutoUpdate = false;\n\t\t\t\tcontroller.grip.visible = false;\n\n\t\t\t}\n\n\t\t\treturn controller.grip;\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tvar controller = inputSourcesMap.get( event.inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: event.type } );\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.dispatchEvent( { type: event.type } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tcontroller.targetRay.visible = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tcontroller.grip.visible = false;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tinputSourcesMap.clear();\n\n\t\t\t//\n\n\t\t\trenderer.setFramebuffer( null );\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tfunction onRequestReferenceSpace( value ) {\n\n\t\t\treferenceSpace = value;\n\n\t\t\tanimation.setContext( session );\n\t\t\tanimation.start();\n\n\t\t\tscope.isPresenting = true;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\t// Warn if function is used while presenting\n\t\t\tif ( scope.isPresenting == true ) {\n\n\t\t\t\tconsole.warn( \"WebXRManager: Cannot change framebuffer scale while presenting VR content\" );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn referenceSpace;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\t\tvar attributes = gl.getContextAttributes();\n\n\t\t\t\tvar layerInit = {\n\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t};\n\n\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\tvar baseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\tsession.updateRenderState( { baseLayer: baseLayer } );\n\n\t\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\n\n\t\t\t\t//\n\n\t\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction updateInputSources( event ) {\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\t// Assign inputSources to available controllers\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t\t}\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( var i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tvar inputSource = event.removed[ i ];\n\t\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( var i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tvar inputSource = event.added[ i ];\n\t\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar cameraLPos = new Vector3();\n\t\tvar cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * @author jsantell / https://www.jsantell.com/\n\t\t *\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\t\tvar projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tvar left = near * leftFov;\n\t\t\tvar right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tvar zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tvar xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tvar near2 = near + zOffset;\n\t\t\tvar far2 = far + zOffset;\n\t\t\tvar left2 = left - xOffset;\n\t\t\tvar right2 = right + ( ipd - xOffset );\n\t\t\tvar top2 = topFov * far / far2 * near2;\n\t\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t}\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update camera and its children\n\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tvar children = camera.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( referenceSpace );\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\n\t\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\n\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tvar view = views[ i ];\n\t\t\t\t\tvar viewport = baseLayer.getViewport( view );\n\n\t\t\t\t\tvar camera = cameraVR.cameras[ i ];\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tvar controller = controllers[ i ];\n\n\t\t\t\tvar inputSource = inputSources[ i ];\n\n\t\t\t\tvar inputPose = null;\n\t\t\t\tvar gripPose = null;\n\n\t\t\t\tif ( inputSource ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\t\t\tcontroller.targetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\t\t\tcontroller.targetRay.matrix.decompose( controller.targetRay.position, controller.targetRay.rotation, controller.targetRay.scale );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip && inputSource.gripSpace ) {\n\n\t\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\t\tcontroller.grip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\t\tcontroller.grip.matrix.decompose( controller.grip.position, controller.grip.rotation, controller.grip.scale );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.visible = inputPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.visible = gripPose !== null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time, frame ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n\tObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null;\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\n\t\t// Debug configuration container\n\t\tthis.debug = {\n\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t};\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.outputEncoding = LinearEncoding;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this,\n\n\t\t\t_isContextLost = false,\n\n\t\t\t// internal state cache\n\n\t\t\t_framebuffer = null,\n\n\t\t\t_currentActiveCubeFace = 0,\n\t\t\t_currentActiveMipmapLevel = 0,\n\t\t\t_currentRenderTarget = null,\n\t\t\t_currentFramebuffer = null,\n\t\t\t_currentMaterialId = - 1,\n\n\t\t\t// geometry and program caching\n\n\t\t\t_currentGeometryProgram = {\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false\n\t\t\t},\n\n\t\t\t_currentCamera = null,\n\t\t\t_currentArrayCamera = null,\n\n\t\t\t_currentViewport = new Vector4(),\n\t\t\t_currentScissor = new Vector4(),\n\t\t\t_currentScissorTest = null,\n\n\t\t\t//\n\n\t\t\t_width = _canvas.width,\n\t\t\t_height = _canvas.height,\n\n\t\t\t_pixelRatio = 1,\n\t\t\t_opaqueSort = null,\n\t\t\t_transparentSort = null,\n\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissorTest = false,\n\n\t\t\t// frustum\n\n\t\t\t_frustum = new Frustum(),\n\n\t\t\t// clipping\n\n\t\t\t_clipping = new WebGLClipping(),\n\t\t\t_clippingEnabled = false,\n\t\t\t_localClippingEnabled = false,\n\n\t\t\t// camera matrices cache\n\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_vector3 = new Vector3();\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tvar _gl;\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,\n\t\t\t\txrCompatible: true\n\t\t\t};\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\t\tthrow error;\n\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, attributes, geometries, objects;\n\t\tvar programCache, renderLists, renderStates;\n\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tvar utils;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\tif ( capabilities.isWebGL2 === false ) {\n\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\t\textensions.get( 'OES_texture_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\t\trenderLists = new WebGLRenderLists();\n\t\t\trenderStates = new WebGLRenderStates();\n\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// xr\n\n\t\tvar xr = new WebXRManager( _this, _gl );\n\n\t\tthis.xr = xr;\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\t\tthis.shadowMap = shadowMap;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.loseContext(); }\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.restoreContext(); }\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) { return; }\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width, _height );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tif ( xr.isPresenting ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\n\n\t\t\t\ttarget = new Vector4();\n\n\t\t\t}\n\n\t\t\treturn target.copy( _currentViewport );\n\n\t\t};\n\n\t\tthis.getViewport = function ( target ) {\n\n\t\t\treturn target.copy( _viewport );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_viewport.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissor = function ( target ) {\n\n\t\t\treturn target.copy( _scissor );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_scissor.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\n\t\t\treturn _scissorTest;\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\tthis.setOpaqueSort = function ( method ) {\n\n\t\t\t_opaqueSort = method;\n\n\t\t};\n\n\t\tthis.setTransparentSort = function ( method ) {\n\n\t\t\t_transparentSort = method;\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn background.getClearColor();\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) { bits |= 16384; }\n\t\t\tif ( depth === undefined || depth ) { bits |= 256; }\n\t\t\tif ( stencil === undefined || stencil ) { bits |= 1024; }\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tobjects.dispose();\n\n\t\t\txr.dispose();\n\n\t\t\tanimation.stop();\n\n\t\t\tthis.forceContextLoss();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tinitGLContext();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }\n\t\t\tif ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }\n\t\t\tif ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }\n\t\t\tif ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.position );\n\t\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.normal );\n\t\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.uv );\n\t\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.color );\n\t\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.color );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( 4, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tvar tempScene = new Scene();\n\n\t\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\t\tif ( scene === null ) { scene = tempScene; } // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\n\t\t\t\t_currentGeometryProgram.program !== program.id ||\n\t\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\n\n\t\t\t\t_currentGeometryProgram.geometry = geometry.id;\n\t\t\t\t_currentGeometryProgram.program = program.id;\n\t\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\tif ( material.morphTargets || material.morphNormals ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tif ( position === undefined || position.count === 0 ) { return; }\n\n\t\t\t} else if ( index.count === 0 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( object, geometry, material, program );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t_gl.bindBuffer( 34963, attribute.buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) { return; }\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( 0 );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, object.count );\n\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction setupVertexAttributes( object, geometry, material, program ) {\n\n\t\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }\n\n\t\t\t}\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( name === 'instanceMatrix' ) {\n\n\t\t\t\t\t\tvar attribute = attributes.get( object.instanceMatrix );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 0, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 1, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 2, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 3, 1 );\n\n\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t}\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tvar compiled = {};\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.material ) {\n\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( object.material[ i ].uuid in compiled === false ) {\n\n\t\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene, object );\n\t\t\t\t\t\t\t\tcompiled[ object.material[ i ].uuid ] = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( object.material.uuid in compiled === false ) {\n\n\t\t\t\t\t\tinitMaterial( object.material, scene, object );\n\t\t\t\t\t\tcompiled[ object.material.uuid ] = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( xr.isPresenting ) { return; }\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof window !== 'undefined' ) { animation.setContext( window ); }\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop( callback );\n\n\t\t\tanimation.start();\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif ( arguments[ 2 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\n\t\t\t\trenderTarget = arguments[ 2 ];\n\n\t\t\t}\n\n\t\t\tif ( arguments[ 3 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\n\t\t\t\tforceClear = arguments[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost ) { return; }\n\n\t\t\t// reset caching for this frame\n\n\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t_currentGeometryProgram.program = null;\n\t\t\t_currentGeometryProgram.wireframe = false;\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) { camera.updateMatrixWorld(); }\n\n\t\t\tif ( xr.enabled && xr.isPresenting ) {\n\n\t\t\t\tcamera = xr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled ) { _clipping.beginShadows(); }\n\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tif ( _clippingEnabled ) { _clipping.endShadows(); }\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset ) { this.info.reset(); }\n\n\t\t\tif ( renderTarget !== undefined ) {\n\n\t\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( scene.overrideMaterial ) {\n\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera, overrideMaterial ); }\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera, overrideMaterial ); }\n\n\t\t\t} else {\n\n\t\t\t\t// opaque pass (front-to-back order)\n\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera ); }\n\n\t\t\t\t// transparent pass (back-to-front order)\n\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera ); }\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tscene.onAfterRender( _this, scene, camera );\n\n\t\t\t//\n\n\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t\t// _gl.finish();\n\n\t\t\tcurrentRenderList = null;\n\t\t\tcurrentRenderState = null;\n\n\t\t};\n\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isGroup ) {\n\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\t\tif ( object.autoUpdate === true ) { object.update( camera ); }\n\n\t\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t\t_currentGeometryProgram.program = null;\n\t\t\t\t_currentGeometryProgram.wireframe = false;\n\n\t\t\t\trenderObjectImmediate( object, program );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t}\n\n\t\tfunction initMaterial( material, scene, object ) {\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tvar lightsStateVersion = lights.state.version;\n\n\t\t\tvar parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, _clipping.numPlanes, _clipping.numIntersection, object );\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.cacheKey !== programCacheKey ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\n\n\t\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\t\tprogramChange = false;\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\t\tmaterialProperties.outputEncoding = _this.outputEncoding;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.fog = scene.fog;\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, scene, material, object ) {\n\n\t\t\ttextures.resetTextureUnits();\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\t\tvar materialProperties = properties.get( material );\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif ( _clippingEnabled ) {\n\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.environment !== environment ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.outputEncoding !== _this.outputEncoding ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\t\t\t\tmaterialProperties.__version = material.version;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo( size );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material, environment );\n\n\t\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material, environment );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material, environment );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsMatcap( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\t\t\trefreshUniformsSprites( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\t\tm_uniforms.color.value.copy( material.color );\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t\t}\n\n\t\t\t\t// RectAreaLight Texture\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// Uniforms (refresh uniforms objects)\n\n\t\tfunction refreshUniformsCommon( uniforms, material, environment ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif ( material.color ) {\n\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( material.specularMap ) {\n\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\t}\n\n\t\t\tvar envMap = material.envMap || environment;\n\n\t\t\tif ( envMap ) {\n\n\t\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( envMap ).__maxMipLevel;\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\t\t\tvar uv2ScaleMap;\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t\t} else if ( material.lightMap ) {\n\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _height * 0.5;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material, environment ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap || environment ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material, environment ) {\n\n\t\t\trefreshUniformsStandard( uniforms, material, environment );\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniforms.transparency.value = material.transparency;\n\n\t\t}\n\n\t\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\t\tif ( material.matcap ) {\n\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\tfunction materialNeedsLights( material ) {\n\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t\t}\n\n\t\t//\n\t\tthis.setFramebuffer = function ( value ) {\n\n\t\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }\n\n\t\t\t_framebuffer = value;\n\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\n\t\t\treturn _currentActiveCubeFace;\n\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\n\t\t\treturn _currentActiveMipmapLevel;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace || 0 ];\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t\t}\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\t\tif ( level === undefined ) { level = 0; }\n\n\t\t\tvar levelScale = Math.pow( 2, - level );\n\t\t\tvar width = Math.floor( texture.image.width * levelScale );\n\t\t\tvar height = Math.floor( texture.image.height * levelScale );\n\t\t\tvar glFormat = utils.convert( texture.format );\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\t\tvar glType = utils.convert( dstTexture.type );\n\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.initTexture = function ( texture ) {\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tObject.assign( FogExp2.prototype, {\n\n\t\tisFogExp2: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new FogExp2( this.color, this.density );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tObject.assign( Fog.prototype, {\n\n\t\tisFog: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new Fog( this.color, this.near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tvar _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$6.x = this.getX( i );\n\t\t\t\t_vector$6.y = this.getY( i );\n\t\t\t\t_vector$6.z = this.getZ( i );\n\n\t\t\t\t_vector$6.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *  rotation: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _geometry;\n\n\tvar _intersectPoint = new Vector3();\n\tvar _worldScale = new Vector3();\n\tvar _mvPosition = new Vector3();\n\n\tvar _alignedPosition = new Vector2();\n\tvar _rotatedPosition = new Vector2();\n\tvar _viewWorldMatrix = new Matrix4();\n\n\tvar _vA$1 = new Vector3();\n\tvar _vB$1 = new Vector3();\n\tvar _vC$1 = new Vector3();\n\n\tvar _uvA$1 = new Vector2();\n\tvar _uvB$1 = new Vector2();\n\tvar _uvC$1 = new Vector2();\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tvar float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tif ( raycaster.camera === null ) {\n\n\t\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\t\t\tif ( rotation !== 0 ) {\n\n\t\t\t\tcos = Math.cos( rotation );\n\t\t\t\tsin = Math.sin( rotation );\n\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\n\t\t\ttransformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t\t_uvA$1.set( 0, 0 );\n\t\t\t_uvB$1.set( 1, 0 );\n\t\t\t_uvC$1.set( 1, 1 );\n\n\t\t\t// check first triangle\n\t\t\tvar intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );\n\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t\t_uvB$1.set( 0, 1 );\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );\n\t\t\t\tif ( intersect === null ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.center !== undefined ) { this.center.copy( source.center ); }\n\n\t\t\treturn this;\n\n\t\t}\n\n\n\t} );\n\n\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t\t// to check if rotation is not zero\n\t\tif ( sin !== undefined ) {\n\n\t\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t\t} else {\n\n\t\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t\t}\n\n\n\t\tvertexPosition.copy( mvPosition );\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y;\n\n\t\t// transform to world space\n\t\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n\t}\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v1$4 = new Vector3();\n\tvar _v2$2 = new Vector3();\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tisLOD: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) { distance = 0; }\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCurrentLevel: function () {\n\n\t\t\treturn this._currentLevel;\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn levels[ i - 1 ].object;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( _v1$4 );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t_v2$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = _v1$4.distanceTo( _v2$2 ) / camera.zoom;\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.autoUpdate === false ) { data.object.autoUpdate = false; }\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar vector = new Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\t\tvector.x = skinWeight.getX( i );\n\t\t\t\tvector.y = skinWeight.getY( i );\n\t\t\t\tvector.z = skinWeight.getZ( i );\n\t\t\t\tvector.w = skinWeight.getW( i );\n\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tvar _offsetMatrix = new Matrix4();\n\tvar _identityMatrix = new Matrix4();\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\tthis.frame = - 1;\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tvar bone, i, il;\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t},\n\n\t\tgetBoneByName: function ( name ) {\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone.name === name ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tdispose: function ( ) {\n\n\t\t\tif ( this.boneTexture ) {\n\n\t\t\t\tthis.boneTexture.dispose();\n\n\t\t\t\tthis.boneTexture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh( geometry, material, count ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t}\n\n\tInstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: InstancedMesh,\n\n\t\tisInstancedMesh: true,\n\n\t\tgetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\n\t\t\tif ( _mesh.material === undefined ) { return; }\n\n\t\t\tfor ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t\t// calculate the world matrix for each instance\n\n\t\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t\t// the mesh represents this single instance\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t\t// process the result of raycast\n\n\t\t\t\tif ( _instanceIntersects.length > 0 ) {\n\n\t\t\t\t\t_instanceIntersects[ 0 ].instanceId = instanceId;\n\t\t\t\t\t_instanceIntersects[ 0 ].object = this;\n\n\t\t\t\t\tintersects.push( _instanceIntersects[ 0 ] );\n\n\t\t\t\t\t_instanceIntersects.length = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start = new Vector3();\n\tvar _end = new Vector3();\n\tvar _inverseMatrix$1 = new Matrix4();\n\tvar _ray$1 = new Ray();\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial();\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i ] += _start.distanceTo( _end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tlineDistances[ 0 ] = 0;\n\n\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Line.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$2.copy( geometry.boundingSphere );\n\t\t\t_sphere$2.applyMatrix4( matrixWorld );\n\t\t\t_sphere$2.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$1.getInverse( matrixWorld );\n\t\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localThresholdSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localThresholdSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localThresholdSq ) { continue; }\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start$1 = new Vector3();\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t_start$1.copy( vertices[ i ] );\n\t\t\t\t\t_end$1.copy( vertices[ i + 1 ] );\n\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mgreter / http://github.com/mgreter\n\t */\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t *\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\tvar _ray$2 = new Ray();\n\tvar _sphere$3 = new Sphere();\n\tvar _position$1 = new Vector3();\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t\t_sphere$3.applyMatrix4( matrixWorld );\n\t\t\t_sphere$3.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$2.getInverse( matrixWorld );\n\t\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t_position$1.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\t_position$1.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint( point );\n\n\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint( point, intersectPoint );\n\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\t\tconstructor: VideoTexture,\n\n\t\tisVideoTexture: true,\n\n\t\tupdate: function () {\n\n\t\t\tvar video = this.image;\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tthis.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }\n\t\tif ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar i, j, l, o, ol;\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\t\tvar vertex;\n\n\t\t// different logic for Geometry and BufferGeometry\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\tvar position, indices, groups;\n\t\t\tvar group, start, count;\n\t\t\tvar index1, index2;\n\n\t\t\tvertex = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\t\t\t\tindices = geometry.index;\n\t\t\t\tgroups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\t\tstart = group.start;\n\t\t\t\t\tcount = group.count;\n\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( key in edges ) {\n\n\t\t\t\t\te = edges[ key ];\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tvar i, j;\n\n\t\tif ( func.length < 3 ) {\n\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\n\n\t\t}\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tfunc( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\t\tvar a = i * sliceCount + j;\n\t\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PolyhedronGeometry\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\tvar i, j;\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }\n\t\t\t\t\tif ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }\n\t\t\t\t\tif ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TetrahedronGeometry\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t// TetrahedronBufferGeometry\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// OctahedronGeometry\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// IcosahedronGeometry\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// DodecahedronGeometry\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t, 0, - r, t,\n\t\t\t 0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\t r, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\t// TubeGeometry\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t// TubeBufferGeometry\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar P = new Vector3();\n\n\t\tvar i, j;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin = Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\tTubeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * based on http://www.blackpawn.com/texts/pqtorus/\n\t */\n\n\t// TorusKnotGeometry\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t// TorusKnotBufferGeometry\n\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, j;\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TorusGeometry\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t// TorusBufferGeometry\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * Port from https://github.com/mapbox/earcut (v2.1.5)\n\t */\n\n\tvar Earcut = {\n\n\t\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\t\tdim = dim || 2;\n\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\t\ttriangles = [];\n\n\t\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }\n\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\t\tif ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }\n\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\t\tif ( data.length > 80 * dim ) {\n\n\t\t\t\tminX = maxX = data[ 0 ];\n\t\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\t\tx = data[ i ];\n\t\t\t\t\ty = data[ i + 1 ];\n\t\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\t\tif ( y > maxY ) { maxY = y; }\n\n\t\t\t\t}\n\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t\t}\n\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\t\treturn triangles;\n\n\t\t}\n\n\t};\n\n\t// create a circular doubly linked list from polygon points in the specified winding order\n\tfunction linkedList( data, start, end, dim, clockwise ) {\n\n\t\tvar i, last;\n\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\t\tfor ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t} else {\n\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t}\n\n\t\tif ( last && equals( last, last.next ) ) {\n\n\t\t\tremoveNode( last );\n\t\t\tlast = last.next;\n\n\t\t}\n\n\t\treturn last;\n\n\t}\n\n\t// eliminate colinear or duplicate points\n\tfunction filterPoints( start, end ) {\n\n\t\tif ( ! start ) { return start; }\n\t\tif ( ! end ) { end = start; }\n\n\t\tvar p = start,\n\t\t\tagain;\n\t\tdo {\n\n\t\t\tagain = false;\n\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\t\tremoveNode( p );\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif ( p === p.next ) { break; }\n\t\t\t\tagain = true;\n\n\t\t\t} else {\n\n\t\t\t\tp = p.next;\n\n\t\t\t}\n\n\t\t} while ( again || p !== end );\n\n\t\treturn end;\n\n\t}\n\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\t\tif ( ! ear ) { return; }\n\n\t\t// interlink polygon nodes in z-order\n\t\tif ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }\n\n\t\tvar stop = ear,\n\t\t\tprev, next;\n\n\t\t// iterate through ears, slicing them one by one\n\t\twhile ( ear.prev !== ear.next ) {\n\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push( prev.i / dim );\n\t\t\t\ttriangles.push( ear.i / dim );\n\t\t\t\ttriangles.push( next.i / dim );\n\n\t\t\t\tremoveNode( ear );\n\n\t\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tear = next;\n\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\t\tif ( ear === stop ) {\n\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif ( ! pass ) {\n\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// check whether a polygon node forms a valid ear with adjacent nodes\n\tfunction isEar( ear ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// now make sure we don't have other points inside the potential ear\n\t\tvar p = ear.next.next;\n\n\t\twhile ( p !== ear.prev ) {\n\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// triangle bbox; min & max are calculated like this for speed\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t\t// z-order range for the current triangle bbox;\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t\tvar p = ear.prevZ,\n\t\t\tn = ear.nextZ;\n\n\t\t// look for points inside the triangle in both directions\n\t\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\t// look for remaining points in decreasing z-order\n\t\twhile ( p && p.z >= minZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t}\n\n\t\t// look for remaining points in increasing z-order\n\t\twhile ( n && n.z <= maxZ ) {\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t// go through all polygon nodes and cure small local self-intersections\n\tfunction cureLocalIntersections( start, triangles, dim ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tvar a = p.prev,\n\t\t\t\tb = p.next.next;\n\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\t\ttriangles.push( a.i / dim );\n\t\t\t\ttriangles.push( p.i / dim );\n\t\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t\t// remove two nodes involved\n\t\t\t\tremoveNode( p );\n\t\t\t\tremoveNode( p.next );\n\n\t\t\t\tp = start = b;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn p;\n\n\t}\n\n\t// try splitting polygon into two and triangulate them independently\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\t\tdo {\n\n\t\t\tvar b = a.next.next;\n\t\t\twhile ( b !== a.prev ) {\n\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t\t// filter colinear points around the cuts\n\t\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t\t// run earcut on each half\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\n\t\t\t}\n\n\t\t\ta = a.next;\n\n\t\t} while ( a !== start );\n\n\t}\n\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\t\tvar queue = [],\n\t\t\ti, len, start, end, list;\n\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\t\tstart = holeIndices[ i ] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\t\tlist = linkedList( data, start, end, dim, false );\n\t\t\tif ( list === list.next ) { list.steiner = true; }\n\t\t\tqueue.push( getLeftmost( list ) );\n\n\t\t}\n\n\t\tqueue.sort( compareX );\n\n\t\t// process holes from left to right\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\t\teliminateHole( queue[ i ], outerNode );\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t\t}\n\n\t\treturn outerNode;\n\n\t}\n\n\tfunction compareX( a, b ) {\n\n\t\treturn a.x - b.x;\n\n\t}\n\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\n\tfunction eliminateHole( hole, outerNode ) {\n\n\t\touterNode = findHoleBridge( hole, outerNode );\n\t\tif ( outerNode ) {\n\n\t\t\tvar b = splitPolygon( outerNode, hole );\n\t\t\tfilterPoints( b, b.next );\n\n\t\t}\n\n\t}\n\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\tfunction findHoleBridge( hole, outerNode ) {\n\n\t\tvar p = outerNode,\n\t\t\thx = hole.x,\n\t\t\thy = hole.y,\n\t\t\tqx = - Infinity,\n\t\t\tm;\n\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\t\tdo {\n\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\t\tqx = x;\n\t\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\t\tif ( hy === p.y ) { return p; }\n\t\t\t\t\t\tif ( hy === p.next.y ) { return p.next; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== outerNode );\n\n\t\tif ( ! m ) { return null; }\n\n\t\tif ( hx === qx ) { return m.prev; } // hole touches outer segment; pick lower endpoint\n\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\tmx = m.x,\n\t\t\tmy = m.y,\n\t\t\ttanMin = Infinity,\n\t\t\ttan;\n\n\t\tp = m.next;\n\n\t\twhile ( p !== stop ) {\n\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\n\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn m;\n\n\t}\n\n\t// interlink polygon nodes in z-order\n\tfunction indexCurve( start, minX, minY, invSize ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tif ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\n\t\tsortLinked( p );\n\n\t}\n\n\t// Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\tfunction sortLinked( list ) {\n\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize,\n\t\t\tinSize = 1;\n\n\t\tdo {\n\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile ( p ) {\n\n\t\t\t\tnumMerges ++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\t\tpSize ++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif ( ! q ) { break; }\n\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize --;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize --;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( tail ) { tail.nextZ = e; }\n\t\t\t\t\telse { list = e; }\n\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\n\t\t} while ( numMerges > 1 );\n\n\t\treturn list;\n\n\t}\n\n\t// z-order of a point given coords and inverse of the longer side of data bbox\n\tfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * ( x - minX ) * invSize;\n\t\ty = 32767 * ( y - minY ) * invSize;\n\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\t\treturn x | ( y << 1 );\n\n\t}\n\n\t// find the leftmost node of a polygon ring\n\tfunction getLeftmost( start ) {\n\n\t\tvar p = start,\n\t\t\tleftmost = start;\n\t\tdo {\n\n\t\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn leftmost;\n\n\t}\n\n\t// check if a point lies within a convex triangle\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t\t   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t\t   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n\t}\n\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\tfunction isValidDiagonal( a, b ) {\n\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\n\t\t\t   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\n\n\t}\n\n\t// signed area of a triangle\n\tfunction area( p, q, r ) {\n\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n\t}\n\n\t// check if two points are equal\n\tfunction equals( p1, p2 ) {\n\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\n\t}\n\n\t// check if two segments intersect\n\tfunction intersects( p1, q1, p2, q2 ) {\n\n\t\tif ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||\n\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) { return true; }\n\t\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\n\t\t\t   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\n\n\t}\n\n\t// check if a polygon diagonal intersects any polygon segments\n\tfunction intersectsPolygon( a, b ) {\n\n\t\tvar p = a;\n\t\tdo {\n\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\tintersects( p, p.next, a, b ) ) { return true; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn false;\n\n\t}\n\n\t// check if a polygon diagonal is locally inside the polygon\n\tfunction locallyInside( a, b ) {\n\n\t\treturn area( a.prev, a, a.next ) < 0 ?\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n\t}\n\n\t// check if the middle point of a polygon diagonal is inside the polygon\n\tfunction middleInside( a, b ) {\n\n\t\tvar p = a,\n\t\t\tinside = false,\n\t\t\tpx = ( a.x + b.x ) / 2,\n\t\t\tpy = ( a.y + b.y ) / 2;\n\t\tdo {\n\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\t\t{ inside = ! inside; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn inside;\n\n\t}\n\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\tfunction splitPolygon( a, b ) {\n\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\t\tan = a.next,\n\t\t\tbp = b.prev;\n\n\t\ta.next = b;\n\t\tb.prev = a;\n\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\n\t\treturn b2;\n\n\t}\n\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\n\tfunction insertNode( i, x, y, last ) {\n\n\t\tvar p = new Node( i, x, y );\n\n\t\tif ( ! last ) {\n\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\n\t\t} else {\n\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\n\t\t}\n\n\t\treturn p;\n\n\t}\n\n\tfunction removeNode( p ) {\n\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\n\t\tif ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }\n\t\tif ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }\n\n\t}\n\n\tfunction Node( i, x, y ) {\n\n\t\t// vertex index in coordinates array\n\t\tthis.i = i;\n\n\t\t// vertex coordinates\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\t// previous and next vertex nodes in a polygon ring\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\n\t\t// z-order curve value\n\t\tthis.z = null;\n\n\t\t// previous and next nodes in z-order\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null;\n\n\t\t// indicates whether this is a steiner point\n\t\tthis.steiner = false;\n\n\t}\n\n\tfunction signedArea( data, start, end, dim ) {\n\n\t\tvar sum = 0;\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\t\tj = i;\n\n\t\t}\n\n\t\treturn sum;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t},\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\t\tvar holeIndices = []; // array of hole indices\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\taddContour( vertices, contour );\n\n\t\t\t//\n\n\t\t\tvar holeIndex = contour.length;\n\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\t\tholeIndices.push( holeIndex );\n\t\t\t\tholeIndex += holes[ i ].length;\n\t\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t\t}\n\n\t\t\treturn faces;\n\n\t\t}\n\n\t};\n\n\tfunction removeDupEndPts( points ) {\n\n\t\tvar l = points.length;\n\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.pop();\n\n\t\t}\n\n\t}\n\n\tfunction addContour( vertices, contour ) {\n\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\t\tvertices.push( contour[ i ].x );\n\t\t\tvertices.push( contour[ i ].y );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  depth: <float>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float>, // how far from shape outline does bevel start\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\tExtrudeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t// ExtrudeBufferGeometry\n\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tvar scope = this;\n\n\t\tvar verticesArray = [];\n\t\tvar uvArray = [];\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar placeholder = [];\n\n\t\t\t// options\n\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tvar extrudePath = options.extrudePath;\n\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t// deprecated options\n\n\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\tdepth = options.amount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar extrudePts, extrudeByPath = false;\n\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tvar ahole, h, hl; // looping of holes\n\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tvar vertices = shapePoints.shape;\n\t\t\tvar holes = shapePoints.holes;\n\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) { console.error( \"THREE.ExtrudeGeometry: vec does not exist\" ); }\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tvar b, bs, t, z,\n\t\t\t\tvert, vlen = vertices.length,\n\t\t\t\tface, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tvar contourMovements = [];\n\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tvar holesMovements = [],\n\t\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tvar s;\n\n\t\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\tvar layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tvar j, k;\n\t\t\t\ti = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tj = i;\n\t\t\t\t\tk = i - 1;\n\t\t\t\t\tif ( k < 0 ) { k = contour.length - 1; }\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tvar s = 0,\n\t\t\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t//\n\n\tvar WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\tfunction toJSON( shapes, options, data ) {\n\n\t\t//\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\t// TextGeometry\n\n\tfunction TextGeometry( text, parameters ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TextGeometry';\n\n\t\tthis.parameters = {\n\t\t\ttext: text,\n\t\t\tparameters: parameters\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t// TextBufferGeometry\n\n\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }\n\t\tif ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }\n\t\tif ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }\n\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextBufferGeometry';\n\n\t}\n\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// SphereGeometry\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tvar ix, iy;\n\n\t\tvar index = 0;\n\t\tvar grid = [];\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tvar uOffset = 0;\n\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// RingGeometry\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 0.5;\n\t\touterRadius = outerRadius || 1;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// some helper variables\n\n\t\tvar segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// LatheGeometry\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = MathUtils.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar base;\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar i, j;\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tbase = j + i * points.length;\n\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tbase = segments * points.length * 3;\n\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ShapeGeometry\n\n\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t}\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\tShapeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t// ShapeBufferGeometry\n\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tcurveSegments = curveSegments || 12;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar groupStart = 0;\n\t\tvar groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar i, l, shapeHole;\n\n\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\tvar shapeVertices = points.shape;\n\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\tShapeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t//\n\n\tfunction toJSON$1( shapes, data ) {\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar thresholdDot = Math.cos( MathUtils.DEG2RAD * thresholdAngle );\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t\t// prepare source geometry\n\n\t\tvar geometry2;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar sourceVertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\tvar e = edges[ key ];\n\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// CylinderGeometry\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\t\theight = height || 1;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar index = 0;\n\t\tvar indexArray = [];\n\t\tvar halfHeight = height / 2;\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) { generateCap( true ); }\n\t\t\tif ( radiusBottom > 0 ) { generateCap( false ); }\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar x, y;\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\t// ConeGeometry\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author hughes\n\t */\n\n\t// CircleGeometry\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, s;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  color: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( Material.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.vertexTangents = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.vertexTangents = source.vertexTangents;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  clearcoat: <float>,\n\t *  clearcoatMap: new THREE.Texture( <Image> ),\n\t *  clearcoatRoughness: <float>,\n\t *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *  clearcoatNormalScale: <Vector2>,\n\t *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *  reflectivity: <float>,\n\t *\n\t *  sheen: <Color>,\n\t *\n\t *  transparency: <float>\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.transparency = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tif ( source.sheen ) {\n\n\t\t\tthis.sheen = ( this.sheen || new Color() ).copy( source.sheen );\n\n\t\t} else {\n\n\t\t\tthis.sheen = null;\n\n\t\t}\n\n\t\tthis.transparency = source.transparency;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.MultiplyOperation,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author takahirox / http://github.com/takahirox\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *  gradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( Material.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  matcap: new THREE.Texture( <Image> ),\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshMatcapMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshMatcapMaterial.prototype = Object.create( Material.prototype );\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\tMeshMatcapMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tLineBasicMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) { return array; }\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) { return; } // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) { return; } // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps ) {\n\n\t\t\tfps = fps || 30;\n\n\t\t\tvar clip = sourceClip.clone();\n\n\t\t\tclip.name = name;\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tvar track = clip.tracks[ i ];\n\t\t\t\tvar valueSize = track.getValueSize();\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var j = 0; j < track.times.length; ++ j ) {\n\n\t\t\t\t\tvar frame = track.times[ j ] * fps;\n\n\t\t\t\t\tif ( frame < startFrame || frame >= endFrame ) { continue; }\n\n\t\t\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( times.length === 0 ) { continue; }\n\n\t\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\n\t\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\n\n\t\t\t\ttracks.push( track );\n\n\t\t\t}\n\n\t\t\tclip.tracks = tracks;\n\n\t\t\t// find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// shift all tracks such that clip begins at t=0\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\n\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function ( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[ i1 ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) { break forward_scan; }\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function () {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function ( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\t\tthrow new Error( 'call to abstract method' );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t// DECLARE ALIAS AFTER assign prototype\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }\n\t\tif ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Static methods\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\ttoJSON: function ( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( KeyframeTrack.prototype, {\n\n\t\tconstructor: KeyframeTrack,\n\n\t\tTimeBufferType: Float32Array,\n\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t\t++ from;\n\n\t\t\t}\n\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t\t-- to;\n\n\t\t\t}\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) {\n\n\t\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\t\tfrom = to - 1;\n\n\t\t\t\t}\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tvar times = AnimationUtils.arraySlice( this.times ),\n\t\t\t\tvalues = AnimationUtils.arraySlice( this.values ),\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\twriteIndex = 1,\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tkeep = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t} else {\n\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar times = AnimationUtils.arraySlice( this.times, 0 );\n\t\t\tvar values = AnimationUtils.arraySlice( this.values, 0 );\n\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\t\treturn track;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrack.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset = i1 * stride,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n\tfunction parseKeyframeTrack( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\t\t\tvar fps = animation.fps || 30;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) { continue; }\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks, duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( this.name, this.duration, tracks );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tvar index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) { regex.lastIndex = 0; } // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\n\t}\n\n\tObject.assign( Loader.prototype, {\n\n\t\tload: function ( /* url, onLoad, onProgress, onError */ ) {},\n\n\t\tparse: function ( /* data */ ) {},\n\n\t\tsetCrossOrigin: function ( crossOrigin ) {\n\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( path ) {\n\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( resourcePath ) {\n\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar loading = {};\n\n\tfunction FileLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FileLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check if request is duplicate\n\n\t\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\t\tdata = decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) { data = atob( data ); }\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( response ); }\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) { onError( error ); }\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Initialise array for duplicate requests\n\n\t\t\t\tloading[ url ] = [];\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = this.response;\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tif ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }\n\n\t\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onLoad ) { callback.onLoad( response ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onProgress ) { callback.onProgress( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) { request.responseType = this.responseType; }\n\t\t\t\tif ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }\n\n\t\t\t\tif ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( value ) {\n\n\t\t\tthis.requestHeader = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io/\n\t */\n\n\tfunction AnimationLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AnimationLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CompressedTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\t{ texture.minFilter = LinearFilter; }\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tvar loaded = 0;\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: DataTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope.parse( buffer );\n\n\t\t\t\tif ( ! texData ) { return; }\n\n\t\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\t\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) { onLoad( texture, texData ); }\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ImageLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\tfunction onImageLoad() {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) { onLoad( this ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\tfunction onImageError( event ) {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tif ( onError ) { onError( event ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CubeTextureLoader,\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction TextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: TextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new Texture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\ttexture.image = image;\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g($|\\?)/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t, optionalTarget );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = this.arcLengthDivisions; }\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) { t1 = 0; }\n\t\t\tif ( t2 > 1 ) { t2 = 1; }\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\n\t\t},\n\n\t\tgetTangentAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\tvar i, u, theta;\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tu = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\ttheta = Math.acos( MathUtils.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\ttheta = Math.acos( MathUtils.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta = - theta;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\t\tthis.aClockwise = aClockwise || false;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) { deltaAngle += twoPi; }\n\t\twhile ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t};\n\n\tEllipseCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\n\tEllipseCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points || [];\n\t\tthis.closed = closed || false;\n\t\tthis.curveType = curveType || 'centripetal';\n\t\tthis.tension = tension || 0.5;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tp1 = points[ intPoint % l ];\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) { dt1 = 1.0; }\n\t\t\tif ( dt0 < 1e-4 ) { dt0 = dt1; }\n\t\t\tif ( dt2 < 1e-4 ) { dt2 = dt1; }\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t\tthis.v3 = v3 || new Vector2();\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t\tthis.v3 = v3 || new Vector3();\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\t\treturn tangent.normalize();\n\n\t};\n\n\tLineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points || [];\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar points = this.points;\n\t\tvar p = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar p1 = points[ intPoint ];\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tSplineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t};\n\n\tSplineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [], sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 40; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [], last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurve.prototype.copy.call( this, source );\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = source.curves[ i ];\n\n\t\t\t\tthis.curves.push( curve.clone() );\n\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = this.curves[ i ];\n\t\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = json.curves[ i ];\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tconstructor: Path,\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape( points ) {\n\n\t\tPath.call( this, points );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tPath.prototype.copy.call( this, source );\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = source.holes[ i ];\n\n\t\t\t\tthis.holes.push( hole.clone() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = this.holes[ i ];\n\t\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = json.holes[ i ];\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }\n\n\t\t\tif ( this.distance !== undefined ) { data.object.distance = this.distance; }\n\t\t\tif ( this.angle !== undefined ) { data.object.angle = this.angle; }\n\t\t\tif ( this.decay !== undefined ) { data.object.decay = this.decay; }\n\t\t\tif ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }\n\n\t\t\tif ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\t_projScreenMatrix: new Matrix4(),\n\n\t\t_lightPositionWorld: new Vector3(),\n\n\t\t_lookTarget: new Vector3(),\n\n\t\tgetViewportCount: function () {\n\n\t\t\treturn this._viewportCount;\n\n\t\t},\n\n\t\tgetFrustum: function () {\n\n\t\t\treturn this._frustum;\n\n\t\t},\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar shadowCamera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\tshadowCamera.lookAt( lookTarget );\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\tprojScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t\tshadowMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t},\n\n\t\tgetViewport: function ( viewportIndex ) {\n\n\t\t\treturn this._viewports[ viewportIndex ];\n\n\t\t},\n\n\t\tgetFrameExtents: function () {\n\n\t\t\treturn this._frameExtents;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) { object.bias = this.bias; }\n\t\t\tif ( this.radius !== 1 ) { object.radius = this.radius; }\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = MathUtils.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction PointLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tPointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: PointLightShadow,\n\n\t\tisPointLightShadow: true,\n\n\t\tupdateMatrices: function ( light, viewportIndex ) {\n\n\t\t\tif ( viewportIndex === undefined ) { viewportIndex = 0; }\n\n\t\t\tvar camera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tcamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.copy( camera.position );\n\t\t\tlookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\t\tcamera.lookAt( lookTarget );\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t\tshadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );\n\n\t\t\tprojScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = ( left !== undefined ) ? left : - 1;\n\t\tthis.right = ( right !== undefined ) ? right : 1;\n\t\tthis.top = ( top !== undefined ) ? top : 1;\n\t\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow() {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow,\n\n\t\tisDirectionalLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t}\n\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.textures = {};\n\n\t}\n\n\tMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: MaterialLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) { material.uuid = json.uuid; }\n\t\t\tif ( json.name !== undefined ) { material.name = json.name; }\n\t\t\tif ( json.color !== undefined ) { material.color.setHex( json.color ); }\n\t\t\tif ( json.roughness !== undefined ) { material.roughness = json.roughness; }\n\t\t\tif ( json.metalness !== undefined ) { material.metalness = json.metalness; }\n\t\t\tif ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }\n\t\t\tif ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }\n\t\t\tif ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }\n\t\t\tif ( json.shininess !== undefined ) { material.shininess = json.shininess; }\n\t\t\tif ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }\n\t\t\tif ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }\n\t\t\tif ( json.fog !== undefined ) { material.fog = json.fog; }\n\t\t\tif ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }\n\t\t\tif ( json.blending !== undefined ) { material.blending = json.blending; }\n\t\t\tif ( json.combine !== undefined ) { material.combine = json.combine; }\n\t\t\tif ( json.side !== undefined ) { material.side = json.side; }\n\t\t\tif ( json.opacity !== undefined ) { material.opacity = json.opacity; }\n\t\t\tif ( json.transparent !== undefined ) { material.transparent = json.transparent; }\n\t\t\tif ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }\n\t\t\tif ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }\n\t\t\tif ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }\n\t\t\tif ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }\n\n\t\t\tif ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }\n\t\t\tif ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }\n\t\t\tif ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }\n\t\t\tif ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }\n\t\t\tif ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }\n\t\t\tif ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }\n\t\t\tif ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }\n\t\t\tif ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }\n\n\t\t\tif ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }\n\t\t\tif ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }\n\t\t\tif ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }\n\t\t\tif ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }\n\n\t\t\tif ( json.rotation !== undefined ) { material.rotation = json.rotation; }\n\n\t\t\tif ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }\n\t\t\tif ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }\n\t\t\tif ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }\n\t\t\tif ( json.scale !== undefined ) { material.scale = json.scale; }\n\n\t\t\tif ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }\n\n\t\t\tif ( json.skinning !== undefined ) { material.skinning = json.skinning; }\n\t\t\tif ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }\n\t\t\tif ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }\n\t\t\tif ( json.dithering !== undefined ) { material.dithering = json.dithering; }\n\n\t\t\tif ( json.vertexTangents !== undefined ) { material.vertexTangents = json.vertexTangents; }\n\n\t\t\tif ( json.visible !== undefined ) { material.visible = json.visible; }\n\n\t\t\tif ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }\n\n\t\t\tif ( json.userData !== undefined ) { material.userData = json.userData; }\n\n\t\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Shader Material\n\n\t\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.defines !== undefined ) { material.defines = json.defines; }\n\t\t\tif ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }\n\t\t\tif ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }\n\n\t\t\tif ( json.extensions !== undefined ) {\n\n\t\t\t\tfor ( var key in json.extensions ) {\n\n\t\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Deprecated\n\n\t\t\tif ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) { material.size = json.size; }\n\t\t\tif ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) { material.map = getTexture( json.map ); }\n\t\t\tif ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }\n\n\t\t\tif ( json.alphaMap !== undefined ) { material.alphaMap = getTexture( json.alphaMap ); }\n\n\t\t\tif ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }\n\t\t\tif ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }\n\n\t\t\tif ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }\n\t\t\tif ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }\n\t\t\tif ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }\n\t\t\tif ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }\n\n\t\t\tif ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }\n\t\t\tif ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }\n\n\t\t\tif ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }\n\t\t\tif ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }\n\n\t\t\tif ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }\n\n\t\t\tif ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }\n\t\t\tif ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }\n\n\t\t\tif ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }\n\t\t\tif ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }\n\n\t\t\tif ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }\n\t\t\tif ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }\n\n\t\t\tif ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }\n\t\t\tif ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }\n\n\t\t\tif ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }\n\n\t\t\tif ( json.clearcoatMap !== undefined ) { material.clearcoatMap = getTexture( json.clearcoatMap ); }\n\t\t\tif ( json.clearcoatRoughnessMap !== undefined ) { material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap ); }\n\t\t\tif ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }\n\t\t\tif ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }\n\n\t\t\treturn material;\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t */\n\n\tvar LoaderUtils = {\n\n\t\tdecodeText: function ( array ) {\n\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\t\treturn new TextDecoder().decode( array );\n\n\t\t\t}\n\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\t\tvar s = '';\n\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t\t} catch ( e ) { // see #16358\n\n\t\t\t\treturn s;\n\n\t\t\t}\n\n\t\t},\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar index = url.lastIndexOf( '/' );\n\n\t\t\tif ( index === - 1 ) { return './'; }\n\n\t\t\treturn url.substr( 0, index + 1 );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\t\tthis.maxInstancedCount = source.maxInstancedCount;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\t\tdata.maxInstancedCount = this.maxInstancedCount;\n\n\t\t\tdata.isInstancedBufferGeometry = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\n\n\t\tif ( typeof ( normalized ) === 'number' ) {\n\n\t\t\tmeshPerAttribute = normalized;\n\n\t\t\tnormalized = false;\n\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t\t}\n\n\t\tBufferAttribute.call( this, array, itemSize, normalized );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ()\t{\n\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call( this );\n\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\tdata.isInstancedBufferAttribute = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tBufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: BufferGeometryLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tvar bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif ( morphAttributes ) {\n\n\t\t\t\tfor ( var key in morphAttributes ) {\n\n\t\t\t\t\tvar attributeArray = morphAttributes[ key ];\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar attribute = attributeArray[ i ];\n\t\t\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\t\t\tvar bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\tif ( json.name ) { geometry.name = json.name; }\n\t\t\tif ( json.userData ) { geometry.userData = json.userData; }\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ObjectLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) { onError( error ); }\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar shapes = this.parseShape( json.shapes );\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseShape: function ( json ) {\n\n\t\t\tvar shapes = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t},\n\n\t\tparseGeometries: function ( json, shapes ) {\n\n\t\t\tvar geometries = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.closed\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\n\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.options\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.' );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { geometry.name = data.name; }\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar cache = {}; // MultiMaterial\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar material = data.materials[ j ];\n\n\t\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tvar clip = AnimationClip.parse( data );\n\n\t\t\t\tif ( data.uuid !== undefined ) { clip.uuid = data.uuid; }\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tvar loader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\n\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\n\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// load single image\n\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\n\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof value === 'number' ) { return value; }\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\n\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { texture.name = data.name; }\n\n\t\t\t\t\tif ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }\n\n\t\t\t\t\tif ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }\n\t\t\t\t\tif ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }\n\t\t\t\t\tif ( data.center !== undefined ) { texture.center.fromArray( data.center ); }\n\t\t\t\t\tif ( data.rotation !== undefined ) { texture.rotation = data.rotation; }\n\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.format !== undefined ) { texture.format = data.format; }\n\t\t\t\t\tif ( data.type !== undefined ) { texture.type = data.type; }\n\t\t\t\t\tif ( data.encoding !== undefined ) { texture.encoding = data.encoding; }\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }\n\n\t\t\t\t\tif ( data.flipY !== undefined ) { texture.flipY = data.flipY; }\n\n\t\t\t\t\tif ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }\n\t\t\t\t\tif ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function ( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) { return undefined; }\n\n\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) { object.focus = data.focus; }\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }\n\t\t\t\t\tif ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\n\t\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) { object.name = data.name; }\n\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }\n\t\t\t\tif ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) { object.position.fromArray( data.position ); }\n\t\t\t\tif ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }\n\t\t\t\tif ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }\n\t\t\t\tif ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }\n\t\t\tif ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }\n\n\t\t\tif ( data.shadow ) {\n\n\t\t\t\tif ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }\n\t\t\t\tif ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }\n\t\t\t\tif ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }\n\n\t\t\t}\n\n\t\t\tif ( data.visible !== undefined ) { object.visible = data.visible; }\n\t\t\tif ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }\n\t\t\tif ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }\n\t\t\tif ( data.userData !== undefined ) { object.userData = data.userData; }\n\t\t\tif ( data.layers !== undefined ) { object.layers.mask = data.layers; }\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tif ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\t/**\n\t * @author thespite / http://clicktorelease.com/\n\t */\n\n\n\tfunction ImageBitmapLoader( manager ) {\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.options = undefined;\n\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageBitmapLoader,\n\n\t\tsetOptions: function setOptions( options ) {\n\n\t\t\tthis.options = options;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tfetch( url ).then( function ( res ) {\n\n\t\t\t\treturn res.blob();\n\n\t\t\t} ).then( function ( blob ) {\n\n\t\t\t\tif ( scope.options === undefined ) {\n\n\t\t\t\t\t// Workaround for FireFox. It causes an error if you pass options.\n\t\t\t\t\treturn createImageBitmap( blob );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t\t\t}\n\n\t\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\t\tCache.add( url, imageBitmap );\n\n\t\t\t\tif ( onLoad ) { onLoad( imageBitmap ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} ).catch( function ( e ) {\n\n\t\t\t\tif ( onError ) { onError( e ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t **/\n\n\tfunction ShapePath() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\t{ continue; }\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\t{ continue; }\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\t{ continue; }\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\t{ return\ttrue; }\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) { return []; }\n\n\t\t\tif ( noHoles === true )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\t{ mainIdx ++; }\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\t{ mainIdx ++; }\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\t{ toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } ); }\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\t{ newShapeHoles = betterShapeHoles; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction Font( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size ) {\n\n\t\t\tif ( size === undefined ) { size = 100; }\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths( text, size, this.data );\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\tfunction createPaths( text, size, data ) {\n\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // workaround for IE11, see #13988\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\tvar paths = [];\n\n\t\tvar offsetX = 0, offsetY = 0;\n\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\tvar char = chars[ i ];\n\n\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\n\t\t\t} else {\n\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn paths;\n\n\t}\n\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\t\tif ( ! glyph ) {\n\n\t\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar path = new ShapePath();\n\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif ( glyph.o ) {\n\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FontLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) { onLoad( font ); }\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( _context === undefined ) {\n\n\t\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn _context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\t_context = value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AudioLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tvar bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Primary reference:\n\t *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *   https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\n\t// 3-band SH defined by 9 coefficients\n\n\tfunction SphericalHarmonics3() {\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tObject.assign( SphericalHarmonics3.prototype, {\n\n\t\tisSphericalHarmonics3: true,\n\n\t\tset: function ( coefficients ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tzero: function () {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\tgetAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t\t// band 1\n\t\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\tgetIrradianceAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t\t// band 1\n\t\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tadd: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledSH: function ( sh, s ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( s ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( sh, alpha ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcopy: function ( sh ) {\n\n\t\t\treturn this.set( sh.coefficients );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( SphericalHarmonics3, {\n\n\t\t// evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\tgetBasisAt: function ( normal, shBasis ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\t// band 0\n\t\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t\t// band 1\n\t\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t\t// band 2\n\t\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * A LightProbe is a source of indirect-diffuse light\n\t */\n\n\tfunction LightProbe( sh, intensity ) {\n\n\t\tLight.call( this, undefined, intensity );\n\n\t\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\n\n\t}\n\n\tLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: LightProbe,\n\n\t\tisLightProbe: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.sh.copy( source.sh );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction HemisphereLightProbe( skyColor, groundColor, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( skyColor );\n\t\tvar color2 = new Color().set( groundColor );\n\n\t\tvar sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tvar ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tvar c0 = Math.sqrt( Math.PI );\n\t\tvar c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n\tHemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: HemisphereLightProbe,\n\n\t\tisHemisphereLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying colors not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction AmbientLightProbe( color, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n\tAmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: AmbientLightProbe,\n\n\t\tisAmbientLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying color not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tvar _eyeRight = new Matrix4();\n\tvar _eyeLeft = new Matrix4();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar cache = this._cache;\n\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tObject.assign( Clock.prototype, {\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$2 = new Vector3();\n\tvar _quaternion$3 = new Quaternion();\n\tvar _scale$1 = new Vector3();\n\tvar _orientation = new Vector3();\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\t\tthis.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );\n\n\t\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );\n\n\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t// code path for Chrome (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\t\tlistener.positionX.linearRampToValueAtTime( _position$2.x, endTime );\n\t\t\t\tlistener.positionY.linearRampToValueAtTime( _position$2.y, endTime );\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\n\t\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tlistener.setPosition( _position$2.x, _position$2.y, _position$2.z );\n\t\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._pausedAt = 0;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaElementSource: function ( mediaElement ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaStreamSource: function ( mediaStream ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) { this.play(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function ( delay ) {\n\n\t\t\tif ( delay === undefined ) { delay = 0; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.start( this._startedAt, this._pausedAt + this.offset, this.duration );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\tthis.setDetune( this.detune );\n\t\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis._pausedAt += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\n\t\t\t\tthis.isPlaying = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._pausedAt = 0;\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) { value = []; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDetune: function ( value ) {\n\n\t\t\tthis.detune = value;\n\n\t\t\tif ( this.source.detune === undefined ) { return; } // only set detune when available\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDetune: function () {\n\n\t\t\treturn this.detune;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopStart: function ( value ) {\n\n\t\t\tthis.loopStart = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopEnd: function ( value ) {\n\n\t\t\tthis.loopEnd = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$3 = new Vector3();\n\tvar _quaternion$4 = new Quaternion();\n\tvar _scale$2 = new Vector3();\n\tvar _orientation$1 = new Vector3();\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }\n\n\t\t\tthis.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );\n\n\t\t\t_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif ( panner.positionX ) {\n\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\t\tpanner.positionX.linearRampToValueAtTime( _position$3.x, endTime );\n\t\t\t\tpanner.positionY.linearRampToValueAtTime( _position$3.y, endTime );\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tpanner.setPosition( _position$3.x, _position$3.y, _position$3.z );\n\t\t\t\tpanner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tbufferType = Array;\n\t\t\t\tmixFunction = this._select;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\n\t\t}\n\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\n\t\tthis._mixBufferRegion = mixFunction;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * 3;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\tvar _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\tvar _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n\t// Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n\t// Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\n\tvar _trackRe = new RegExp( ''\n\t\t+ '^'\n\t\t+ _directoryRe\n\t\t+ _nodeRe\n\t\t+ _objectRe\n\t\t+ _propertyRe\n\t\t+ '$'\n\t);\n\n\tvar _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) { binding.getValue( array, offset ); }\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function ( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t\t},\n\n\t\tparseTrackName: function ( trackName ) {\n\n\t\t\tvar matches = _trackRe.exec( trackName );\n\n\t\t\tif ( ! matches ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t};\n\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\t\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\treturn results;\n\n\t\t},\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) { return result; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t// DECLARE ALIAS AFTER assign prototype\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *  - Add objects you would otherwise pass as 'root' to the\n\t *    constructor or the .clipAction method of AnimationMixer.\n\t *\n\t *  - Instead pass this object as 'root'.\n\t *\n\t *  - You can also add and remove objects later when the mixer\n\t *    is running.\n\t *\n\t * Note:\n\t *\n\t *    Objects of this class appear as one object to the mixer,\n\t *    so cache control of the individual objects must be done\n\t *    on the group.\n\t *\n\t * Limitation:\n\t *\n\t *  - The animated properties must be compatible among the\n\t *    all objects in the group.\n\t *\n\t *  - A single property can either be controlled through a\n\t *    target group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup() {\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length,\n\t\t\t\tknownObject = undefined;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) { return bindings[ index ]; }\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\tObject.assign( AnimationAction.prototype, {\n\n\t\t// State & Scheduling\n\n\t\tplay: function () {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function () {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0; // restart clip\n\t\t\tthis._loopCount = - 1;// forget previous loops\n\t\t\tthis._startTime = null;// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function () {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function () {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function ( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function ( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function ( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function () {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif ( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function () {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function () {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function ( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function ( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function ( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function () {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function () {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function () {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function () {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t\t// called by the mixer\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\t\tthis._updateWeight( time );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function ( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function ( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function ( deltaTime ) {\n\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar loopCount = this._loopCount;\n\n\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\tif ( deltaTime === 0 ) {\n\n\t\t\t\tif ( loopCount === - 1 ) { return time; }\n\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t\t}\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis._loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\n\t\t\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: AnimationMixer,\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\t{ clipObject = prototypeAction._clip; }\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) { return null; }\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tactions[ i ].reset();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].useCount = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Allows you to seek to a specific time in an animation.\n\t\tsetTime: function ( timeInSeconds ) {\n\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\t\tfor ( var i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t\t}\n\n\t\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tUniform.prototype.clone = function () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\t\tobject.raycast( raycaster, intersects );\n\n\t\t}\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Spherical.prototype, {\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function () {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\t\tthis.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t *\n\t */\n\n\tfunction Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Cylindrical.prototype, {\n\n\t\tset: function ( radius, theta, y ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector$7 = new Vector2();\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box2.prototype, {\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$7.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 4 splitting planes to rule out intersections\n\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$7.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _startP = new Vector3();\n\tvar _startEnd = new Vector3();\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tObject.assign( Line3.prototype, {\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function ( point, clampToLine ) {\n\n\t\t\t_startP.subVectors( point, this.start );\n\t\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = _startEnd.dot( _startEnd );\n\t\t\tvar startEnd_startP = _startEnd.dot( _startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = MathUtils.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( /* renderCallback */ ) {};\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector$8 = new Vector3();\n\n\tfunction SpotLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$8.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$8 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$9 = new Vector3();\n\tvar _boneMatrix = new Matrix4();\n\tvar _matrixWorldInv = new Matrix4();\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tvar bones = getBoneList( object );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = new Color( 0, 0, 1 );\n\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.isSkeletonHelper = true;\n\n\tSkeletonHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar bones = this.bones;\n\n\t\tvar geometry = this.geometry;\n\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize, color ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$a = new Vector3();\n\tvar _color1 = new Color();\n\tvar _color2 = new Color();\n\n\tfunction HemisphereLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) { this.material.vertexColors = true; }\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( _vector$a.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = size / divisions;\n\t\tvar halfSize = size / 2;\n\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tGridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {\n\n\t\tconstructor: GridHelper,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\t\tthis.geometry.copy( source.geometry );\n\t\t\tthis.material.copy( source.material );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author Hectate / http://www.github.com/Hectate\n\t */\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar x, z;\n\t\tvar v, i, j, r, color;\n\n\t\t// create the radials\n\n\t\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * radius;\n\t\t\tz = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tr = radius - ( radius / circles * i );\n\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _v1$5 = new Vector3();\n\tvar _v2$3 = new Vector3();\n\tvar _v3$1 = new Vector3();\n\n\tfunction DirectionalLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) { size = 1; }\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\t_v1$5.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3$1.subVectors( _v2$3, _v1$5 );\n\n\t\tthis.lightPlane.lookAt( _v2$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2$3 );\n\t\tthis.targetLine.scale.z = _v3$1.length();\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tvar _vector$b = new Vector3();\n\tvar _camera = new Camera();\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\tvar colorCone = new Color( 0xff0000 );\n\t\tvar colorUp = new Color( 0x00aaff );\n\t\tvar colorTarget = new Color( 0xffffff );\n\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar pointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t};\n\n\tfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t\t_vector$b.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tposition.setXYZ( points[ i ], _vector$b.x, _vector$b.y, _vector$b.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tvar _box$3 = new Box3();\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tthis.object = object;\n\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = function ( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box$3.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box$3.isEmpty() ) { return; }\n\n\t\tvar min = _box$3.min;\n\t\tvar max = _box$3.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\n\t};\n\n\tBoxHelper.prototype.setFromObject = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.copy = function ( source ) {\n\n\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3Helper( box, color ) {\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.box = box;\n\n\t\tcolor = color || 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\n\tBox3Helper.prototype.constructor = Box3Helper;\n\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar box = this.box;\n\n\t\tif ( box.isEmpty() ) { return; }\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction PlaneHelper( plane, size, hex ) {\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = ( size === undefined ) ? 1 : size;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\t//\n\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tvar geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tPlaneHelper.prototype = Object.create( Line.prototype );\n\tPlaneHelper.prototype.constructor = PlaneHelper;\n\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar _axis = new Vector3();\n\tvar _lineGeometry, _coneGeometry;\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tif ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }\n\t\tif ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }\n\t\tif ( length === undefined ) { length = 1; }\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = function ( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tvar radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t};\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t};\n\n\tArrowHelper.prototype.copy = function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t};\n\n\tArrowHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxesHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tvar colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\n\tAxesHelper.prototype.constructor = AxesHelper;\n\n\t/**\n\t * @author Emmett Lalish / elalish\n\t *\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t */\n\n\tvar LOD_MIN = 4;\n\tvar LOD_MAX = 8;\n\tvar SIZE_MAX = Math.pow( 2, LOD_MAX );\n\t// The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\tvar EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\tvar TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\t// The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\tvar MAX_SAMPLES = 20;\n\tvar ENCODINGS = {};\n\tENCODINGS[ LinearEncoding ] = 0;\n\tENCODINGS[ sRGBEncoding ] = 1;\n\tENCODINGS[ RGBEEncoding ] = 2;\n\tENCODINGS[ RGBM7Encoding ] = 3;\n\tENCODINGS[ RGBM16Encoding ] = 4;\n\tENCODINGS[ RGBDEncoding ] = 5;\n\tENCODINGS[ GammaEncoding ] = 6;\n\n\tvar _flatCamera = new OrthographicCamera();\n\tvar _blurMaterial = _getBlurShader( MAX_SAMPLES );\n\tvar _equirectShader = null;\n\tvar _cubemapShader = null;\n\n\tvar ref = _createPlanes();\n\tvar _lodPlanes = ref._lodPlanes;\n\tvar _sizeLods = ref._sizeLods;\n\tvar _sigmas = ref._sigmas;\n\tvar _pingPongRenderTarget = null;\n\tvar _renderer = null;\n\n\tvar _oldTarget = null;\n\n\t// Golden Ratio\n\tvar PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar INV_PHI = 1 / PHI;\n\t// Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\tvar _axisDirections = [\n\t\tnew Vector3( 1, 1, 1 ),\n\t\tnew Vector3( - 1, 1, 1 ),\n\t\tnew Vector3( 1, 1, - 1 ),\n\t\tnew Vector3( - 1, 1, - 1 ),\n\t\tnew Vector3( 0, PHI, INV_PHI ),\n\t\tnew Vector3( 0, PHI, - INV_PHI ),\n\t\tnew Vector3( INV_PHI, 0, PHI ),\n\t\tnew Vector3( - INV_PHI, 0, PHI ),\n\t\tnew Vector3( PHI, INV_PHI, 0 ),\n\t\tnew Vector3( - PHI, INV_PHI, 0 ) ];\n\n\tfunction PMREMGenerator( renderer ) {\n\n\t\t_renderer = renderer;\n\t\t_compileMaterial( _blurMaterial );\n\n\t}\n\n\tPMREMGenerator.prototype = {\n\n\t\tconstructor: PMREMGenerator,\n\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\t\tfromScene: function ( scene, sigma, near, far ) {\n\t\t\tif ( sigma === void 0 ) sigma = 0;\n\t\t\tif ( near === void 0 ) near = 0.1;\n\t\t\tif ( far === void 0 ) far = 100;\n\n\n\t\t\t_oldTarget = _renderer.getRenderTarget();\n\t\t\tvar cubeUVRenderTarget = _allocateTargets();\n\t\t\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\t\t\tif ( sigma > 0 ) {\n\n\t\t\t\t_blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t\t}\n\t\t\t_applyPMREM( cubeUVRenderTarget );\n\t\t\t_cleanup( cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\tfromEquirectangular: function ( equirectangular ) {\n\n\t\t\tequirectangular.magFilter = NearestFilter;\n\t\t\tequirectangular.minFilter = NearestFilter;\n\t\t\tequirectangular.generateMipmaps = false;\n\n\t\t\treturn this.fromCubemap( equirectangular );\n\n\t\t},\n\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\tfromCubemap: function ( cubemap ) {\n\n\t\t\t_oldTarget = _renderer.getRenderTarget();\n\t\t\tvar cubeUVRenderTarget = _allocateTargets( cubemap );\n\t\t\t_textureToCubeUV( cubemap, cubeUVRenderTarget );\n\t\t\t_applyPMREM( cubeUVRenderTarget );\n\t\t\t_cleanup( cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\tcompileCubemapShader: function () {\n\n\t\t\tif ( _cubemapShader == null ) {\n\n\t\t\t\t_cubemapShader = _getCubemapShader();\n\t\t\t\t_compileMaterial( _cubemapShader );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\tcompileEquirectangularShader: function () {\n\n\t\t\tif ( _equirectShader == null ) {\n\n\t\t\t\t_equirectShader = _getEquirectShader();\n\t\t\t\t_compileMaterial( _equirectShader );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\t\tdispose: function () {\n\n\t\t\t_blurMaterial.dispose();\n\n\t\t\tif ( _cubemapShader != null ) { _cubemapShader.dispose(); }\n\t\t\tif ( _equirectShader != null ) { _equirectShader.dispose(); }\n\n\t\t\tfor ( var i = 0; i < _lodPlanes.length; i ++ ) {\n\n\t\t\t\t_lodPlanes[ i ].dispose();\n\n\t\t\t}\n\n\t\t},\n\n\t};\n\n\tfunction _createPlanes() {\n\n\t\tvar _lodPlanes = [];\n\t\tvar _sizeLods = [];\n\t\tvar _sigmas = [];\n\n\t\tvar lod = LOD_MAX;\n\t\tfor ( var i = 0; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tvar sizeLod = Math.pow( 2, lod );\n\t\t\t_sizeLods.push( sizeLod );\n\t\t\tvar sigma = 1.0 / sizeLod;\n\t\t\tif ( i > LOD_MAX - LOD_MIN ) {\n\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];\n\n\t\t\t} else if ( i == 0 ) {\n\n\t\t\t\tsigma = 0;\n\n\t\t\t}\n\t\t\t_sigmas.push( sigma );\n\n\t\t\tvar texelSize = 1.0 / ( sizeLod - 1 );\n\t\t\tvar min = - texelSize / 2;\n\t\t\tvar max = 1 + texelSize / 2;\n\t\t\tvar uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\t\tvar cubeFaces = 6;\n\t\t\tvar vertices = 6;\n\t\t\tvar positionSize = 3;\n\t\t\tvar uvSize = 2;\n\t\t\tvar faceIndexSize = 1;\n\n\t\t\tvar position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\t\tvar uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\t\tvar faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\t\tfor ( var face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\t\tvar x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\t\tvar y = face > 2 ? 0 : - 1;\n\t\t\t\tvar coordinates = [\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y + 1, 0\n\t\t\t\t];\n\t\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\t\tvar fill = [ face, face, face, face, face, face ];\n\t\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t\t}\n\t\t\tvar planes = new BufferGeometry();\n\t\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\t\t_lodPlanes.push( planes );\n\n\t\t\tif ( lod > LOD_MIN ) {\n\n\t\t\t\tlod --;\n\n\t\t\t}\n\n\t\t}\n\t\treturn { _lodPlanes: _lodPlanes, _sizeLods: _sizeLods, _sigmas: _sigmas };\n\n\t}\n\n\tfunction _allocateTargets( equirectangular ) {\n\n\t\tvar params = {\n\t\t\tmagFilter: NearestFilter,\n\t\t\tminFilter: NearestFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: equirectangular ? equirectangular.type : UnsignedByteType,\n\t\t\tformat: equirectangular ? equirectangular.format : RGBEFormat,\n\t\t\tencoding: equirectangular ? equirectangular.encoding : RGBEEncoding,\n\t\t\tdepthBuffer: false,\n\t\t\tstencilBuffer: false\n\t\t};\n\t\tvar cubeUVRenderTarget = _createRenderTarget( params );\n\t\tcubeUVRenderTarget.depthBuffer = equirectangular ? false : true;\n\t\t_pingPongRenderTarget = _createRenderTarget( params );\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tfunction _cleanup( outputTarget ) {\n\n\t\t_pingPongRenderTarget.dispose();\n\t\t_renderer.setRenderTarget( _oldTarget );\n\t\toutputTarget.scissorTest = false;\n\t\t// reset viewport and scissor\n\t\toutputTarget.setSize( outputTarget.width, outputTarget.height );\n\n\t}\n\n\tfunction _sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tvar fov = 90;\n\t\tvar aspect = 1;\n\t\tvar cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tvar upSign = [ 1, 1, 1, 1, - 1, 1 ];\n\t\tvar forwardSign = [ 1, 1, - 1, - 1, - 1, 1 ];\n\n\t\tvar outputEncoding = _renderer.outputEncoding;\n\t\tvar toneMapping = _renderer.toneMapping;\n\t\tvar toneMappingExposure = _renderer.toneMappingExposure;\n\t\tvar clearColor = _renderer.getClearColor();\n\t\tvar clearAlpha = _renderer.getClearAlpha();\n\n\t\t_renderer.toneMapping = LinearToneMapping;\n\t\t_renderer.toneMappingExposure = 1.0;\n\t\t_renderer.outputEncoding = LinearEncoding;\n\t\tscene.scale.z *= - 1;\n\n\t\tvar background = scene.background;\n\t\tif ( background && background.isColor ) {\n\n\t\t\tbackground.convertSRGBToLinear();\n\t\t\t// Convert linear to RGBE\n\t\t\tvar maxComponent = Math.max( background.r, background.g, background.b );\n\t\t\tvar fExp = Math.min( Math.max( Math.ceil( Math.log2( maxComponent ) ), - 128.0 ), 127.0 );\n\t\t\tbackground = background.multiplyScalar( Math.pow( 2.0, - fExp ) );\n\t\t\tvar alpha = ( fExp + 128.0 ) / 255.0;\n\t\t\t_renderer.setClearColor( background, alpha );\n\t\t\tscene.background = null;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar col = i % 3;\n\t\t\tif ( col == 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col == 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\t\t\t_setViewport( cubeUVRenderTarget,\n\t\t\t\tcol * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );\n\t\t\t_renderer.setRenderTarget( cubeUVRenderTarget );\n\t\t\t_renderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\t_renderer.toneMapping = toneMapping;\n\t\t_renderer.toneMappingExposure = toneMappingExposure;\n\t\t_renderer.outputEncoding = outputEncoding;\n\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\t\tscene.scale.z *= - 1;\n\n\t}\n\n\tfunction _textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tvar scene = new Scene();\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tif ( _cubemapShader == null ) {\n\n\t\t\t\t_cubemapShader = _getCubemapShader();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( _equirectShader == null ) {\n\n\t\t\t\t_equirectShader = _getEquirectShader();\n\n\t\t\t}\n\n\t\t}\n\t\tvar material = texture.isCubeTexture ? _cubemapShader : _equirectShader;\n\t\tscene.add( new Mesh( _lodPlanes[ 0 ], material ) );\n\t\tvar uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\t\tif ( ! texture.isCubeTexture ) {\n\n\t\t\tuniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );\n\n\t\t}\n\t\tuniforms[ 'inputEncoding' ].value = ENCODINGS[ texture.encoding ];\n\t\tuniforms[ 'outputEncoding' ].value = ENCODINGS[ texture.encoding ];\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );\n\t\t_renderer.setRenderTarget( cubeUVRenderTarget );\n\t\t_renderer.render( scene, _flatCamera );\n\n\t}\n\n\tfunction _compileMaterial( material ) {\n\n\t\tvar tmpScene = new Scene();\n\t\ttmpScene.add( new Mesh( _lodPlanes[ 0 ], material ) );\n\t\t_renderer.compile( tmpScene, _flatCamera );\n\n\t}\n\n\tfunction _createRenderTarget( params ) {\n\n\t\tvar cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tfunction _setViewport( target, x, y, width, height ) {\n\n\t\ttarget.viewport.set( x, y, width, height );\n\t\ttarget.scissor.set( x, y, width, height );\n\n\t}\n\n\tfunction _applyPMREM( cubeUVRenderTarget ) {\n\n\t\tvar autoClear = _renderer.autoClear;\n\t\t_renderer.autoClear = false;\n\n\t\tfor ( var i = 1; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tvar sigma = Math.sqrt(\n\t\t\t\t_sigmas[ i ] * _sigmas[ i ] -\n\t\t\t_sigmas[ i - 1 ] * _sigmas[ i - 1 ] );\n\t\t\tvar poleAxis =\n\t\t\t_axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\t\t\t_blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\t_renderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t */\n\tfunction _blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\t_halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\t_pingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\t_halfBlur(\n\t\t\t_pingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\tfunction _halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tvar STANDARD_DEVIATIONS = 3;\n\n\t\tvar blurScene = new Scene();\n\t\tblurScene.add( new Mesh( _lodPlanes[ lodOut ], _blurMaterial ) );\n\t\tvar blurUniforms = _blurMaterial.uniforms;\n\n\t\tvar pixels = _sizeLods[ lodIn ] - 1;\n\t\tvar radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tvar sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tvar samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( (\"sigmaRadians, \" + sigmaRadians + \", is too large and will clip, as it requested \" + samples + \" samples when the maximum is set to \" + MAX_SAMPLES) );\n\n\t\t}\n\n\t\tvar weights = [];\n\t\tvar sum = 0;\n\n\t\tfor ( var i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tvar x = i / sigmaPixels;\n\t\t\tvar weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i == 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;\n\t\tblurUniforms[ 'inputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\t\tblurUniforms[ 'outputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\n\t\tvar outputSize = _sizeLods[ lodOut ];\n\t\tvar x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );\n\t\tvar y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) +\n\t\t2 * outputSize *\n\t\t\t( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\t_renderer.setRenderTarget( targetOut );\n\t\t_renderer.render( blurScene, _flatCamera );\n\n\t}\n\n\tfunction _getBlurShader( maxSamples ) {\n\n\t\tvar weights = new Float32Array( maxSamples );\n\t\tvar poleAxis = new Vector3( 0, 1, 0 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tdefines: { 'n': maxSamples },\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'samples': { value: 1 },\n\t\t\t\t'weights': { value: weights },\n\t\t\t\t'latitudinal': { value: false },\n\t\t\t\t'dTheta': { value: 0 },\n\t\t\t\t'mipInt': { value: 0 },\n\t\t\t\t'poleAxis': { value: poleAxis },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform int samples;\\nuniform float weights[n];\\nuniform bool latitudinal;\\nuniform float dTheta;\\nuniform float mipInt;\\nuniform vec3 poleAxis;\\n\\n\" + (_getEncodings()) + \"\\n\\n#define ENVMAP_TYPE_CUBE_UV\\n#include <cube_uv_reflection_fragment>\\n\\nvec3 getSample(float theta, vec3 axis) {\\n\\tfloat cosTheta = cos(theta);\\n\\t// Rodrigues' axis-angle rotation\\n\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t+ cross(axis, vOutputDirection) * sin(theta)\\n\\t\\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\\n\\treturn bilinearCubeUV(envMap, sampleDirection, mipInt);\\n}\\n\\nvoid main() {\\n\\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\\n\\tif (all(equal(axis, vec3(0.0))))\\n\\t\\taxis = vec3(vOutputDirection.z, 0.0, - vOutputDirection.x);\\n\\taxis = normalize(axis);\\n\\tgl_FragColor = vec4(0.0);\\n\\tgl_FragColor.rgb += weights[0] * getSample(0.0, axis);\\n\\tfor (int i = 1; i < n; i++) {\\n\\t\\tif (i >= samples)\\n\\t\\t\\tbreak;\\n\\t\\tfloat theta = dTheta * float(i);\\n\\t\\tgl_FragColor.rgb += weights[i] * getSample(-1.0 * theta, axis);\\n\\t\\tgl_FragColor.rgb += weights[i] * getSample(theta, axis);\\n\\t}\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'SphericalGaussianBlur';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getEquirectShader() {\n\n\t\tvar texelSize = new Vector2( 1, 1 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'texelSize': { value: texelSize },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform vec2 texelSize;\\n\\n\" + (_getEncodings()) + \"\\n\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tvec3 outputDirection = normalize(vOutputDirection);\\n\\tvec2 uv;\\n\\tuv.y = asin(clamp(outputDirection.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;\\n\\tuv.x = atan(outputDirection.z, outputDirection.x) * RECIPROCAL_PI2 + 0.5;\\n\\tvec2 f = fract(uv / texelSize - 0.5);\\n\\tuv -= f * texelSize;\\n\\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x += texelSize.x;\\n\\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.y += texelSize.y;\\n\\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x -= texelSize.x;\\n\\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tvec3 tm = mix(tl, tr, f.x);\\n\\tvec3 bm = mix(bl, br, f.x);\\n\\tgl_FragColor.rgb = mix(tm, bm, f.y);\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'EquirectangularToCubeUV';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCubemapShader() {\n\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform samplerCube envMap;\\n\\n\" + (_getEncodings()) + \"\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'CubemapToCubeUV';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCommonVertexShader() {\n\n\t\treturn \"\\nprecision mediump float;\\nprecision mediump int;\\nattribute vec3 position;\\nattribute vec2 uv;\\nattribute float faceIndex;\\nvarying vec3 vOutputDirection;\\nvec3 getDirection(vec2 uv, float face) {\\n\\tuv = 2.0 * uv - 1.0;\\n\\tvec3 direction = vec3(uv, 1.0);\\n\\tif (face == 0.0) {\\n\\t\\tdirection = direction.zyx;\\n\\t\\tdirection.z *= -1.0;\\n\\t} else if (face == 1.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.z *= -1.0;\\n\\t} else if (face == 3.0) {\\n\\t\\tdirection = direction.zyx;\\n\\t\\tdirection.x *= -1.0;\\n\\t} else if (face == 4.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.y *= -1.0;\\n\\t} else if (face == 5.0) {\\n\\t\\tdirection.xz *= -1.0;\\n\\t}\\n\\treturn direction;\\n}\\nvoid main() {\\n\\tvOutputDirection = getDirection(uv, faceIndex);\\n\\tgl_Position = vec4( position, 1.0 );\\n}\\n\\t\";\n\n\t}\n\n\tfunction _getEncodings() {\n\n\t\treturn \"\\nuniform int inputEncoding;\\nuniform int outputEncoding;\\n\\n#include <encodings_pars_fragment>\\n\\nvec4 inputTexelToLinear(vec4 value){\\n\\tif(inputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(inputEncoding == 1){\\n\\t\\treturn sRGBToLinear(value);\\n\\t}else if(inputEncoding == 2){\\n\\t\\treturn RGBEToLinear(value);\\n\\t}else if(inputEncoding == 3){\\n\\t\\treturn RGBMToLinear(value, 7.0);\\n\\t}else if(inputEncoding == 4){\\n\\t\\treturn RGBMToLinear(value, 16.0);\\n\\t}else if(inputEncoding == 5){\\n\\t\\treturn RGBDToLinear(value, 256.0);\\n\\t}else{\\n\\t\\treturn GammaToLinear(value, 2.2);\\n\\t}\\n}\\n\\nvec4 linearToOutputTexel(vec4 value){\\n\\tif(outputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(outputEncoding == 1){\\n\\t\\treturn LinearTosRGB(value);\\n\\t}else if(outputEncoding == 2){\\n\\t\\treturn LinearToRGBE(value);\\n\\t}else if(outputEncoding == 3){\\n\\t\\treturn LinearToRGBM(value, 7.0);\\n\\t}else if(outputEncoding == 4){\\n\\t\\treturn LinearToRGBM(value, 16.0);\\n\\t}else if(outputEncoding == 5){\\n\\t\\treturn LinearToRGBD(value, 256.0);\\n\\t}else{\\n\\t\\treturn LinearToGamma(value, 2.2);\\n\\t}\\n}\\n\\nvec4 envMapTexelToLinear(vec4 color) {\\n\\treturn inputTexelToLinear(color);\\n}\\n\\t\";\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\tvar LinePieces = 1;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) { materials = []; }\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setUsage( DynamicDrawUsage );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tObject.assign( CurvePath.prototype, {\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Path.prototype, {\n\n\t\tfromPoints: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\t\treturn this.setFromPoints( points );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction AxisHelper( size ) {\n\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\t\treturn new AxesHelper( size );\n\n\t}\n\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tObject.assign( Loader.prototype, {\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t} );\n\n\tLoader.Handlers = {\n\n\t\tadd: function ( /* regex, loader */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t\t},\n\n\t\tget: function ( /* file */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t\t}\n\n\t};\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\t\treturn this.setResourcePath( value );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tFrustum.prototype.setFromMatrix = function ( m ) {\n\n\t\tconsole.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );\n\t\treturn this.setFromProjectionMatrix( m );\n\n\t};\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\tObject.assign( MathUtils, {\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\t\treturn MathUtils.floorPowerOfTwo( value );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\t\treturn MathUtils.ceilPowerOfTwo( value );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix3( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n\t\t},\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix4( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tarea: function () {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\t\treturn this.getArea();\n\n\t\t},\n\t\tbarycoordFromPoint: function ( point, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn this.getBarycoord( point, target );\n\n\t\t},\n\t\tmidpoint: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\t\treturn this.getMidpoint( target );\n\n\t\t},\n\t\tnormal: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn this.getNormal( target );\n\n\t\t},\n\t\tplane: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\t\treturn this.getPlane( target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle, {\n\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t\t},\n\t\tnormal: function ( a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\t\treturn this.extractPoints( divisions );\n\n\t\t},\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Geometry.prototype, {\n\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeLineDistances: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t},\n\t\tgetWorldRotation: function () {\n\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( Mesh.prototype, {\n\n\t\tsetDrawMode: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t},\n\n\t} );\n\n\tObject.defineProperties( Mesh.prototype, {\n\n\t\tdrawMode: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );\n\t\t\t\treturn TrianglesDrawMode;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tSkinnedMesh.prototype.initBones = function () {\n\n\t\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n\n\t};\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( DynamicDrawUsage );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\treturn this.setAttribute( name, attribute );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t},\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n\n\t\t\treturn this.deleteAttribute( name );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Raycaster.prototype, {\n\n\t\tlinePrecision: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );\n\t\t\t\treturn this.params.Line.threshold;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );\n\t\t\t\tthis.params.Line.threshold = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( InterleavedBuffer.prototype, {\n\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( value );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\n\n\t\tgetArrays: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\n\n\t\t},\n\n\t\taddShapeList: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\n\n\t\t},\n\n\t\taddShape: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\toverdraw: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t},\n\n\t\tshading: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t\t}\n\t\t},\n\n\t\tstencilMask: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\treturn this.stencilFuncMask;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\tthis.stencilFuncMask = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tclearTarget: function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t},\n\t\tanimate: function ( callback ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\t\t\tthis.setAnimationLoop( callback );\n\n\t\t},\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\t\tgetMaxAnisotropy: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t\t},\n\t\tgetPrecision: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\t\treturn this.capabilities.precision;\n\n\t\t},\n\t\tresetGLState: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\t\treturn this.state.reset();\n\n\t\t},\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t},\n\t\tsetFaceCulling: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t\t},\n\t\tallocTextureUnit: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n\t\t},\n\t\tsetTexture: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n\t\t},\n\t\tsetTexture2D: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n\t\t},\n\t\tsetTextureCube: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n\t\t},\n\t\tgetActiveMipMapLevel: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\t\t\treturn this.getActiveMipmapLevel();\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\t\treturn this.getContext();\n\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );\n\t\t\t\treturn this.xr;\n\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\tthis.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* cullFace */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).' );\n\t\treturn new WebGLCubeRenderTarget( width, options );\n\n\t}\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Audio.prototype, {\n\n\t\tload: {\n\t\t\tvalue: function ( file ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\t\t\tscope.setBuffer( buffer );\n\n\t\t\t\t} );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .startTime is now .play( delay ).' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\t\treturn this.update( renderer, scene );\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been removed' );\n\n\t}\n\n\t//\n\n\tfunction JSONLoader() {\n\n\t\tconsole.error( 'THREE.JSONLoader has been removed.' );\n\n\t}\n\n\t//\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tattach: function ( /* child, scene, parent */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction LensFlare() {\n\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js' );\n\n\t}\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\t\trevision: REVISION,\n\t\t} } ) );\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeGeometry = BoxGeometry;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.Face3 = Face3;\n\texports.Face4 = Face4;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GammaEncoding = GammaEncoding;\n\texports.Geometry = Geometry;\n\texports.GeometryUtils = GeometryUtils;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.LightShadow = LightShadow;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\n\texports.Spline = Spline;\n\texports.SplineCurve = SplineCurve;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SpriteCanvasMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'SpriteCanvasMaterial';\n\tthis.rotation = 0;\n\tthis.color = new THREE.Color( 0xffffff );\n\tthis.program = function () {};\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\nTHREE.SpriteCanvasMaterial.prototype.isSpriteCanvasMaterial = true;\n\nTHREE.SpriteCanvasMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.SpriteCanvasMaterial();\n\n\tmaterial.copy( this );\n\tmaterial.color.copy( this.color );\n\tmaterial.program = this.program;\n\n\treturn material;\n\n};\n\n//\n\nTHREE.CanvasRenderer = function ( parameters ) {\n\n\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _this = this,\n\t\t_renderData, _elements, _lights,\n\t\t_projector = new THREE.Projector(),\n\n\t\t_canvas = parameters.canvas !== undefined\n\t\t\t\t ? parameters.canvas\n\t\t\t\t : document.createElement( 'canvas' ),\n\n\t\t_canvasWidth = _canvas.width,\n\t\t_canvasHeight = _canvas.height,\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\n\n\t\t_viewportX = 0,\n\t\t_viewportY = 0,\n\t\t_viewportWidth = _canvasWidth,\n\t\t_viewportHeight = _canvasHeight,\n\n\t\t_pixelRatio = 1,\n\n\t\t_context = _canvas.getContext( '2d', {\n\t\t\talpha: parameters.alpha === true\n\t\t} ),\n\n\t\t_clearColor = new THREE.Color( 0x000000 ),\n\t\t_clearAlpha = parameters.alpha === true ? 0 : 1,\n\n\t\t_contextGlobalAlpha = 1,\n\t\t_contextGlobalCompositeOperation = 0,\n\t\t_contextStrokeStyle = null,\n\t\t_contextFillStyle = null,\n\t\t_contextLineWidth = null,\n\t\t_contextLineCap = null,\n\t\t_contextLineJoin = null,\n\t\t_contextLineDash = [],\n\n\t\t_v1, _v2, _v3,\n\n\t\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\n\n\t\t_color = new THREE.Color(),\n\n\t\t_diffuseColor = new THREE.Color(),\n\t\t_emissiveColor = new THREE.Color(),\n\n\t\t_lightColor = new THREE.Color(),\n\n\t\t_patterns = {},\n\n\t\t_uvs,\n\t\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\n\n\t\t_clipBox = new THREE.Box2(),\n\t\t_clearBox = new THREE.Box2(),\n\t\t_elemBox = new THREE.Box2(),\n\n\t\t_ambientLight = new THREE.Color(),\n\t\t_directionalLights = new THREE.Color(),\n\t\t_pointLights = new THREE.Color(),\n\n\t\t_vector3 = new THREE.Vector3(), // Needed for PointLight\n\t\t_centroid = new THREE.Vector3(),\n\t\t_normal = new THREE.Vector3(),\n\t\t_normalViewMatrix = new THREE.Matrix3();\n\n\t/* TODO\n\t_canvas.mozImageSmoothingEnabled = false;\n\t_canvas.webkitImageSmoothingEnabled = false;\n\t_canvas.msImageSmoothingEnabled = false;\n\t_canvas.imageSmoothingEnabled = false;\n\t*/\n\n\t// dash+gap fallbacks for Firefox and everything else\n\n\tif ( _context.setLineDash === undefined ) {\n\n\t\t_context.setLineDash = function () {};\n\n\t}\n\n\tthis.domElement = _canvas;\n\n\tthis.autoClear = true;\n\tthis.sortObjects = true;\n\tthis.sortElements = true;\n\n\tthis.info = {\n\n\t\trender: {\n\n\t\t\tvertices: 0,\n\t\t\tfaces: 0\n\n\t\t}\n\n\t};\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _context;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _context.getContextAttributes();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value !== undefined ) _pixelRatio = value;\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t_canvasWidth = width * _pixelRatio;\n\t\t_canvasHeight = height * _pixelRatio;\n\n\t\t_canvas.width = _canvasWidth;\n\t\t_canvas.height = _canvasHeight;\n\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\t_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t_contextGlobalAlpha = 1;\n\t\t_contextGlobalCompositeOperation = 0;\n\t\t_contextStrokeStyle = null;\n\t\t_contextFillStyle = null;\n\t\t_contextLineWidth = null;\n\t\t_contextLineCap = null;\n\t\t_contextLineJoin = null;\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t_viewportX = x * _pixelRatio;\n\t\t_viewportY = y * _pixelRatio;\n\n\t\t_viewportWidth = width * _pixelRatio;\n\t\t_viewportHeight = height * _pixelRatio;\n\n\t};\n\n\tthis.setScissor = function () {};\n\tthis.setScissorTest = function () {};\n\n\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t_clearColor.set( color );\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t};\n\n\tthis.setClearColorHex = function ( hex, alpha ) {\n\n\t\tconsole.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n\t\tthis.setClearColor( hex, alpha );\n\n\t};\n\n\tthis.getClearColor = function () {\n\n\t\treturn _clearColor;\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn _clearAlpha;\n\n\t};\n\n\tthis.getMaxAnisotropy = function () {\n\n\t\treturn 0;\n\n\t};\n\n\tthis.clear = function () {\n\n\t\tif ( _clearBox.isEmpty() === false ) {\n\n\t\t\t_clearBox.intersect( _clipBox );\n\t\t\t_clearBox.expandByScalar( 2 );\n\n\t\t\t_clearBox.min.x =   _clearBox.min.x + _canvasWidthHalf;\n\t\t\t_clearBox.min.y = - _clearBox.min.y + _canvasHeightHalf;\t\t// higher y value !\n\t\t\t_clearBox.max.x =   _clearBox.max.x + _canvasWidthHalf;\n\t\t\t_clearBox.max.y = - _clearBox.max.y + _canvasHeightHalf;\t\t// lower y value !\n\n\t\t\tif ( _clearAlpha < 1 ) {\n\n\t\t\t\t_context.clearRect(\n\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( _clearAlpha > 0 ) {\n\n\t\t\t\tsetOpacity( 1 );\n\t\t\t\tsetBlending( THREE.NormalBlending );\n\n\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\n\n\t\t\t\t_context.fillRect(\n\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t_clearBox.makeEmpty();\n\n\t\t}\n\n\t};\n\n\t// compatibility\n\n\tthis.clearColor = function () {};\n\tthis.clearDepth = function () {};\n\tthis.clearStencil = function () {};\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( camera.isCamera === undefined ) {\n\n\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar background = scene.background;\n\n\t\tif ( background && background.isColor ) {\n\n\t\t\tsetOpacity( 1 );\n\t\t\tsetBlending( THREE.NormalBlending );\n\n\t\t\tsetFillStyle( background.getStyle() );\n\t\t\t_context.fillRect( 0, 0, _canvasWidth, _canvasHeight );\n\n\t\t} else if ( this.autoClear === true ) {\n\n\t\t\tthis.clear();\n\n\t\t}\n\n\t\t_this.info.render.vertices = 0;\n\t\t_this.info.render.faces = 0;\n\n\t\t_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );\n\t\t_context.translate( _canvasWidthHalf, _canvasHeightHalf );\n\n\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t_elements = _renderData.elements;\n\t\t_lights = _renderData.lights;\n\n\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\n\t\t/* DEBUG\n\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n\t\t*/\n\n\t\tcalculateLights();\n\n\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\n\n\t\t\tvar element = _elements[ e ];\n\n\t\t\tvar material = element.material;\n\n\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\n\t\t\t_elemBox.makeEmpty();\n\n\t\t\tif ( element instanceof THREE.RenderableSprite ) {\n\n\t\t\t\t_v1 = element;\n\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\n\n\t\t\t\trenderSprite( _v1, element, material );\n\n\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderLine( _v1, _v2, element, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\n\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\tif ( material.overdraw > 0 ) {\n\n\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\n\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\n\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\n\n\t\t\t\t}\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t_v3.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* DEBUG\n\t\t\tsetLineWidth( 1 );\n\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n\t\t\t*/\n\n\t\t\t_clearBox.union( _elemBox );\n\n\t\t}\n\n\t\t/* DEBUG\n\t\tsetLineWidth( 1 );\n\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n\t\t*/\n\n\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\n\n\t};\n\n\t//\n\n\tfunction calculateLights() {\n\n\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t_pointLights.setRGB( 0, 0, 0 );\n\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = _lights[ l ];\n\t\t\tvar lightColor = light.color;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t_ambientLight.add( lightColor );\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t// for sprites\n\n\t\t\t\t_directionalLights.add( lightColor );\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t// for sprites\n\n\t\t\t\t_pointLights.add( lightColor );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction calculateLight( position, normal, color ) {\n\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = _lights[ l ];\n\n\t\t\t_lightColor.copy( light.color );\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\n\t\t\t\tvar amount = normal.dot( lightPosition );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\n\t\t\t\tif ( amount == 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderSprite( v1, element, material ) {\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\tvar scaleX = element.scale.x * _canvasWidthHalf;\n\t\tvar scaleY = element.scale.y * _canvasHeightHalf;\n\n\t\tvar dist = Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite\n\t\t_elemBox.min.set( v1.x - dist, v1.y - dist );\n\t\t_elemBox.max.set( v1.x + dist, v1.y + dist );\n\n\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\tvar texture = material.map;\n\n\t\t\tif ( texture !== null ) {\n\n\t\t\t\tvar pattern = _patterns[ texture.id ];\n\n\t\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t\t\t\tvar bitmap = texture.image;\n\n\t\t\t\t\tvar ox = bitmap.width * texture.offset.x;\n\t\t\t\t\tvar oy = bitmap.height * texture.offset.y;\n\n\t\t\t\t\tvar sx = bitmap.width * texture.repeat.x;\n\t\t\t\t\tvar sy = bitmap.height * texture.repeat.y;\n\n\t\t\t\t\tvar cx = scaleX / sx;\n\t\t\t\t\tvar cy = scaleY / sy;\n\n\t\t\t\t\t_context.save();\n\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t_context.translate( - scaleX / 2, - scaleY / 2 );\n\t\t\t\t\t_context.scale( cx, cy );\n\t\t\t\t\t_context.translate( - ox, - oy );\n\t\t\t\t\t_context.fillRect( ox, oy, sx, sy );\n\t\t\t\t\t_context.restore();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// no texture\n\n\t\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t\t_context.save();\n\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t_context.scale( scaleX, - scaleY );\n\t\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t\t_context.restore();\n\n\t\t\t}\n\n\t\t} else if ( material.isSpriteCanvasMaterial ) {\n\n\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t_context.save();\n\t\t\t_context.translate( v1.x, v1.y );\n\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t_context.scale( scaleX, scaleY );\n\n\t\t\tmaterial.program( _context );\n\n\t\t\t_context.restore();\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t_context.save();\n\t\t\t_context.translate( v1.x, v1.y );\n\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t_context.scale( scaleX * material.size, - scaleY * material.size );\n\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t_context.restore();\n\n\t\t}\n\n\t\t/* DEBUG\n\t\tsetStrokeStyle( 'rgb(255,255,0)' );\n\t\t_context.beginPath();\n\t\t_context.moveTo( v1.x - 10, v1.y );\n\t\t_context.lineTo( v1.x + 10, v1.y );\n\t\t_context.moveTo( v1.x, v1.y - 10 );\n\t\t_context.lineTo( v1.x, v1.y + 10 );\n\t\t_context.stroke();\n\t\t*/\n\n\t}\n\n\tfunction renderLine( v1, v2, element, material ) {\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\t_context.beginPath();\n\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\n\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\n\n\t\tif ( material.isLineBasicMaterial ) {\n\n\t\t\tsetLineWidth( material.linewidth );\n\t\t\tsetLineCap( material.linecap );\n\t\t\tsetLineJoin( material.linejoin );\n\n\t\t\tif ( material.vertexColors !== THREE.VertexColors ) {\n\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\n\t\t\t} else {\n\n\t\t\t\tvar colorStyle1 = element.vertexColors[ 0 ].getStyle();\n\t\t\t\tvar colorStyle2 = element.vertexColors[ 1 ].getStyle();\n\n\t\t\t\tif ( colorStyle1 === colorStyle2 ) {\n\n\t\t\t\t\tsetStrokeStyle( colorStyle1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar grad = _context.createLinearGradient(\n\t\t\t\t\t\t\tv1.positionScreen.x,\n\t\t\t\t\t\t\tv1.positionScreen.y,\n\t\t\t\t\t\t\tv2.positionScreen.x,\n\t\t\t\t\t\t\tv2.positionScreen.y\n\t\t\t\t\t\t);\n\t\t\t\t\t\tgrad.addColorStop( 0, colorStyle1 );\n\t\t\t\t\t\tgrad.addColorStop( 1, colorStyle2 );\n\n\t\t\t\t\t} catch ( exception ) {\n\n\t\t\t\t\t\tgrad = colorStyle1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tsetStrokeStyle( grad );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\tsetLineDash( [ material.dashSize, material.gapSize ] );\n\n\t\t\t}\n\n\t\t\t_context.stroke();\n\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\tsetLineDash( [] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\n\n\t\t_this.info.render.vertices += 3;\n\t\t_this.info.render.faces ++;\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\n\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\n\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\n\n\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\n\n\t\tif ( ( material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial ) && material.map === null ) {\n\n\t\t\t_diffuseColor.copy( material.color );\n\t\t\t_emissiveColor.copy( material.emissive );\n\n\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t_diffuseColor.multiply( element.color );\n\n\t\t\t}\n\n\t\t\t_color.copy( _ambientLight );\n\n\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\n\t\t\tcalculateLight( _centroid, element.normalModel, _color );\n\n\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t} else if ( material.isMeshBasicMaterial || material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial ) {\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tvar mapping = material.map.mapping;\n\n\t\t\t\tif ( mapping === THREE.UVMapping ) {\n\n\t\t\t\t\t_uvs = element.uvs;\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.envMap !== null ) {\n\n\t\t\t\tif ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv1x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv1y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv2x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv2y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv3x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv3y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_color.copy( material.color );\n\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t\t_color.multiply( element.color );\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\n\n\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t} else {\n\n\t\t\t_color.setRGB( 1, 1, 1 );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\n\n\t\t_context.beginPath();\n\t\t_context.moveTo( x0, y0 );\n\t\t_context.lineTo( x1, y1 );\n\t\t_context.lineTo( x2, y2 );\n\t\t_context.closePath();\n\n\t}\n\n\tfunction strokePath( color, linewidth, linecap, linejoin ) {\n\n\t\tsetLineWidth( linewidth );\n\t\tsetLineCap( linecap );\n\t\tsetLineJoin( linejoin );\n\t\tsetStrokeStyle( color.getStyle() );\n\n\t\t_context.stroke();\n\n\t\t_elemBox.expandByScalar( linewidth * 2 );\n\n\t}\n\n\tfunction fillPath( color ) {\n\n\t\tsetFillStyle( color.getStyle() );\n\t\t_context.fill();\n\n\t}\n\n\tfunction textureToPattern( texture ) {\n\n\t\tif ( texture.version === 0 ||\n\t\t\ttexture instanceof THREE.CompressedTexture ||\n\t\t\ttexture instanceof THREE.DataTexture ) {\n\n\t\t\treturn {\n\t\t\t\tcanvas: undefined,\n\t\t\t\tversion: texture.version\n\t\t\t};\n\n\t\t}\n\n\t\tvar image = texture.image;\n\n\t\tif ( image.complete === false ) {\n\n\t\t\treturn {\n\t\t\t\tcanvas: undefined,\n\t\t\t\tversion: 0\n\t\t\t};\n\n\t\t}\n\n\t\tvar repeatX = texture.wrapS === THREE.RepeatWrapping || texture.wrapS === THREE.MirroredRepeatWrapping;\n\t\tvar repeatY = texture.wrapT === THREE.RepeatWrapping || texture.wrapT === THREE.MirroredRepeatWrapping;\n\n\t\tvar mirrorX = texture.wrapS === THREE.MirroredRepeatWrapping;\n\t\tvar mirrorY = texture.wrapT === THREE.MirroredRepeatWrapping;\n\n\t\t//\n\n\t\tvar canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = image.width * ( mirrorX ? 2 : 1 );\n\t\tcanvas.height = image.height * ( mirrorY ? 2 : 1 );\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.setTransform( 1, 0, 0, - 1, 0, image.height );\n\t\tcontext.drawImage( image, 0, 0 );\n\n\t\tif ( mirrorX === true ) {\n\n\t\t\tcontext.setTransform( - 1, 0, 0, - 1, image.width, image.height );\n\t\t\tcontext.drawImage( image, - image.width, 0 );\n\n\t\t}\n\n\t\tif ( mirrorY === true ) {\n\n\t\t\tcontext.setTransform( 1, 0, 0, 1, 0, 0 );\n\t\t\tcontext.drawImage( image, 0, image.height );\n\n\t\t}\n\n\t\tif ( mirrorX === true && mirrorY === true ) {\n\n\t\t\tcontext.setTransform( - 1, 0, 0, 1, image.width, 0 );\n\t\t\tcontext.drawImage( image, - image.width, image.height );\n\n\t\t}\n\n\t\tvar repeat = 'no-repeat';\n\n\t\tif ( repeatX === true && repeatY === true ) {\n\n\t\t\trepeat = 'repeat';\n\n\t\t} else if ( repeatX === true ) {\n\n\t\t\trepeat = 'repeat-x';\n\n\t\t} else if ( repeatY === true ) {\n\n\t\t\trepeat = 'repeat-y';\n\n\t\t}\n\n\t\tvar pattern = _context.createPattern( canvas, repeat );\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\treturn {\n\t\t\tcanvas: pattern,\n\t\t\tversion: texture.version\n\t\t};\n\n\t}\n\n\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\n\n\t\tvar pattern = _patterns[ texture.id ];\n\n\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\tpattern = textureToPattern( texture );\n\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t}\n\n\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t} else {\n\n\t\t\tsetFillStyle( 'rgba( 0, 0, 0, 1)' );\n\t\t\t_context.fill();\n\t\t\treturn;\n\n\t\t}\n\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\tvar a, b, c, d, e, f, det, idet,\n\t\t\toffsetX = texture.offset.x / texture.repeat.x,\n\t\t\toffsetY = texture.offset.y / texture.repeat.y,\n\t\t\twidth = texture.image.width * texture.repeat.x,\n\t\t\theight = texture.image.height * texture.repeat.y;\n\n\t\tu0 = ( u0 + offsetX ) * width;\n\t\tv0 = ( v0 + offsetY ) * height;\n\n\t\tu1 = ( u1 + offsetX ) * width;\n\t\tv1 = ( v1 + offsetY ) * height;\n\n\t\tu2 = ( u2 + offsetX ) * width;\n\t\tv2 = ( v2 + offsetY ) * height;\n\n\t\tx1 -= x0; y1 -= y0;\n\t\tx2 -= x0; y2 -= y0;\n\n\t\tu1 -= u0; v1 -= v0;\n\t\tu2 -= u0; v2 -= v0;\n\n\t\tdet = u1 * v2 - u2 * v1;\n\n\t\tif ( det === 0 ) return;\n\n\t\tidet = 1 / det;\n\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\te = x0 - a * u0 - c * v0;\n\t\tf = y0 - b * u0 - d * v0;\n\n\t\t_context.save();\n\t\t_context.transform( a, b, c, d, e, f );\n\t\t_context.fill();\n\t\t_context.restore();\n\n\t}\n\n\t/*\n\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\n\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\tvar a, b, c, d, e, f, det, idet,\n\t\twidth = image.width - 1,\n\t\theight = image.height - 1;\n\n\t\tu0 *= width; v0 *= height;\n\t\tu1 *= width; v1 *= height;\n\t\tu2 *= width; v2 *= height;\n\n\t\tx1 -= x0; y1 -= y0;\n\t\tx2 -= x0; y2 -= y0;\n\n\t\tu1 -= u0; v1 -= v0;\n\t\tu2 -= u0; v2 -= v0;\n\n\t\tdet = u1 * v2 - u2 * v1;\n\n\t\tidet = 1 / det;\n\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\te = x0 - a * u0 - c * v0;\n\t\tf = y0 - b * u0 - d * v0;\n\n\t\t_context.save();\n\t\t_context.transform( a, b, c, d, e, f );\n\t\t_context.clip();\n\t\t_context.drawImage( image, 0, 0 );\n\t\t_context.restore();\n\n\t}\n\t*/\n\n\t// Hide anti-alias gaps\n\n\tfunction expand( v1, v2, pixels ) {\n\n\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\n\t\t\tdet = x * x + y * y, idet;\n\n\t\tif ( det === 0 ) return;\n\n\t\tidet = pixels / Math.sqrt( det );\n\n\t\tx *= idet; y *= idet;\n\n\t\tv2.x += x; v2.y += y;\n\t\tv1.x -= x; v1.y -= y;\n\n\t}\n\n\t// Context cached methods.\n\n\tfunction setOpacity( value ) {\n\n\t\tif ( _contextGlobalAlpha !== value ) {\n\n\t\t\t_context.globalAlpha = value;\n\t\t\t_contextGlobalAlpha = value;\n\n\t\t}\n\n\t}\n\n\tfunction setBlending( value ) {\n\n\t\tif ( _contextGlobalCompositeOperation !== value ) {\n\n\t\t\tif ( value === THREE.NormalBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'source-over';\n\n\t\t\t} else if ( value === THREE.AdditiveBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'lighter';\n\n\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'darker';\n\n\t\t\t} else if ( value === THREE.MultiplyBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'multiply';\n\n\t\t\t}\n\n\t\t\t_contextGlobalCompositeOperation = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineWidth( value ) {\n\n\t\tif ( _contextLineWidth !== value ) {\n\n\t\t\t_context.lineWidth = value;\n\t\t\t_contextLineWidth = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineCap( value ) {\n\n\t\t// \"butt\", \"round\", \"square\"\n\n\t\tif ( _contextLineCap !== value ) {\n\n\t\t\t_context.lineCap = value;\n\t\t\t_contextLineCap = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineJoin( value ) {\n\n\t\t// \"round\", \"bevel\", \"miter\"\n\n\t\tif ( _contextLineJoin !== value ) {\n\n\t\t\t_context.lineJoin = value;\n\t\t\t_contextLineJoin = value;\n\n\t\t}\n\n\t}\n\n\tfunction setStrokeStyle( value ) {\n\n\t\tif ( _contextStrokeStyle !== value ) {\n\n\t\t\t_context.strokeStyle = value;\n\t\t\t_contextStrokeStyle = value;\n\n\t\t}\n\n\t}\n\n\tfunction setFillStyle( value ) {\n\n\t\tif ( _contextFillStyle !== value ) {\n\n\t\t\t_context.fillStyle = value;\n\t\t\t_contextFillStyle = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineDash( value ) {\n\n\t\tif ( _contextLineDash.length !== value.length ) {\n\n\t\t\t_context.setLineDash( value );\n\t\t\t_contextLineDash = value;\n\n\t\t}\n\n\t}\n\n};\n","/**\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\n * @author mrdoob / http://mrdoob.com/\n * @author yomotsu / https://yomotsu.net/\n */\n\nTHREE.CSS3DObject = function ( element ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.element = element;\n\tthis.element.style.position = 'absolute';\n\tthis.element.style.pointerEvents = 'auto';\n\n\tthis.addEventListener( 'removed', function () {\n\n\t\tthis.traverse( function ( object ) {\n\n\t\t\tif ( object.element instanceof Element && object.element.parentNode !== null ) {\n\n\t\t\t\tobject.element.parentNode.removeChild( object.element );\n\n\t\t\t}\n\n\t\t} );\n\n\t} );\n\n};\n\nTHREE.CSS3DObject.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;\n\nTHREE.CSS3DSprite = function ( element ) {\n\n\tTHREE.CSS3DObject.call( this, element );\n\n};\n\nTHREE.CSS3DSprite.prototype = Object.create( THREE.CSS3DObject.prototype );\nTHREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;\n\n//\n\nTHREE.CSS3DRenderer = function () {\n\n\tvar _this = this;\n\n\tvar _width, _height;\n\tvar _widthHalf, _heightHalf;\n\n\tvar matrix = new THREE.Matrix4();\n\n\tvar cache = {\n\t\tcamera: { fov: 0, style: '' },\n\t\tobjects: new WeakMap()\n\t};\n\n\tvar domElement = document.createElement( 'div' );\n\tdomElement.style.overflow = 'hidden';\n\n\tthis.domElement = domElement;\n\n\tvar cameraElement = document.createElement( 'div' );\n\n\tcameraElement.style.WebkitTransformStyle = 'preserve-3d';\n\tcameraElement.style.transformStyle = 'preserve-3d';\n\tcameraElement.style.pointerEvents = 'none';\n\n\tdomElement.appendChild( cameraElement );\n\n\tvar isIE = /Trident/i.test( navigator.userAgent );\n\n\tthis.getSize = function () {\n\n\t\treturn {\n\t\t\twidth: _width,\n\t\t\theight: _height\n\t\t};\n\n\t};\n\n\tthis.setSize = function ( width, height ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\t\t_widthHalf = _width / 2;\n\t\t_heightHalf = _height / 2;\n\n\t\tdomElement.style.width = width + 'px';\n\t\tdomElement.style.height = height + 'px';\n\n\t\tcameraElement.style.width = width + 'px';\n\t\tcameraElement.style.height = height + 'px';\n\n\t};\n\n\tfunction epsilon( value ) {\n\n\t\treturn Math.abs( value ) < 1e-10 ? 0 : value;\n\n\t}\n\n\tfunction getCameraCSSMatrix( matrix ) {\n\n\t\tvar elements = matrix.elements;\n\n\t\treturn 'matrix3d(' +\n\t\t\tepsilon( elements[ 0 ] ) + ',' +\n\t\t\tepsilon( - elements[ 1 ] ) + ',' +\n\t\t\tepsilon( elements[ 2 ] ) + ',' +\n\t\t\tepsilon( elements[ 3 ] ) + ',' +\n\t\t\tepsilon( elements[ 4 ] ) + ',' +\n\t\t\tepsilon( - elements[ 5 ] ) + ',' +\n\t\t\tepsilon( elements[ 6 ] ) + ',' +\n\t\t\tepsilon( elements[ 7 ] ) + ',' +\n\t\t\tepsilon( elements[ 8 ] ) + ',' +\n\t\t\tepsilon( - elements[ 9 ] ) + ',' +\n\t\t\tepsilon( elements[ 10 ] ) + ',' +\n\t\t\tepsilon( elements[ 11 ] ) + ',' +\n\t\t\tepsilon( elements[ 12 ] ) + ',' +\n\t\t\tepsilon( - elements[ 13 ] ) + ',' +\n\t\t\tepsilon( elements[ 14 ] ) + ',' +\n\t\t\tepsilon( elements[ 15 ] ) +\n\t\t')';\n\n\t}\n\n\tfunction getObjectCSSMatrix( matrix, cameraCSSMatrix ) {\n\n\t\tvar elements = matrix.elements;\n\t\tvar matrix3d = 'matrix3d(' +\n\t\t\tepsilon( elements[ 0 ] ) + ',' +\n\t\t\tepsilon( elements[ 1 ] ) + ',' +\n\t\t\tepsilon( elements[ 2 ] ) + ',' +\n\t\t\tepsilon( elements[ 3 ] ) + ',' +\n\t\t\tepsilon( - elements[ 4 ] ) + ',' +\n\t\t\tepsilon( - elements[ 5 ] ) + ',' +\n\t\t\tepsilon( - elements[ 6 ] ) + ',' +\n\t\t\tepsilon( - elements[ 7 ] ) + ',' +\n\t\t\tepsilon( elements[ 8 ] ) + ',' +\n\t\t\tepsilon( elements[ 9 ] ) + ',' +\n\t\t\tepsilon( elements[ 10 ] ) + ',' +\n\t\t\tepsilon( elements[ 11 ] ) + ',' +\n\t\t\tepsilon( elements[ 12 ] ) + ',' +\n\t\t\tepsilon( elements[ 13 ] ) + ',' +\n\t\t\tepsilon( elements[ 14 ] ) + ',' +\n\t\t\tepsilon( elements[ 15 ] ) +\n\t\t')';\n\n\t\tif ( isIE ) {\n\n\t\t\treturn 'translate(-50%,-50%)' +\n\t\t\t\t'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)' +\n\t\t\t\tcameraCSSMatrix +\n\t\t\t\tmatrix3d;\n\n\t\t}\n\n\t\treturn 'translate(-50%,-50%)' + matrix3d;\n\n\t}\n\n\tfunction renderObject( object, scene, camera, cameraCSSMatrix ) {\n\n\t\tif ( object instanceof THREE.CSS3DObject ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera );\n\n\t\t\tvar style;\n\n\t\t\tif ( object instanceof THREE.CSS3DSprite ) {\n\n\t\t\t\t// http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\n\n\t\t\t\tmatrix.copy( camera.matrixWorldInverse );\n\t\t\t\tmatrix.transpose();\n\t\t\t\tmatrix.copyPosition( object.matrixWorld );\n\t\t\t\tmatrix.scale( object.scale );\n\n\t\t\t\tmatrix.elements[ 3 ] = 0;\n\t\t\t\tmatrix.elements[ 7 ] = 0;\n\t\t\t\tmatrix.elements[ 11 ] = 0;\n\t\t\t\tmatrix.elements[ 15 ] = 1;\n\n\t\t\t\tstyle = getObjectCSSMatrix( matrix, cameraCSSMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tstyle = getObjectCSSMatrix( object.matrixWorld, cameraCSSMatrix );\n\n\t\t\t}\n\n\t\t\tvar element = object.element;\n\t\t\tvar cachedObject = cache.objects.get( object );\n\n\t\t\tif ( cachedObject === undefined || cachedObject.style !== style ) {\n\n\t\t\t\telement.style.WebkitTransform = style;\n\t\t\t\telement.style.transform = style;\n\n\t\t\t\tvar objectData = { style: style };\n\n\t\t\t\tif ( isIE ) {\n\n\t\t\t\t\tobjectData.distanceToCameraSquared = getDistanceToSquared( camera, object );\n\n\t\t\t\t}\n\n\t\t\t\tcache.objects.set( object, objectData );\n\n\t\t\t}\n\n\t\t\tif ( element.parentNode !== cameraElement ) {\n\n\t\t\t\tcameraElement.appendChild( element );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera );\n\n\t\t}\n\n\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( object.children[ i ], scene, camera, cameraCSSMatrix );\n\n\t\t}\n\n\t}\n\n\tvar getDistanceToSquared = function () {\n\n\t\tvar a = new THREE.Vector3();\n\t\tvar b = new THREE.Vector3();\n\n\t\treturn function ( object1, object2 ) {\n\n\t\t\ta.setFromMatrixPosition( object1.matrixWorld );\n\t\t\tb.setFromMatrixPosition( object2.matrixWorld );\n\n\t\t\treturn a.distanceToSquared( b );\n\n\t\t};\n\n\t}();\n\n\tfunction filterAndFlatten( scene ) {\n\n\t\tvar result = [];\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( object instanceof THREE.CSS3DObject ) result.push( object );\n\n\t\t} );\n\n\t\treturn result;\n\n\t}\n\n\tfunction zOrder( scene ) {\n\n\t\tvar sorted = filterAndFlatten( scene ).sort( function ( a, b ) {\n\n\t\t\tvar distanceA = cache.objects.get( a ).distanceToCameraSquared;\n\t\t\tvar distanceB = cache.objects.get( b ).distanceToCameraSquared;\n\n\t\t\treturn distanceA - distanceB;\n\n\t\t} );\n\n\t\tvar zMax = sorted.length;\n\n\t\tfor ( var i = 0, l = sorted.length; i < l; i ++ ) {\n\n\t\t\tsorted[ i ].element.style.zIndex = zMax - i;\n\n\t\t}\n\n\t}\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tvar fov = camera.projectionMatrix.elements[ 5 ] * _heightHalf;\n\n\t\tif ( cache.camera.fov !== fov ) {\n\n\t\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\t\tdomElement.style.WebkitPerspective = fov + 'px';\n\t\t\t\tdomElement.style.perspective = fov + 'px';\n\n\t\t\t} else {\n\n\t\t\t\tdomElement.style.WebkitPerspective = '';\n\t\t\t\tdomElement.style.perspective = '';\n\n\t\t\t}\n\n\t\t\tcache.camera.fov = fov;\n\n\t\t}\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tif ( camera.isOrthographicCamera ) {\n\n\t\t\tvar tx = - ( camera.right + camera.left ) / 2;\n\t\t\tvar ty = ( camera.top + camera.bottom ) / 2;\n\n\t\t}\n\n\t\tvar cameraCSSMatrix = camera.isOrthographicCamera ?\n\t\t\t'scale(' + fov + ')' + 'translate(' + epsilon( tx ) + 'px,' + epsilon( ty ) + 'px)' + getCameraCSSMatrix( camera.matrixWorldInverse ) :\n\t\t\t'translateZ(' + fov + 'px)' + getCameraCSSMatrix( camera.matrixWorldInverse );\n\n\t\tvar style = cameraCSSMatrix +\n\t\t\t'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)';\n\n\t\tif ( cache.camera.style !== style && ! isIE ) {\n\n\t\t\tcameraElement.style.WebkitTransform = style;\n\t\t\tcameraElement.style.transform = style;\n\n\t\t\tcache.camera.style = style;\n\n\t\t}\n\n\t\trenderObject( scene, scene, camera, cameraCSSMatrix );\n\n\t\tif ( isIE ) {\n\n\t\t\t// IE10 and 11 does not support 'preserve-3d'.\n\t\t\t// Thus, z-order in 3D will not work.\n\t\t\t// We have to calc z-order manually and set CSS z-index for IE.\n\t\t\t// FYI: z-index can't handle object intersection\n\t\t\tzOrder( scene );\n\n\t\t}\n\n\t};\n\n};\n","/**\n * @author richt / http://richt.me\n * @author WestLangley / http://github.com/WestLangley\n *\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n */\n\nTHREE.DeviceOrientationControls = function ( object ) {\n\n\tvar scope = this;\n\n\tthis.object = object;\n\tthis.object.rotation.reorder( 'YXZ' );\n\n\tthis.enabled = true;\n\n\tthis.deviceOrientation = {};\n\tthis.screenOrientation = 0;\n\n\tthis.alphaOffset = 0; // radians\n\n\tvar onDeviceOrientationChangeEvent = function ( event ) {\n\n\t\tscope.deviceOrientation = event;\n\n\t};\n\n\tvar onScreenOrientationChangeEvent = function () {\n\n\t\tscope.screenOrientation = window.orientation || 0;\n\n\t};\n\n\t// The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\n\tvar setObjectQuaternion = function () {\n\n\t\tvar zee = new THREE.Vector3( 0, 0, 1 );\n\n\t\tvar euler = new THREE.Euler();\n\n\t\tvar q0 = new THREE.Quaternion();\n\n\t\tvar q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\n\n\t\treturn function ( quaternion, alpha, beta, gamma, orient ) {\n\n\t\t\teuler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\n\n\t\t\tquaternion.setFromEuler( euler ); // orient the device\n\n\t\t\tquaternion.multiply( q1 ); // camera looks out the back of the device, not the top\n\n\t\t\tquaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\n\n\t\t};\n\n\t}();\n\n\tthis.connect = function () {\n\n\t\tonScreenOrientationChangeEvent(); // run once on load\n\n\t\t// iOS 13+\n\n\t\tif ( window.DeviceOrientationEvent !== undefined && typeof window.DeviceOrientationEvent.requestPermission === 'function' ) {\n\n\t\t\twindow.DeviceOrientationEvent.requestPermission().then( function ( response ) {\n\n\t\t\t\tif ( response == 'granted' ) {\n\n\t\t\t\t\twindow.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\t\t\t\twindow.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\n\t\t\t\t}\n\n\t\t\t} ).catch( function ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:', error );\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\twindow.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\t\twindow.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\n\t\t}\n\n\t\tscope.enabled = true;\n\n\t};\n\n\tthis.disconnect = function () {\n\n\t\twindow.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\twindow.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\n\t\tscope.enabled = false;\n\n\t};\n\n\tthis.update = function () {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tvar device = scope.deviceOrientation;\n\n\t\tif ( device ) {\n\n\t\t\tvar alpha = device.alpha ? THREE.MathUtils.degToRad( device.alpha ) + scope.alphaOffset : 0; // Z\n\n\t\t\tvar beta = device.beta ? THREE.MathUtils.degToRad( device.beta ) : 0; // X'\n\n\t\t\tvar gamma = device.gamma ? THREE.MathUtils.degToRad( device.gamma ) : 0; // Y''\n\n\t\t\tvar orient = scope.screenOrientation ? THREE.MathUtils.degToRad( scope.screenOrientation ) : 0; // O\n\n\t\t\tsetObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\n\n\t\t}\n\n\n\t};\n\n\tthis.dispose = function () {\n\n\t\tscope.disconnect();\n\n\t};\n\n\tthis.connect();\n\n};\n","/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author julianwa / https://github.com/julianwa\n */\n\nTHREE.RenderableObject = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableFace = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\tthis.v3 = new THREE.RenderableVertex();\n\n\tthis.normalModel = new THREE.Vector3();\n\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\tthis.vertexNormalsLength = 0;\n\n\tthis.color = new THREE.Color();\n\tthis.material = null;\n\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableVertex = function () {\n\n\tthis.position = new THREE.Vector3();\n\tthis.positionWorld = new THREE.Vector3();\n\tthis.positionScreen = new THREE.Vector4();\n\n\tthis.visible = true;\n\n};\n\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\n\tthis.positionWorld.copy( vertex.positionWorld );\n\tthis.positionScreen.copy( vertex.positionScreen );\n\n};\n\n//\n\nTHREE.RenderableLine = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\n\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\tthis.material = null;\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableSprite = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\n\tthis.x = 0;\n\tthis.y = 0;\n\tthis.z = 0;\n\n\tthis.rotation = 0;\n\tthis.scale = new THREE.Vector2();\n\n\tthis.material = null;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.Projector = function () {\n\n\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\n\t\t_renderData = { objects: [], lights: [], elements: [] },\n\n\t\t_vector3 = new THREE.Vector3(),\n\t\t_vector4 = new THREE.Vector4(),\n\n\t\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t\t_boundingBox = new THREE.Box3(),\n\t\t_points3 = new Array( 3 ),\n\n\t\t_viewMatrix = new THREE.Matrix4(),\n\t\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_modelMatrix,\n\t\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_normalMatrix = new THREE.Matrix3(),\n\n\t\t_frustum = new THREE.Frustum(),\n\n\t\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\n\t//\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function () {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n\t//\n\n\tvar RenderList = function () {\n\n\t\tvar normals = [];\n\t\tvar colors = [];\n\t\tvar uvs = [];\n\n\t\tvar object = null;\n\n\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\tfunction setObject( value ) {\n\n\t\t\tobject = value;\n\n\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\n\t\t\tnormals.length = 0;\n\t\t\tcolors.length = 0;\n\t\t\tuvs.length = 0;\n\n\t\t}\n\n\t\tfunction projectVertex( vertex ) {\n\n\t\t\tvar position = vertex.position;\n\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\tvar positionScreen = vertex.positionScreen;\n\n\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n\t\t\tvar invW = 1 / positionScreen.w;\n\n\t\t\tpositionScreen.x *= invW;\n\t\t\tpositionScreen.y *= invW;\n\t\t\tpositionScreen.z *= invW;\n\n\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\n\t\t}\n\n\t\tfunction pushVertex( x, y, z ) {\n\n\t\t\t_vertex = getNextVertexInPool();\n\t\t\t_vertex.position.set( x, y, z );\n\n\t\t\tprojectVertex( _vertex );\n\n\t\t}\n\n\t\tfunction pushNormal( x, y, z ) {\n\n\t\t\tnormals.push( x, y, z );\n\n\t\t}\n\n\t\tfunction pushColor( r, g, b ) {\n\n\t\t\tcolors.push( r, g, b );\n\n\t\t}\n\n\t\tfunction pushUv( x, y ) {\n\n\t\t\tuvs.push( x, y );\n\n\t\t}\n\n\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\n\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\n\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t_points3[ 2 ] = v3.positionScreen;\n\n\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\n\t\t}\n\n\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\n\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n\t\t}\n\n\t\tfunction pushLine( a, b ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\n\t\t\t// Clip\n\n\t\t\tv1.positionScreen.copy( v1.position ).applyMatrix4( _modelViewProjectionMatrix );\n\t\t\tv2.positionScreen.copy( v2.position ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\tif ( clipLine( v1.positionScreen, v2.positionScreen ) === true ) {\n\n\t\t\t\t// Perform the perspective divide\n\t\t\t\tv1.positionScreen.multiplyScalar( 1 / v1.positionScreen.w );\n\t\t\t\tv2.positionScreen.multiplyScalar( 1 / v2.positionScreen.w );\n\n\t\t\t\t_line = getNextLineInPool();\n\t\t\t\t_line.id = object.id;\n\t\t\t\t_line.v1.copy( v1 );\n\t\t\t\t_line.v2.copy( v2 );\n\t\t\t\t_line.z = Math.max( v1.positionScreen.z, v2.positionScreen.z );\n\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t_line.material = object.material;\n\n\t\t\t\tif ( object.material.vertexColors ) {\n\n\t\t\t\t\t_line.vertexColors[ 0 ].fromArray( colors, a * 3 );\n\t\t\t\t\t_line.vertexColors[ 1 ].fromArray( colors, b * 3 );\n\n\t\t\t\t}\n\n\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushTriangle( a, b, c, material ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\tvar v3 = _vertexPool[ c ];\n\n\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\n\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\n\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t_face.id = object.id;\n\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t// face normal\n\t\t\t\t_vector3.subVectors( v3.position, v2.position );\n\t\t\t\t_vector4.subVectors( v1.position, v2.position );\n\t\t\t\t_vector3.cross( _vector4 );\n\t\t\t\t_face.normalModel.copy( _vector3 );\n\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\n\t\t\t\t}\n\n\t\t\t\t_face.vertexNormalsLength = 3;\n\n\t\t\t\t_face.material = material;\n\n\t\t\t\tif ( material.vertexColors ) {\n\n\t\t\t\t\t_face.color.fromArray( colors, a * 3 );\n\n\t\t\t\t}\n\n\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetObject: setObject,\n\t\t\tprojectVertex: projectVertex,\n\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\tpushVertex: pushVertex,\n\t\t\tpushNormal: pushNormal,\n\t\t\tpushColor: pushColor,\n\t\t\tpushUv: pushUv,\n\t\t\tpushLine: pushLine,\n\t\t\tpushTriangle: pushTriangle\n\t\t};\n\n\t};\n\n\tvar renderList = new RenderList();\n\n\tfunction projectObject( object ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t_renderData.lights.push( object );\n\n\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\n\n\t\t\tif ( object.material.visible === false ) return;\n\t\t\tif ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\n\n\t\t\taddObject( object );\n\n\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\tif ( object.material.visible === false ) return;\n\t\t\tif ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\n\n\t\t\taddObject( object );\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction addObject( object ) {\n\n\t\t_object = getNextObjectInPool();\n\t\t_object.id = object.id;\n\t\t_object.object = object;\n\n\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t_vector3.applyMatrix4( _viewProjectionMatrix );\n\t\t_object.z = _vector3.z;\n\t\t_object.renderOrder = object.renderOrder;\n\n\t\t_renderData.objects.push( _object );\n\n\t}\n\n\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n\t\t_faceCount = 0;\n\t\t_lineCount = 0;\n\t\t_spriteCount = 0;\n\n\t\t_renderData.elements.length = 0;\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t_viewMatrix.copy( camera.matrixWorldInverse );\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t_frustum.setFromProjectionMatrix( _viewProjectionMatrix );\n\n\t\t//\n\n\t\t_objectCount = 0;\n\n\t\t_renderData.objects.length = 0;\n\t\t_renderData.lights.length = 0;\n\n\t\tprojectObject( scene );\n\n\t\tif ( sortObjects === true ) {\n\n\t\t\t_renderData.objects.sort( painterSort );\n\n\t\t}\n\n\t\t//\n\n\t\tvar objects = _renderData.objects;\n\n\t\tfor ( var o = 0, ol = objects.length; o < ol; o ++ ) {\n\n\t\t\tvar object = objects[ o ].object;\n\t\t\tvar geometry = object.geometry;\n\n\t\t\trenderList.setObject( object );\n\n\t\t\t_modelMatrix = object.matrixWorld;\n\n\t\t\t_vertexCount = 0;\n\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\tvar x = positions[ i ];\n\t\t\t\t\t\tvar y = positions[ i + 1 ];\n\t\t\t\t\t\tvar z = positions[ i + 2 ];\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphAttributes.position;\n\t\t\t\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\n\t\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t\t\tx += target.getX( i / 3 ) * influence;\n\t\t\t\t\t\t\t\t\ty += target.getY( i / 3 ) * influence;\n\t\t\t\t\t\t\t\t\tz += target.getZ( i / 3 ) * influence;\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tx += ( target.getX( i / 3 ) - positions[ i ] ) * influence;\n\t\t\t\t\t\t\t\t\ty += ( target.getY( i / 3 ) - positions[ i + 1 ] ) * influence;\n\t\t\t\t\t\t\t\t\tz += ( target.getZ( i / 3 ) - positions[ i + 2 ] ) * influence;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderList.pushVertex( x, y, z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\n\t\t\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.color !== undefined ) {\n\n\t\t\t\t\t\tvar colors = attributes.color.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = colors.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushColor( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( var g = 0; g < groups.length; g ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ g ];\n\n\t\t\t\t\t\t\t\tmaterial = isMultiMaterial === true\n\t\t\t\t\t\t\t\t\t ? object.material[ group.materialIndex ]\n\t\t\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ], material );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ], material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( var g = 0; g < groups.length; g ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ g ];\n\n\t\t\t\t\t\t\t\tmaterial = isMultiMaterial === true\n\t\t\t\t\t\t\t\t\t ? object.material[ group.materialIndex ]\n\t\t\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2, material );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2, material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\n\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector3.copy( vertex );\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\n\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\n\t\t\t\t\t\tmaterial = isMultiMaterial === true\n\t\t\t\t\t\t\t ? object.material[ face.materialIndex ]\n\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\tvar side = material.side;\n\n\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\n\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\n\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\n\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\n\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t_face.v3.copy( v3 );\n\n\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\n\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t_face.normalModel.negate();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\n\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\n\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\tnormalModel.negate();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\n\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\n\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\n\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attributes.color !== undefined ) {\n\n\t\t\t\t\t\t\tvar colors = attributes.color.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = colors.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushColor( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\n\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\n\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\n\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\n\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\n\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\n\t\t\t\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\n\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\t\t\tif ( object.material.vertexColors ) {\n\n\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Points ) {\n\n\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector4.set( vertex.x, vertex.y, vertex.z, 1 );\n\t\t\t\t\t\t_vector4.applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t_vector4.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ], 1 );\n\t\t\t\t\t\t\t_vector4.applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( sortElements === true ) {\n\n\t\t\t_renderData.elements.sort( painterSort );\n\n\t\t}\n\n\t\treturn _renderData;\n\n\t};\n\n\tfunction pushPoint( _vector4, object, camera ) {\n\n\t\tvar invW = 1 / _vector4.w;\n\n\t\t_vector4.z *= invW;\n\n\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\n\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t_sprite.id = object.id;\n\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t_sprite.z = _vector4.z;\n\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t_sprite.object = object;\n\n\t\t\t_sprite.rotation = object.rotation;\n\n\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\n\t\t\t_sprite.material = object.material;\n\n\t\t\t_renderData.elements.push( _sprite );\n\n\t\t}\n\n\t}\n\n\t// Pools\n\n\tfunction getNextObjectInPool() {\n\n\t\tif ( _objectCount === _objectPoolLength ) {\n\n\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t_objectPool.push( object );\n\t\t\t_objectPoolLength ++;\n\t\t\t_objectCount ++;\n\t\t\treturn object;\n\n\t\t}\n\n\t\treturn _objectPool[ _objectCount ++ ];\n\n\t}\n\n\tfunction getNextVertexInPool() {\n\n\t\tif ( _vertexCount === _vertexPoolLength ) {\n\n\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t_vertexPool.push( vertex );\n\t\t\t_vertexPoolLength ++;\n\t\t\t_vertexCount ++;\n\t\t\treturn vertex;\n\n\t\t}\n\n\t\treturn _vertexPool[ _vertexCount ++ ];\n\n\t}\n\n\tfunction getNextFaceInPool() {\n\n\t\tif ( _faceCount === _facePoolLength ) {\n\n\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t_facePool.push( face );\n\t\t\t_facePoolLength ++;\n\t\t\t_faceCount ++;\n\t\t\treturn face;\n\n\t\t}\n\n\t\treturn _facePool[ _faceCount ++ ];\n\n\n\t}\n\n\tfunction getNextLineInPool() {\n\n\t\tif ( _lineCount === _linePoolLength ) {\n\n\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t_linePool.push( line );\n\t\t\t_linePoolLength ++;\n\t\t\t_lineCount ++;\n\t\t\treturn line;\n\n\t\t}\n\n\t\treturn _linePool[ _lineCount ++ ];\n\n\t}\n\n\tfunction getNextSpriteInPool() {\n\n\t\tif ( _spriteCount === _spritePoolLength ) {\n\n\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t_spritePool.push( sprite );\n\t\t\t_spritePoolLength ++;\n\t\t\t_spriteCount ++;\n\t\t\treturn sprite;\n\n\t\t}\n\n\t\treturn _spritePool[ _spriteCount ++ ];\n\n\t}\n\n\t//\n\n\tfunction painterSort( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else if ( a.id !== b.id ) {\n\n\t\t\treturn a.id - b.id;\n\n\t\t} else {\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t}\n\n\tfunction clipLine( s1, s2 ) {\n\n\t\tvar alpha1 = 0, alpha2 = 1,\n\n\t\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t\t// Z = -1 and Z = +1, respectively.\n\n\t\t\tbc1near = s1.z + s1.w,\n\t\t\tbc2near = s2.z + s2.w,\n\t\t\tbc1far = - s1.z + s1.w,\n\t\t\tbc2far = - s2.z + s2.w;\n\n\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\treturn true;\n\n\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\n\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\treturn false;\n\n\t\t} else {\n\n\t\t\t// The line segment spans at least one clip plane.\n\n\t\t\tif ( bc1near < 0 ) {\n\n\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t} else if ( bc2near < 0 ) {\n\n\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t}\n\n\t\t\tif ( bc1far < 0 ) {\n\n\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t} else if ( bc2far < 0 ) {\n\n\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t}\n\n\t\t\tif ( alpha2 < alpha1 ) {\n\n\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n","/*!\n * weakmap-polyfill v2.0.0 - ECMAScript6 WeakMap polyfill\n * https://github.com/polygonplanet/weakmap-polyfill\n * Copyright (c) 2015-2016 polygon planet <polygon.planet.aqua@gmail.com>\n * @license MIT\n */\n\n(function(self) {\n  'use strict';\n\n  if (self.WeakMap) {\n    return;\n  }\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var defineProperty = function(object, name, value) {\n    if (Object.defineProperty) {\n      Object.defineProperty(object, name, {\n        configurable: true,\n        writable: true,\n        value: value\n      });\n    } else {\n      object[name] = value;\n    }\n  };\n\n  self.WeakMap = (function() {\n\n    // ECMA-262 23.3 WeakMap Objects\n    function WeakMap() {\n      if (this === void 0) {\n        throw new TypeError(\"Constructor WeakMap requires 'new'\");\n      }\n\n      defineProperty(this, '_id', genId('_WeakMap'));\n\n      // ECMA-262 23.3.1.1 WeakMap([iterable])\n      if (arguments.length > 0) {\n        // Currently, WeakMap `iterable` argument is not supported\n        throw new TypeError('WeakMap iterable is not supported');\n      }\n    }\n\n    // ECMA-262 23.3.3.2 WeakMap.prototype.delete(key)\n    defineProperty(WeakMap.prototype, 'delete', function(key) {\n      checkInstance(this, 'delete');\n\n      if (!isObject(key)) {\n        return false;\n      }\n\n      var entry = key[this._id];\n      if (entry && entry[0] === key) {\n        delete key[this._id];\n        return true;\n      }\n\n      return false;\n    });\n\n    // ECMA-262 23.3.3.3 WeakMap.prototype.get(key)\n    defineProperty(WeakMap.prototype, 'get', function(key) {\n      checkInstance(this, 'get');\n\n      if (!isObject(key)) {\n        return void 0;\n      }\n\n      var entry = key[this._id];\n      if (entry && entry[0] === key) {\n        return entry[1];\n      }\n\n      return void 0;\n    });\n\n    // ECMA-262 23.3.3.4 WeakMap.prototype.has(key)\n    defineProperty(WeakMap.prototype, 'has', function(key) {\n      checkInstance(this, 'has');\n\n      if (!isObject(key)) {\n        return false;\n      }\n\n      var entry = key[this._id];\n      if (entry && entry[0] === key) {\n        return true;\n      }\n\n      return false;\n    });\n\n    // ECMA-262 23.3.3.5 WeakMap.prototype.set(key, value)\n    defineProperty(WeakMap.prototype, 'set', function(key, value) {\n      checkInstance(this, 'set');\n\n      if (!isObject(key)) {\n        throw new TypeError('Invalid value used as weak map key');\n      }\n\n      var entry = key[this._id];\n      if (entry && entry[0] === key) {\n        entry[1] = value;\n        return this;\n      }\n\n      defineProperty(key, this._id, [key, value]);\n      return this;\n    });\n\n\n    function checkInstance(x, methodName) {\n      if (!isObject(x) || !hasOwnProperty.call(x, '_id')) {\n        throw new TypeError(\n          methodName + ' method called on incompatible receiver ' +\n          typeof x\n        );\n      }\n    }\n\n    function genId(prefix) {\n      return prefix + '_' + rand() + '.' + rand();\n    }\n\n    function rand() {\n      return Math.random().toString().substring(2);\n    }\n\n\n    defineProperty(WeakMap, '_polyfill', true);\n    return WeakMap;\n  })();\n\n\n  function isObject(x) {\n    return Object(x) === x;\n  }\n\n})(\n  typeof self !== 'undefined' ? self :\n  typeof window !== 'undefined' ? window :\n  typeof global !== 'undefined' ? global : this\n);\n"]}